<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
    <link>https://www.smashingmagazine.com/</link>
    <description>Recent content in Articles on Smashing Magazine — For Web Designers And Developers</description>
    <lastBuildDate>Sun, 09 Jul 2023 15:38:01 GMT</lastBuildDate>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <generator>manual</generator>
    <language>en</language>
    <image>
      <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
      <url>https://www.smashingmagazine.com/images/favicon/app-icon-512x512.png</url>
      <link>https://www.smashingmagazine.com/</link>
    </image>
    <copyright>All rights reserved 2023, Smashing Media AG</copyright>
    <category>Development</category>
    <category>Design</category>
    <category>UX</category>
    <category>Mobile</category>
    <category>Front-end</category>
    <atom:link href="https://www.smashingmagazine.com/feed/" rel="self" type="application/rss+xml"/>
    <item>
      <title><![CDATA[Shines, Perspective, And Rotations: Fancy CSS 3D Effects For Images]]></title>
      <link>https://smashingmagazine.com/2023/07/shines-perspective-rotations-css-3d-effects-images/</link>
      <guid>https://smashingmagazine.com/2023/07/shines-perspective-rotations-css-3d-effects-images/</guid>
      <pubDate>Fri, 07 Jul 2023 11:00:00 GMT</pubDate>
      <description><![CDATA[CSS has all kinds of tricks that are capable of turning images into neat, interactive elements. This article is a collection of fancy 3D effects for images that demonstrate those CSS powers.]]></description>
      <content:encoded><![CDATA[<p>We all agree that 3D effects are cool, right? I think so, especially when they are combined with subtle animations. In this article, we will explore a few CSS tricks to create stunning 3D effects!</p>
<p><em>“Why do we need another article about CSS 3D effects… aren’t there already a million of those?”</em> Yes, but this one is a bit special because we are going to work with the smallest amount of HTML possible. In fact, this is the only markup we will use to craft some pretty amazing CSS effects for images:</p>
<pre><code>&lt;img src="" alt=""&gt;
</code></pre>

<p>That’s it! All we need is an <code>&lt;img&gt;</code> tag. Everything else will be done in CSS.</p>
<p>Here’s how it’s going to work. We are going to explore three different effects that are not linked to each other but might borrow a little from one another. You don’t need to read the entire article in one sitting. Actually, I suggest reading one section at a time, taking time to understand the concepts and what the underlying code is doing before moving on to another effect.</p>
<h3>Table Of Contents</h3>
<ul>
<li><a href="#css-3d-shine">CSS 3D Shine</a></li>
<li><a href="#css-3d-parallax">CSS 3D Parallax</a></li>
<li><a href="#css-3d-rotation">CSS 3D Rotation</a></li>
</ul>
CSS 3D Shine
<p>For the first effect, we are going to add a shine animation to the image, as well as a slight rotation when hovered.</p>
<p><img src="https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-masking.png" /></p>
<p>The green box illustrates the gradient where the blue lines define the color stops we used. Initially, it’s placed at <code>100% 100%</code>, and on hover, we slide it to <code>0 0</code>. The slide effect will move the diagonal part of the gradient (the opaque part) along the image to create the shine effect.</p>
<p>Here is the full demo again. I’m even including a second variation for you to tear apart and investigate how it works.</p>
<p><img src="https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-clipping.png" /></p>
<p>The <code>clip-path</code> defines the clipped area, and we need that area to remain fixed. That’s why we added a translation on hover to move the image in the opposite direction of the <code>clip-path</code>.</p>
<p><img src="https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-outline.png" /></p>
<p>Here’s how that works. First, we add some padding to the top and the bottom of the image and apply an <code>outline</code> that is semi-transparent black.</p>
<p>Second, we apply a negative <code>outline-offset</code> so that the <code>outline</code> covers the image on the left and right sides but leaves the top and bottom alone:</p>
<pre><code>img {
  --d: 18px;  /* depth */

  padding-block: var(--d);
  outline: var(--d) solid #0008;
  outline-offset: calc(-1 * var(--d));
}
</code></pre>

<p>Notice that I have created a variable, <code>--d</code>, that controls the thickness of the <code>outline</code>. This is what gives the image depth.</p>
<p>The last step is to add the <code>clip-path</code>. We need a polygon with eight points for that.</p>
<p><img src="https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-polygon.png" /></p>
<p>The red points are fixed, and the green points are ones that we will animate to reveal the depth. I know it’s far from a 3D box, but this next visual, where we add the rotation, gives a better illustration.</p>
<p><img src="https://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/css-image-effects-3d-box-hover.png" /></p>
<p>Initially, the image is rotated with some perspective. The green points on the right are aligned with the red ones. Thus, we hide the <code>outline</code> on that side to keep it visible only on the left side. We have our 3D box with the depth on the left.</p>
<p>On hover, we move the green points on the left while rotating the image. Halfway through the animation, all the green points are aligned with the red ones, and the rotation angle is equal to <code>0deg</code>, hiding the <code>outline</code> and giving the image a flat appearance.</p>
<p>Then, we continue the rotation, and the green points on the right move while the left ones remain in place. We get the same 3D effect but with the depth on the right side.</p>
<p>Bear with me because the next block of code is going to look really confusing at first. That’s due to a few new variables and the eight-point polygon we’re drawing on the <code>clip-path</code> property.</p>
<pre><code>@property --_l {
  syntax: "&lt;flength&gt;";
  initial-value: 0px;
  inherits: true;
}
@property --_r {
  syntax: "&lt;length&gt;";
  initial-value: 0px;
  inherits: true;
}

img {
  --d: 18px;  /* depth */
  --a: 20deg; /* angle */
  --x: 10px;

  --_d: calc(100% - var(--d));
  --_l: 0px;
  --_r: 0px;

  clip-path: polygon(
    /* The two green points on the left */
    var(--_l) calc(var(--_d) - var(--x)),
    var(--_l) calc(var(--d)  + var(--x)),

    /* The two red points on the top */
    var(--d) var(--d),var(--_d) var(--d),

    /* The two green points on the right */
    calc(var(--_d) + var(--_r)) calc(var(--d)  + var(--x)),
    calc(var(--_d) + var(--_r)) calc(var(--_d) - var(--x)),

    /* The two red points on the bottom */
    var(--_d) var(--_d),var(--d) var(--_d)

    );
  transition: transform .3s, --_r .15s, --_l .15s .15s;
}

/* Update the points of the polygon on hover */
img:hover{
  --_l: var(--d);
  --_r: var(--d);
  --_i: -1;
  transition-delay: 0s, .15s, 0s;
}
</code></pre>

<p>I’ve used comments to help explain what the code is doing. Notice I am using the variables <code>--_l</code> and <code>--_r</code> to define the position of the green points. I animate those variables from <code>0</code> to the depth (<code>--d</code>) value. The <code>@property</code> declarations at the top allow us to animate the variables by specifying the type of values they are (<code>&lt;length&gt;</code>).</p>
<p><strong>Note</strong>: <em>Not all browsers currently support <code>@property</code>. So, I’ve added a fallback in the demo with a slightly different animation.</em></p>
<p>After the polygon is drawn on the <code>clip-path</code> property, the next thing the code does is apply a <code>transition</code> that handles the rotation. The full rotation lasts <code>.3s</code>, so the green points need to transition at half that duration (<code>.15s</code>). On hover, the polygon points on the left move immediately (<code>0s</code>) while the right points move at half the duration (courtesy of a <code>.15s</code> delay). When we leave the hovered state, we use different delays because we need the right points to move immediately (<code>0s</code>) while the left points move at half the duration.</p>
<p>What’s up with that <code>--x</code> variable, right? If you check the first image that I provided to illustrate the <code>clip-path</code> points, you will notice that the green points are slightly shifted from the top and bottom edges, which is logical to simulate the 3D effect. The <code>--x</code> variable controls how much shifting takes place, but the math behind it is a bit complex and not easy to express in CSS. So, we update it manually based on each case until we get a value that feels right.</p>
<p>That gives us our final result!</p>
<p>See the Pen <a href="https://codepen.io/t_afif/pen/yLRRBKj">3D images with hover effect</a> by <a href="https://codepen.io/t_afif">Temani Afif</a>.</p>
Wrapping Up
<p>I hope you enjoyed — and perhaps were even challenged by — this exploration of CSS 3D image effects. We worked with a whole bunch of advanced CSS features, including masks, clipping, gradients, transitions, and calculations, to make some pretty incredible hover effects for images that you certainly don’t see every day.</p>
<p>And we did it in a way that only needed one line of HTML. No <code>div</code>s. No classes or IDs. No pseudo-elements. Just a single <code>&lt;img&gt;</code> tag is all we need. Yes, it’s true that more markup may have made the CSS less complex, but the fact that it relies on a plain HTML element means the CSS can be used more broadly. CSS is powerful enough to do all of this on a single element!</p>
<p>I’ve written extensively about advanced CSS styles for images. If you’re looking for more ideas and inspiration, I encourage you to check out the following articles I’ve published:</p>
<ul>
<li>“<a href="https://verpex.com/blog/website-tips/css-tricks-to-make-your-image-look-stunning">CSS Effects For Stunning Images</a>” (Verpex)</li>
<li>“<a href="https://css-tricks.com/fancy-image-decorations-single-element-magic/">Fancy Image Decorations: Single Element Magic</a>” (CSS-Tricks)</li>
<li>“<a href="https://css-tricks.com/fancy-image-decorations-masks-and-advanced-hover-effects/">Fancy Image Decorations: Masks and Advanced Hover Effects</a>” (CSS-Tricks)</li>
<li>“<a href="https://css-tricks.com/fancy-image-decorations-outlines-and-complex-animations/">Fancy Image Decorations: Outlines and Complex Animations</a>” (CSS-Tricks)</li>
<li>“<a href="https://www.sitepoint.com/css-image-reveal-animation/">How to Add a CSS Reveal Animation to Your Images</a>” (SitePoint)</li>
</ul>
<p>I also run a site called <a href="https://css-tip.com/">CSS Tip</a> that explores even more fancy effects — subscribe to <a href="https://css-tip.com/feed/feed.xml">the RSS feed</a> to keep up with the experiments I do over there!</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2022/01/css-radial-conic-gradient/">A Deep CSS Dive Into Radial And Conic Gradients</a>,” Ahmad Shadeed</li>
<li>“<a href="https://www.smashingmagazine.com/2021/06/img-alt-attribute-alternate-description-decorative/">Your Image Is Probably Not Decorative</a>,” Eric Bailey</li>
<li>“<a href="https://www.smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/">Understanding Easing Functions For CSS Animations And Transitions</a>,” Adrian Bece</li>
<li>“<a href="https://www.smashingmagazine.com/2021/02/responsive-image-effects-css-gradients-aspect-ratio/">Create Responsive Image Effects With CSS Gradients And aspect-ratio</a>,” Stephanie Eckles</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Temani Afif)</author>
      <enclosure url="http://files.smashing.media/articles/shines-perspective-rotations-css-3d-effects-images/shines-perspective-rotations-css-3d-effects-images.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[The UX Of Flight Searches: How We Challenged Industry Standards]]></title>
      <link>https://smashingmagazine.com/2023/07/reimagining-flight-search-ux/</link>
      <guid>https://smashingmagazine.com/2023/07/reimagining-flight-search-ux/</guid>
      <pubDate>Thu, 06 Jul 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[As of today, the world’s 50 top airlines have all agreed on the same flight search pattern. Yet the path to booking the right flight remains frustrating and confusing. Is there really only one solution? Explore the thought experiment which turned the seemingly untouchable pattern on its head and offered new food for thought.]]></description>
      <content:encoded><![CDATA[<p>The topic of <strong>flight search</strong> has been on our workbench before. Back in 2015, part of us worked on the design strategy of Lufthansa Group. In 2017, airberlin became one of our first clients. Together with the team, we redesigned their digital world from scratch: flight search, booking process, homepage, and much more. </p>
<p>What was considered too progressive in 2016 celebrated its first successes in 2017. Six years later, in 2023, it is now being expanded as a case study by <a href="https://dumbo.design/en/">DUMBO</a>.</p>
<p><strong>Note:</strong> <em>This is a fictitious case study undertaken on our own initiative and was neither developed nor launched. With this study, we want to question habits, break down barriers and offer new food for thought to improve interactions.</em></p>
A Flight Search Observation
<p>If you, like most, have searched for a flight at some point, you are familiar with the usual song and dance involved with playing with the search criteria in order to score an optimal search result. If I change the travel date, will it be cheaper? If I depart from a different airport, will the flights be less-full? As a result, the hunt is a never-ending combination of viewing results, making further refinements, and constantly changing the search criteria. So, do you see yourself here? Twenty-nine students who took part in the study “<a href="https://www.researchgate.net/publication/308971242_Online_Search_Behavior_in_the_Air_Travel_Market_Reconsidering_the_Consideration_Set_and_Customer_Journey_Concepts">Online Search Behaviour in the Air Travel Market: Reconsidering the Consideration Set and Customer Journey Concepts</a>” certainly did. </p>
<p>According to the 2017 study, flight search algorithms cover a dynamic solution space with often more than a thousand possibilities that can change rapidly, cutting it down based on user criteria. Users, on the other hand, go through three rounds of refinement on average, filtering and refining search criteria, comparing possibilities, and making trade-off judgments. The analyzed flight searches are insufficient to support the final decision: users must still make judgments and trade-offs depending on their personal preferences and priorities. The study emphasizes the importance of improved interfaces with decision support up to the final decision in order to improve the flight search experience.</p>
Frontstage: What We Can See
<p>When we observe people booking flights, we notice unpleasant side effects and interesting user hacks. </p>
<ul>
<li><strong>Searching for the right flight is extremely stressful.</strong><br />High prices, limited availability, artificial scarcity, a plenitude of options, as well as an ingrained penchant for cost traps and loopholes. </li>
<li><strong>The flight gets more expensive with every search.</strong><br />Opaque pricing and the feeling of being on the airline’s hook make travelers suspicious of cookies and tracking. </li>
<li><strong>Flights are like looking for a needle in a haystack.</strong><br />Alone, the route from Frankfurt to Honolulu offers 8,777 different flight combinations. To get a handle on what’s on offer, travelers turn to third-party providers like Swoodoo to combine different routes or Google to find offers from the surrounding area and many more.</li>
<li><strong>Long waiting times are nerve-wracking.</strong><br />Prices are recalculated, and availability is checked for every search query. In our test, a query usually takes 10 seconds. This always leads to long waiting times in the observed search behavior. </li>
<li><strong>The quest for the best flight deal.</strong><br />The most important decision criterion for a flight is still the price. But every search parameter influences it. The lack of price communication reinforces the feeling of intransparency. </li>
<li><strong>The feeling of having paid too much for the flight.</strong><br />When it comes to flights, most travelers are confronted with “from” prices. However, these are only available on certain flights and in limited numbers. What if such flights are not available? This leads to negative anchoring: what seemed affordable at the beginning now seems all the more expensive.</li>
</ul>
Backstage: What We Don’t See
<p>It takes a look behind the curtain to find out that there are numerous technical and business constraints that have an enormous impact on flight search. Rather than years of usability engineering, the search experience is largely determined by third-party booking systems, dynamic pricing, and cost-per-request mechanics.</p>
<ul>
<li><strong>3rd Party Booking System.</strong><br />Behind most flight searches is a reservation system running called Amadeus. This is where millions of customers purchase their tickets. Amadeus is mostly responsible for which data points are available and how the interface is designed. Airlines use those systems and can only exert limited influence on a better solution. </li>
<li><strong>Dynamic Pricing.</strong><br />Dynamic pricing is used to set the price of a product based on current market conditions. Prices fluctuate in real-time based on current data. This includes data on customer booking behavior, competitor airline prices, popular events, and a variety of other factors that affect product demand and necessitate price adjustments. </li>
<li><strong>Cost per request.</strong><br />In most cases, searches are charged per request. To keep costs down, airlines want to reduce search requests. This leads to avoiding both pre-emptive and iterative queries.</li>
</ul>
Reframing The Problem
<p>The classic flight search pattern inevitably leads to a frustrating trial-and-error loop.</p>
<p>Flight searches are structured in such a way that it is highly unlikely that a customer can find a suitable flight straight away because it presupposes that the traveler has entered all price-relevant information before submitting the search query.</p>
<p>The dilemma: this price-relevant information affects availability, travel time, and service. At the same time, they are factors for the traveler that can be changed depending on the result and personal preferences and flexibility. As a result, travelers develop their own user hacks to compare different search parameters and weigh the trade-off between price and convenience. </p>
<p>How can we give travelers a better flight search experience? Our pitch is  The Balancing Act: a guided dialogue between traveler and airline. Strap in — we’re taking a deep dive.</p>
The Flight Search Redesign: Introducing The “Balancing Act”
<p>What makes a search successful? It’s an increasingly important question in the age of global travel and its limitless possibilities. We focus on finding your personal solution. It puts the <strong>traveler, their occasion, and their budget</strong> at the center of the interaction and looks at how well the flight offer fits. To do this, we fundamentally change the tailoring of the interaction with travelers. We break down the search form into individual tasks and change the sequence of interactions. This allows a more balanced approach between friction and progress.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/1-overview-key-screens-flight-search.png" /></p>
<h3>We Will Take You There. But Where To?</h3>
<p>Let’s start the flight search with the only question whose answer is not up for discussion: <em>Where to</em>? Knowing <strong>where you want to go</strong>, we might be able to help you to weigh up every further detail in terms of cost and convenience. This will allow you to make conscious decisions.</p>
<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/17-start-destination.gif"><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/16-start-destination-800px.gif" /></a>DUMBO (2023). Enter flight search by entering the destination. [Design Mockup] (<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/17-start-destination.gif">Large preview</a>)

<h3>Find The Perfect Connection</h3>
<p>We will find the <strong>best departure point</strong> for you. Depending on where you want to go, where you plan to stay, and at what prices and conditions, we might be able to offer alternative routes that are easy on your wallet and get you to your destination comfortably and quickly. </p>
<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/19-origin-alternatives.gif"><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/18-origin-alternatives-800px.gif" /></a>DUMBO (2023). Origin airport selection, including alternatives. [Design Mockup] (<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/19-origin-alternatives.gif">Large preview</a>)

<h3>Times That Suit You</h3>
<p>Airplanes are almost always in the air, but they are not always the same. For some journeys, you are time-bound; for others — not. <strong>Best-price calendars</strong>, travel times, expected load factors (and much more) might help you to find the best flight for your journey. </p>
<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/21-date-picker.gif"><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/20-date-picker-800px.gif" /></a>DUMBO (2023). The date picker includes different views to highlight data according to personal preferences. [Design Mockup] (<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/21-date-picker.gif">Large preview</a>)

<h3>Without Getting In Your Way</h3>
<p>We will react as quickly as possible. Even before we talk about the number of passengers, deposit access codes, or create multi-stop flights, you should have an idea of whether there is a suitable flight for you.</p>
<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/23-flight-connections-loading.gif"><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/22-flight-connections-loading-800px.gif" /></a>DUMBO (2023). Flight plan with prices being subsequently loaded. [Design Mockup] (<a href="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/23-flight-connections-loading.gif">Large preview</a>)

This Is How We Get There: Step By Step
<p>To redesign the interface, we need to uncover the structure of the <strong>interaction moment</strong>. For this, we use the <a href="http://dumbo.design/en/insights/ultimate-guide-user-interface-design-humans">Interaction Archetypes</a> framework to help us align our design with the underlying <a href="https://dumbo.design/en/insights/behavioral-intentions/">usage intention</a> — the <a href="https://dumbo.design/en/insights/integrated-behaviour-model-decoded/">strongest driver</a> for user interaction.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/2-sticky-notes-canvas.jpg" /></p>
<h3>Task</h3>
<p>The task is to <strong>find a suitable flight</strong>. We see that this usually takes several attempts and is achieved with the help of different search platforms and flight brokers. This shows that we are clearly in a weighing phase when searching for a flight. Different flights, routes, and times are weighed against travel planning criteria as well as personal preferences and limiting factors of the traveler.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/3-infografik-factors-involved-in-flight-selection-en.png" /></p>
<h3>Intention Of Use</h3>
<p>The <a href="https://dumbo.design/en/insights/integrated-behaviour-model-decoded/">intention of use is a key determinant of interaction</a>. The better we tailor our interface to the intention of use, the higher the probability that the interaction will be successful. Research findings show that usage intentions for digital applications can be assigned to <a href="https://dumbo.design/en/insights/behavioral-intentions/">three categories</a>: “Act,” “Understand,” and “Explore.”</p>
<p>In our case, we can clearly <strong>attribute the flight search to the “Act” usage intention</strong>: users have a specific task and want to make progress in completing that task as quickly as possible. Flight search is characterized by a clear goal. Travelers want to get an overview of the available flights to find the best option for their specific solution space. They take a structured approach and selectively change search parameters to uncover inconsistencies and explore the limits of what is available. </p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/4-dimensionen-act-understand-explore-tabelle-en.png" /></p>
<h3>Success</h3>
<p>Changing various parameters shows that the solution space for this task is multi-dimensional. And not just that, on closer inspection, it becomes clear that a flight search is a <strong>hierarchical step process</strong>: a so-called “Analytic Hierarchy Process.” We assume that decision-making tasks are sequential. The traveler works his way from decision level to decision level. All levels of the flight search are causally related.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/5-infografik-lh-decisionlevel-centralquestion-en.png" /></p>
<h3>Goal</h3>
<p>Flight search is inextricably linked to <strong>flight booking</strong>, which in turn is linked to travel to and from the destination. The primary goal of travelers is “to arrive.” Here, we observe the same causal relationship that we have already seen with the success factors. We are also dealing with a hierarchical step process.</p>
<p>This means that before they start looking for a flight, travelers have already considered the destination, the time of travel, the duration of the trip, and the travel costs. Travelers, therefore, usually <strong>have a kind of hidden agenda</strong>, which they consciously or subconsciously review in the course of their flight search.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/6-table-analytic-hierarchy-process-travel-decision-making.png" /></p>
<h3>Hypotheses</h3>
<p>If we consider the problem and the context in which the interface is used, <strong>three hypotheses emerge</strong>. They open up a solution space for the flight search: </p>
<ul>
<li>If we <strong>design the search along the decision levels</strong>, travelers can make faster and more confident decisions at each stage of decision-making.</li>
<li>If travelers can already <strong>weigh their options</strong> in terms of price and convenience at the moment of entry, the first search results are likely to be suitable, thereby reducing the re-submission of search queries.</li>
<li>If we <strong>show partial information as soon as it is available</strong>, travelers can quickly scan for suitable flight results, thereby reducing friction and the abandonment rate.</li>
</ul>
The Challenge
<p>What we currently see in the airline and flight industry space is that search now assumes that its parameters <strong>meet fixed criteria</strong>. Accordingly, a “successful” search is given if it is able to deliver a result based on the ten declarations. In interaction, however, travelers behave in a way that contradicts this assumption. </p>
<p>The decision-making levels through which travelers approach their destination provide information about it. They are hierarchical and causally related. </p>
<p>Each individual decision is the result of a trade-off between price and convenience. A successful search is, therefore, the smallest compromise.</p>
<p>So if we create space for <strong>trade-offs through interaction</strong>, we should be able to make the flight search more targeted to the traveler’s needs. This raises three major design opportunities:</p>
<ol>
<li>How might we utilize travelers’ decision-making levels to speed up the process?</li>
<li>How might we help travelers balance price and convenience to reduce search queries?</li>
<li>How might we deliver results to travelers faster to reduce friction and abandonment rates?</li>
</ol>
Solutions
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/7-archetype-canvas.JPG" /></p>
<h3>From Static To Sequential</h3>
<p>We say goodbye to the predominant route indication of a flight search and ask in the first step: Where do you want to travel to? We quickly realized that the “where to” question fits the mental model of travelers and can serve as a springboard for goal-oriented interaction. Only if we bring travelers closer to their destination can the airline make a relevant offer.</p>
<h4>Four steps</h4>
<p>But that’s not all: We completely <strong>remove the search form</strong> and lead travelers to their flight in a dialogue. Following the decision-making levels, we ask for four pieces of information one after the other, on the basis of which we can generate a suitable flight plan:</p>
<ol>
<li>Specify the destination.</li>
<li>Specify the origin.</li>
<li>Select the departure time.</li>
<li>Select the return time.</li>
</ol>
<h4>Four Moments Of Success</h4>
<p>Each entry is given our full attention. This reduces the cognitive load and creates space for content, even on small devices. This, in turn, is only possible if the effort per input is less for the user than the added value generated in each case. </p>
<p>If we <strong>orchestrate this information</strong> along the decision-making levels of travelers and understand their causality, we can consciously bring about partial decisions. Meanwhile, on the way to the individual solution space, we create four moments of success: </p>
<ol>
<li>Can we fly to our destination? Check!</li>
<li>Can we fly from a suitable departure point? Check!</li>
<li>Can we fly out at the right time? Check!</li>
<li>Can we fly back at the right time? Check!</li>
</ol>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/8-dialog-destination-origin-date.png" /></p>
<h4>More Later</h4>
<p>Further queries are refrained from in favor of the offer. All other criteria can be used to adjust the results while maintaining the flight schedule. These criteria are preselected based on the <strong>most frequent flight bookings or personal flight behavior</strong>. </p>
<ul>
<li>Number of adults,</li>
<li>Number of children,</li>
<li>Number of infants,</li>
<li>Access codes to selected flights,</li>
<li>Selection of class.</li>
</ul>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/9-adjustments-details.png" /></p>
<h3>From Passive To Proactive</h3>
<p>To make well-informed decisions, travelers need to be aware of the consequences of their choices in the flight booking process. This means they need to understand the <strong>impact of their partial decision</strong> (date, departure location, airport) on the expected outcome. The better they can do this, the easier it is for them to weigh up. Ultimately, the best flight is the result of a personal trade-off between convenience and cost.</p>
<h4>The Best Departure Point For You</h4>
<p>If you live in western Germany, there are five possible departure points within a 90-minute radius. Frankfurt and Düsseldorf are two major hubs among them. So the departure airport is extremely flexible and raises questions: </p>
<ul>
<li>Which departure airport comes into question? </li>
<li>Which airline is preferred? </li>
<li>What is an acceptable price range? </li>
<li>How mobile is one on the way to the airport? </li>
</ul>
<p><strong>Based on geolocation and the route network</strong>, conclusions can be drawn about a suitable departure airport depending on the destination. To do this, we look at nearby airports and rate them according to comfort and price. In addition, the travel time and the airline also play a role. </p>
<p>And that’s not all. We could <strong>place targeted offers</strong>, which could allow the airline to drive competition or control the load factor across the organization. In this way, attractive incentives can be created with the help of discounts, therefore positively influencing the actions of travelers.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/10-departure-recommendation.png" /></p>
<h4>The Best Time To Fly For You</h4>
<p>The travel period is probably the most obscure and yet most important parameter for travelers, yet it is also the most essential factor in determining airfare and availability. A single day earlier or later can quickly add up to several hundred euros. This can have a critical impact on travel planning.</p>
<p>We don’t want travelers to have to correct their search later, so we <strong>add additional indicators to the date selection</strong>. First and foremost, there is a price display that is broken down daily for outbound and return flights. </p>
<p>Travel planning does not always leave room for maneuver. Therefore, early indicators of availability are all the more important. For this purpose, we <strong>mark days on which the destination is not served</strong> as well as days with particularly high load factors. In this way, we can set impulses at an early stage of travel planning to avoid negative booking experiences. </p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/11-date-picker-highlight-options.png" /></p>
<h4>The Best Ticket For You?</h4>
<p>A “One-Way Flight” can be more expensive than a “Return Flight.” We consider the option “One-Way Flight” within the date selection. This is because it is an alternative to a return flight. And the associated price is an important piece of information to consider when travelers are weighing options.</p>
<p>Even before the flight plan has been loaded, we <strong>put all options on the table</strong>. This is how we offer maximum price transparency. </p>
<p><strong>Disclaimer</strong>: <em>Multi-stop flights were not considered in this case study.</em></p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/12-price-calendar.png" /></p>
<h3>From Accurate To Instant</h3>
<p>If we communicate flights and their prices prior to checking whether the flight is not yet fully booked or the prices have changed, there is a risk that the offer will have to be corrected. Usually, all of us want to make statements that can be fulfilled. But it needs a <strong>tolerance for errors</strong> in communication in order to provide volatile flight data as quickly as possible. </p>
<p>The following example: A flight is supposed to have a price of 300 euros, or so it was the day before. In the meantime, the prices have changed, and the flight costs 305 euros. As a result, the assumption based on the information was wrong and had to be corrected to the disadvantage of the customer.</p>
<p>Stupid. But: One was already in a situation to give a price indication. After all, the flight before and after might cost 600 euros and is therefore even more irrelevant than a flight for 305 euros if one had assumed 300 euros. </p>
<p>The communication error is less important than the <strong>added value at the moment of interaction</strong>. We can only overcome technical and business constraints with the help of estimates and assumptions. </p>
<h4>Caching</h4>
<p>In order to achieve price transparency, we have to refrain from requesting price calculations. Due to the costs per request and the loading times, it is not possible for us to communicate prices as they currently are. Therefore, we have to <strong>cache prices from previous searches</strong>, at least until a flight selection can be made.</p>
<p>This could also mean that we know that <strong>prices may change</strong> once the final flights are selected. The requirement for accurate price communication is sacrificed in favor of relevant selection criteria and fast landing times. After all, price is typically the most important factor in weighing any partial decision. </p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/13-price-caching.png" /></p>
<h4>Flight Plan</h4>
<p>To speed up the interaction, we need to put the availability check at the end. The route network has been determined; the flight plan has been drawn up. With the route information and travel times, we should have the corresponding flight plan immediately available. The availability check can be either downstream or simultaneous. In this way, we enable systems to communicate without being a hindrance to travelers. </p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/14-price-reloading.png" /></p>
<h4>Geolocation</h4>
<p>Geolocation data can be used to <strong>draw conclusions about the departure airport</strong>. We do not necessarily have to use the geolocation API for this. It should also be possible to achieve sufficient localization with the help of IP address search so that we can immediately create added value. Once we have identified the airports in the vicinity, we can evaluate potential connections in terms of cost and convenience.</p>
<p><img src="https://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/15-departure-geolocation.png" /></p>
Overcoming Limits
<p>Anyone who has ever had to search for and book a flight surely knows: it is nerve-wracking and time-consuming. Before you can even start the search, you have to enter ten details in the search form. This means that in the very first stage of the search, you’ve already had to make ten decisions. Unfortunately, and often, <strong>only one thing is certain: the destination of the journey</strong>.</p>
<p>Along our thought process, we have shown that the classic flight search pattern is broken, often because external factors such as technical and business constraints influence the flight search experience. However, we have shown that airlines and searches can break the pattern. This can be achieved by entering into a dialogue with the user and leading them <strong>from one decision level to another</strong> to eventually fit their specific needs and goals.</p>
<p>If you found this approach useful or interesting, I recommend our <a href="http://dumbo.design/en/insights/ultimate-guide-user-interface-design-humans">guide to developing your own Interaction Blueprint</a>. It is based on our “Interaction Archetypes” framework that allows you to strategically illuminate a user’s behavioral patterns, as well as their interactions with digital interfaces. It has greatly transformed and improved our design process. We hope that it could transform your design process, too.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2023/04/what-is-design-thinking/">What Is Design Thinking?</a>,” Krithika Subramanian</li>
<li>“<a href="https://www.smashingmagazine.com/2022/07/designing-better-pricing-page/">Designing Effective Pricing Plans UX</a>,” Vitaly Friedman</li>
<li>“<a href="https://www.smashingmagazine.com/2017/08/removing-friction-ux-last-minute-travel-planning-activity-booking/">Removing Friction In UX: Last-Minute Travel Planning And Activity Booking (A Case Study)</a>,” Einar Þór Gústafsson</li>
<li>“<a href="https://www.smashingmagazine.com/2022/05/sunuva-case-study-ux-changes-result-increase-conversion/">How Even Small UX Changes Can Result In An Increase In Conversion (A Case Study)</a>,” Denis Studennikov</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Robert Goesch)</author>
      <enclosure url="http://files.smashing.media/articles/reimagining-flight-search-challenged-industry-norms/ux-flight-searches-challenged-industry-standards.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Sustainable Design Toolkits And Frameworks]]></title>
      <link>https://smashingmagazine.com/2023/07/sustainable-design-toolkits-and-resources/</link>
      <guid>https://smashingmagazine.com/2023/07/sustainable-design-toolkits-and-resources/</guid>
      <pubDate>Tue, 04 Jul 2023 09:00:00 GMT</pubDate>
      <description><![CDATA[How can we create products and experiences that don’t cause harm to the planet and to the people who use them? What do we need to consider to make more sustainable design decisions and reduce the carbon footprint of our websites? In this post, we compiled valuable resources that will get you familiar with the principles of sustainable design.]]></description>
      <content:encoded><![CDATA[<p>“Sustainable” design is a paradigm that emphasizes the impact that design practices and workflows have on the environment with the goal of <strong>reducing carbon emissions</strong>. The design decisions we make are reflected in our planet’s climate, from the energy consumption of the tools we use to how the products we build interact with the environment and plenty of other things in between. In this collection, we compiled resources to help you understand the principles of sustainable design and how to integrate them into the way we work and the things we make.</p>
Design For Sustainability
<p>The <a href="https://joint-research-centre.ec.europa.eu/scientific-activities-z/sustainable-product-policy_en">EU Science Hub’s Sustainable Product Policy</a> estimates that over 80% of all product-related environmental impacts are determined during the design phase. But how can design teams ensure that sustainability is at the core of <strong>every design choice</strong> they make? To help their designers develop design habits about sustainability, IBM published “<a href="https://www.ibm.com/design/practices/design-for-sustainability/">IBM Design for sustainability</a>.”</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/ibm-designing-for-sustainability-opt.png" /></p>
<p>At the heart of the framework is the idea that the user, community, and social value should outweigh any <strong>negative environmental and social impact</strong> in the present and the future. To achieve this vision, experiences need to be inclusive, easy to learn and use, and efficient for both users and overall power consumption.</p>
<p>The <a href="https://www.ibm.com/design/practices/design-for-sustainability/design-for-sustainability-positionpaper.pdf">sustainability checklist</a> is part of the framework and it gives <strong>practical tips</strong> for optimizing designs to meet these goals. It’s no rocket science, but the checklist does offer useful considerations that will help improve performance, speed, and responsiveness.</p>
Sustainability Methods and Design Principles
<p><a href="https://sustainabilityguide.eu/">The Sustainability Guide</a> from SVID is an overarching framework for <strong>sustainable design and development practices</strong> that contains sections wholly dedicated to methods and design principles that are centered around sustainable practices.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainability-guide-opt.png" /></p>
<p>The <a href="https://sustainabilityguide.eu/ecodesign/design/">design</a> section illustrates the system-wide lifecycle of the design process, describing it as a <strong>circular system</strong> where everything in a product design is interconnected and linked by environmental criteria that is embedded at all stages.</p>
<p>The <a href="https://sustainabilityguide.eu/methods/">methods</a> section is an archive of tools, resources, case studies, and expert advice that can be used to <strong>educate a team</strong>, as well as kickstart a team into sustainable environmental practices.</p>
Sustainable Design Strategies
<p>The crux of sustainable design strategies, according to <a href="https://leyla-acaroglu.medium.com/about">Leyla Acaroglu</a>, is ensuring that the tools we use in a design workflow and how we use them today do not have a negative impact on the planet in the future.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainable-design-strategies-opt.png" /></p>
<p>What Leyla does in this <a href="https://medium.com/disruptive-design/quick-guide-to-sustainable-design-strategies-641765a86fb8">extensive Medium post</a> is curate an <strong>ecodesign strategy set</strong> that covers core considerations for <strong>product design</strong> that build sustainability into the process, from manufacturing and recyclability to efficiency and modularity. By including these considerations into the design lifecycle, it is possible to develop products and services that reflect sustainable practices, such as a product’s ability to dematerialize, how easily it can be recycled, how long it lasts, whether it can be dissembled by customers, and to what extent it can be repurposed for other uses.</p>
Sustainable Web Design Practices
<p>Is the admin experience as easy and intuitive as the front-end experience? Is the message useful for your target audience? Could a Progressive Web App be an efficient solution? A lot of questions need to be asked when you want to deliver digital products and services that respect the <strong>principles</strong> of the <a href="https://www.sustainablewebmanifesto.com/">Sustainable Web Manifesto</a>. The site <a href="https://sustainablewebdesign.org/">Sustainable Web Design</a> helps you find the right sustainability strategy for your project.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainable-web-design-strategies-opt.png" /></p>
<p>The strategies are divided into <strong>different categories</strong>: design, client and project ethos, content and marketing, development, hosting, and business operations. In each category, you’ll find questions worth considering and an explanation of why it matters. Links to further reading resources let you dive deeper into each aspect. A helpful guide that supports you on every step of the design process.</p>
Sustainable Web Hosting Companies
<p>According to some estimates, the impact of the Internet and our gadgets on <strong>global greenhouse emissions</strong> is similar to that of the airline industry. To speed up the transition towards a green, fossil-free Internet, there’s a question we all can ask ourselves: <em>Are our websites hosted green?</em></p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainable-web-hosting-companies-opt.png" /></p>
<p>The Green Web Foundation built a checker to help you quickly find out if your hosting provider is using green energy or compensating for its services. All you need to do is enter the URL. If you want to make the <strong>switch to a green hosting provider</strong>, the foundation also published a <a href="https://www.thegreenwebfoundation.org/directory/">directory of 478 green hosting companies</a> in 35 countries. A small step that makes a difference.</p>
Sustainability Score Calculator
<p>So, just how large is the carbon footprint of your website? The Internet uses electricity, of course, but it also relies on data centers that distribute information, and the energy to power each and every device that receives that information. Even a small website has a <strong>carbon footprint</strong>.</p>
<p>The <a href="https://www.websitecarbon.com/">Sustainability Score Calculator</a> is one way to find out. Employing a methodology that takes energy-consuming attributes into account, this free calculator estimates the amount of carbon dioxide produced by a particular website. It looks at the weight of images on a page, whether web fonts are integrated, and any front-end frameworks in use, among other considerations, to inform its calculations.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainability-score-calculator-opt.png" /></p>
<p>The exact amount of carbon dioxide produced by a website can probably be evaluated in a number of ways, and this specific calculator makes its own assumptions. Regardless of the exact inputs used in the results, the fact that the Sustainability Score Calculator can come up with a rough estimate for a website’s carbon dioxide output on a <strong>per page view</strong> basis is a reasonable starting point for determining just how big of a footprint a site has on the environment.</p>
Sustainable UX Design Toolkit
<p><a href="https://miro.com/miroverse/the-sustainable-ux-design-toolkit/">The Sustainable UX Design Toolkit</a> is a resource produced by the <a href="https://sustainableuxmanifesto.com">Sustainable UX Network</a>, a non-profit organization that has established a <strong>community of designers</strong> around sustainable environmental design practices.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainable-ux-design-toolkit-opt.png" /></p>
<p>The organization developed the toolkit as a Miro board that is freely available to clone into your own Miro account. Not a Miro user? You can still reference the embedded board and zoom into it to view the <strong>four-step process</strong> that walks you through concept to presentation, providing useful considerations, best practices, and even templates you can use right away.</p>
Sustainability Nudges in UX
<p>In the last few years, customers have become more and more aware of how important <strong>environmental friendliness</strong> and social responsibility are when making a purchase. But even with increased awareness, businesses still play a key role in informing, enabling, and encouraging sustainable behavior. In his post “<a href="https://uxdesign.cc/7-behavioural-ux-approaches-encouraging-sustainable-purchases-a57678dcf993">7 behavioural UX approaches encouraging sustainable purchases</a>,” Damien Lutz takes a closer look at how e-commerce businesses encourage sustainable purchases and what we can learn from them.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainability-nudges.png" /></p>
<p>From Zalando’s sustainability filters and <a href="https://sustainability.aboutamazon.com/environment/the-climate-pledge">Amazon’s Climate Pledge Friendly Hub</a> to Qantas’ Green Tier membership and sustainable shopping assistants, Damien analyzes different strategies of <strong>nudging customers</strong> towards more sustainable decisions. Based on his observations from these <strong>real-life examples</strong>, he summarizes practical behavioral <abbr>UX</abbr> tips that help everyone create experiences that promote sustainability. Interesting insights are guaranteed.</p>
Green the Web Podcast
<p>Since 2019, <abbr>UX</abbr>/UI designer Sandy Dähnert shares her passion for a sustainable web on her site <em>Green the Web</em>. Last year, she started the <a href="https://greentheweb.com/the-green-the-web-podcast-is-online/">Green the Web Podcast</a> on all things <strong>sustainable design best practices</strong>, ecological and social user research, information architecture, user interface design, and more.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/green-the-web-opt.png" /></p>
<p>Whether it’s sustainability-infused user journey maps, <abbr>UX</abbr>/UI factors for a lightweight website, or approaches for greener checkout, in the podcast Sandy shares her deep love of <strong>sustainable UX</strong> and <abbr>UI</abbr> design to encourage everyone to step into green design and play an active role in shaping this new design philosophy. You can listen to the podcast on <a href="https://open.spotify.com/show/6IDd3hCmMJZR8LVHRthdwF">Spotify</a> or <a href="https://podcasts.apple.com/us/podcast/green-the-web/id1646879509">Apple Podcasts</a>.</p>
Sustainable UX Playbook
<p>The Sustainable UX Playbook is a yet-to-be-released work in progress by the same folks who maintain the <a href="https://sustainableuxmanifesto.com">Sustainable UX Manifesto</a>. The playbook is set to provide guidelines, best practices, and examples to help you and your team adopt an <strong>environmentally-centered design approach</strong>.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sux-playbook-opt.png" /></p>
<p>The exact date of when the Sustainable UX Playbook will be available is to be determined, but it will be published to <a href="https://sustainableuxplaybook.com/">SustainableUXPlaybook.com</a> (which currently redirects to the Sustainable UX Manifesto) when it is ready.</p>
Sustainability Figma Kit
<p>The <a href="https://www.figma.com/community/file/1165191622334300908">Sustainability Figma Kit</a> that Elisa Fabbian, Rachele Pedol, and Margherita Troilo created helps digital designers move from human-centered design to a more sustainable life-centered design approach. It consists of a learning guide, 23 action cards, and a flowchart.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainability-kit-for-digital-designers-opt.png" /></p>
<p>The <strong>learning guide</strong> introduces you to the broader context and importance of designing products and services with a reduced environmental impact. The action cards explore problems you might encounter in different phases of the design process and how to solve them. Last but not least, the <strong>flowchart</strong> helps you find out which sustainability actions can be applied to the specific type of project you are working on by providing useful tips for designing in a more conscious way.</p>
Sustainability Innovation Framework
<p><a href="https://www.figma.com/community/file/1198811753322710709/Sustainability-Innovation-Framework">Sustainability Innovation Framework</a> is an effort from <a href="http://www.sebastiangier.com">Sebastian Gier</a> that is all about the planning phase of an effort to scope work for projects aimed at reducing carbon emissions.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainability-innovation-framework-opt.png" /></p>
<p>The process is mapped to traditional design thinking, helping you start work by <strong>aligning objectives</strong> and <strong>documenting assertions</strong> before tying them into user needs. What makes this framework particularly useful is that it helps prioritize the ideas generated by the process by their environmental impact.</p>
<p>The entire framework is available as a collaborative FigJam board that can be cloned to your own Figma account.</p>
EcoCards Game Workshop Toolkit
<p>One of the most difficult hurdles to adopting a sustainable design process is figuring out how to <strong>discuss the topic as a team</strong>. Getting everyone on the same page about what it means to design sustainably and how to establish a process for it are paramount for any team.</p>
<p>That’s what makes the <a href="https://www.figma.com/community/file/1197230942511819987/EcoCards---jeu-de-cartes-d'%C3%A9coconception-web-%2F-web-ecodesign-card-game">EcoCards Game Workshop Toolkit</a> such a valuable resource. The toolkit is a collection of three card-based games designed to facilitate team discussion on sustainable design practices. Each game is framed as a “workshop” meant to take place at <strong>different stages in the design process</strong>, detailing the game rules with a series of steps using a plain deck of playing cards to move the discussion forward.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/ecocards-opt.png" /></p>
<p>The EcoCards are created as a FigJam board that can be cloned to your Figma account. They are available in English and French translations.</p>
Team Sustainability Retrospective
<p>OK, so perhaps your team has adopted a sustainable design process that aims to reduce carbon emissions. How do you know it’s working? That’s the purpose of the <a href="https://miro.com/miroverse/team-sustainability-retrospective/">Team Sustainability Retrospective</a>, a Miro template produced by <a href="https://www.superpowers.school">Paddy Dhanda</a>.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/team-sustainability-retrospective-opt.png" /></p>
<p>Rather than high-fiving your team for implementing a sustainable system, this set of templates will help you assess whether or not your efforts are paying off in a streamlined <strong>five-step process</strong>. This way, your team can re-group after the implementation of the design process and properly measure its impact with data that form actionable insights for improving the process even further.</p>
World Wide Waste Book
<p><a href="https://gerrymcgovern.com/books/world-wide-waste/"><em>World Wide Waste</em></a> is a book by Gerry McGovern, aiming to debunk the perception that being “digital” is akin to being “green.” It provides a healthy dose of statistics about the impact of digital products and services and details the <strong>crisis of energy consumption</strong> in the world.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/world-wide-waste-opt.png" /></p>
<p>For example, McGovern attempts to clear up the misunderstanding that cloud technologies are somehow ethereal elements that are carbon-free, but rather physical data centers that result in large quantifiable emissions. If nothing else, this book will equip you with the information you might need to help <strong>convince your team to adopt more sustainable practices</strong> with statistics and case studies to make the case.</p>
Sustainable Web Design Book
<p>If the <em>World Wide Waste</em> book is all about defining and diagnosing unsustainable design practices, then this offering from A Book Apart is aimed at curing those symptoms. Written by lead author of the “<a href="https://www.sustainablewebmanifesto.com">Sustainable Web Manifesto</a>” Tom Greenwood, <em><a href="https://abookapart.com/products/sustainable-web-design/">Sustainable Web Design</a></em> is a collection of practical web design advice for everything from how to <strong>measure a website’s environmental impact</strong> and identifying <strong>low-carbon design practices</strong> to creating <strong>energy-efficient development processes</strong> and creating a hosting environment that helps <strong>reduce climate costs</strong>.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/sustainable-web-design-book-opt.png" /></p>
<p>Like all A Book Apart publications, <em>Sustainable Web Design</em> is available in print and digital editions — just remember that the digital copy is not a carbon-free option, as many of the resources in this roundup have noted. Then again, the printed copy also has climate considerations due to the costs of transporting the book to your front door. Just buying the book is an excellent example of the conundrums of sustainable design.</p>
Climate Tech Guide For Designers
<p>If you’re looking for help establishing yourself in a <strong>career in sustainable design</strong>, Enrique Allen and the Designer Fund team offer the <a href="https://www.designerfund.com/blog/climate-tech-guide-for-designers/">Climate Tech Guide for Designers</a>.</p>
<p>This guide is less about teams adopting sustainable design standards than it is a resource for helping you make a decision about where you work and who you work for. How passionate is the company about climate? What problems is the company trying to solve, and are the solutions based on climate technology and considerations? These are the types of questions that will allow you to find the right fit for your career.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/climate-tech-guide-for-designers-opt.png" /></p>
<p>What makes this Climate Tech Guide for Designers especially useful is that it goes beyond company considerations by offering advice for how to position yourself for a career in climate technology, capping things off with an extensive list of companies that demonstrate sustainable practices.</p>
Ethical Design Handbook
<p>The <a href="https://www.smashingmagazine.com/printed-books/ethical-design-handbook/"><em>Ethical Design Handbook</em></a> is a book we offer right here at Smashing Magazine. Written by authors Trine Falbe, Martin Michael Frederiksen, and Kim Andersen, these guidelines serve as a roadmap to learn about adopting and integrating <strong>ethical design practices</strong> into a business model.</p>
<p>Wait, why are we talking about “ethical design” when we’ve been sharing resources on “sustainable design”? Ethical and sustainable design work hand-in-hand, as ethical design relies on <strong>sustainable digital business practices</strong> in addition to a slew of larger concepts that determine an organization’s ethical practices, from transparency in how data is collected to how inclusiveness is built into a design. In other words, ethical and sustainable design are united by a cause to prevent harm to people. A sustainable design process supports a healthy environment that, in turn, supports an <strong>ethical responsibility</strong> to care about the impact we have on the planet. </p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/ethical-design-handbook-opt.png" /></p>
<p>All in all, the <em>Ethical Design Handbook</em> is about leveraging ethical business practices as a market differentiator that can be used as a <strong>competitive advantage</strong>. Sustainable design principles are part of that matrix, demonstrating that sustainable practices can be aligned to — and even enhance — business objectives.</p>
Ethical Design Resources
<p>Another useful resource to help designers and developers live up to the responsibility of causing no harm and ensure that the experiences they build are <strong>inclusive, honest, and safe</strong> are the <a href="https://www.ethicaldesignresources.com/">Ethical Design Resources</a> which Lexi Namer maintains in collaboration with the <a href="https://ethicaldesignnetwork.com/">Ethical Design Network</a> and Kate Every.</p>
<p><img src="https://files.smashing.media/articles/sustainable-design-toolkits/ethical-design-resources-opt.png" /></p>
<p>On Ethical Design Resources, you’ll find <strong>articles, books, courses, frameworks</strong>, tools, talks, videos, podcasts, and more covering different aspects of ethical design. They help you assess the impact of your design decisions, uncover harmful practices, and support you in making design choices that respect your users.</p>
<p>And if you need more resources, take a look at <a href="https://ethicaldesign.guide/">Ethical Design Guide</a> and <a href="https://humanebydesign.com/resources">Humane By Design</a>.</p>
Wrapping Up
<p>There you have it, a deep collection of toolkits, frameworks, and resources you can use to learn about sustainable design practices and how to adopt them into your own design process. Notice how the collection reveals that sustainable design is a <strong>multifaceted topic</strong> that considers everything from how we work to the specific tools we use to work. It even covers product design as a whole and the decisions that impact the sustainability of a product, not to mention how business objectives influence environmental objectives.</p>
<p>There may not be a single silver bullet or resource that immediately aligns you and your work with sustainable design practices. That said, the resources provided in this roundup can help you <strong>make big and small gains</strong> alike, whether it’s reflected in something as seemingly small as the hosting provider you decide to use for your website or something more involved such as integrating environmental considerations at every stage of the design process.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Cosima Mielke &amp; Geoff Graham)</author>
      <enclosure url="http://files.smashing.media/articles/sustainable-design-toolkits/sustainability-innovation-framework-opt.png" length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Off To New Adventures (July 2023 Wallpapers Edition)]]></title>
      <link>https://smashingmagazine.com/2023/06/desktop-wallpaper-calendars-july-2023/</link>
      <guid>https://smashingmagazine.com/2023/06/desktop-wallpaper-calendars-july-2023/</guid>
      <pubDate>Fri, 30 Jun 2023 10:30:00 GMT</pubDate>
      <description><![CDATA[Let’s welcome the new month with some fresh desktop wallpapers. Designed by artists and designers from around the globe, they come in versions with and without a calendar for July 2023. Enjoy!]]></description>
      <content:encoded><![CDATA[<p>Often, it’s the little things that inspire us and that we treasure most. The sky shining in the most beautiful colors at the end of a seemingly endless summer day, riding your bike through a light rain shower on a hot afternoon — or maybe it’s a scoop of your favorite ice cream that refuels your batteries? No matter what <strong>big and small adventures</strong> July will have in store for you this year, our new collection of wallpapers is bound to cater for some inspiration along the way.</p>

<p>More than twelve years ago, we started this <a href="https://www.smashingmagazine.com/category/wallpapers">monthly wallpapers series</a> to bring you a variety of beautiful, unique, and inspiring wallpapers every month. It’s a <strong>community effort</strong> made possible by artists and designers from around the globe who challenge their creative skills to cater for some good vibes on your screens. And, well, it wasn’t any different this time around.</p>

<p>In this post, you’ll find their wallpaper designs for <strong>July 2023</strong>. All of them come in versions with and without a calendar and can be downloaded for free. To make the month even more colorful, we also compiled a selection of July favorites from our wallpapers archives at the end of this post. A huge thank-you to everyone who submitted their artwork — this post wouldn’t exist without you!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
<li><strong><a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>
</ul>

Under The Enchanting Moonlight
<p>“Two friends sat under the enchanting moonlight, enjoying the serene ambiance as they savoured their cups of tea. It was a rare and precious connection that transcended the ordinary, kindled by the magic of the moonlight. Eventually, as the night began to wane, they reluctantly stood, their empty cups in hand. They carried with them the memories and the tranquility of the moonlit tea session, knowing that they would return to this special place to create new memories in the future.” — Designed by <a href="https://design-studio.io/">Bhabna Basak</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/july-23-under-the-enchanting-moonlight-full.jpg"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-august-2023/july-23-under-the-enchanting-moonlight-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/july-23-under-the-enchanting-moonlight-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/cal/july-23-under-the-enchanting-moonlight-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/under-the-enchanting-moonlight/nocal/july-23-under-the-enchanting-moonlight-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

DJ Little Bird
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/july-23-dj-little-bird-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-dj-little-bird-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/july-23-dj-little-bird-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/cal/july-23-dj-little-bird-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/dj-little-bird/nocal/july-23-dj-little-bird-nocal-3840x2160.png">3840x2160</a></li>
</ul>

In Space
<p>Designed by <a href="https://lieke2005.myportfolio.com/">Lieke Dol</a> from the Netherlands.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/july-23-in-space-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-in-space-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/july-23-in-space-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/cal/july-23-in-space-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/in-space/nocal/july-23-in-space-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Unleash Your Inner Grandmaster
<p>“Hey there, chess champs and rook-ies! Today, we’re rolling out the red carpet for the grandest celebration in the chess universe. It’s World Chess Day, where we celebrate the brain-bending battles, knightly maneuvers, and epic pawn sacrifices that keep us coming back for more! Step into the realm of kings and queens, where the fate of nations is decided over a checkered battlefield. Chess, the ultimate game of mental gymnastics, proves that you don’t need biceps of steel to flex your strategic muscles!” — Designed by <a href="https://www.popwebdesign.net/label-design-novi-sad.html">PopArt Studio </a> from Serbia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/july-23-unleash-your-inner-grandmaster-full.jpg"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-unleash-your-inner-grandmaster-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/july-23-unleash-your-inner-grandmaster-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/cal/july-23-unleash-your-inner-grandmaster-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/unleash-your-inner-grandmaster/nocal/july-23-unleash-your-inner-grandmaster-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Cross The Bridge
<p>“On this trip around the world, we return to Europe, specifically to London. We walked through its streets and decided to cross the bridge to enjoy both sides of the city. We may take one of its famous red buses or take a walk along the Thames. In any case, we have a whole month to become true Londoners.” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela Jimenez</a> from Spain.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/july-23-cross-the-bridge-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-cross-the-bridge-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/july-23-cross-the-bridge-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/cal/july-23-cross-the-bridge-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/cross-the-bridge/nocal/july-23-cross-the-bridge-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Swim Swim
<p>Designed by Rebecca Curiel.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/july-23-swim-swim-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-august-2023/july-23-swim-swim-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/july-23-swim-swim-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/cal/july-23-swim-swim-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/swim-swim/nocal/july-23-swim-swim-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Flat Design ’s-Hertogenbosch
<p>“I admire artwork that is made using simple shapes and colors in Illustrator, also known as flat design. The amazing things you can make with these simple shapes are just mind-blowing. The buildings in the artwork come from my hometown ’s-Hertogenbosch in the Netherlands. I am most proud of the great cathedral on the left. The number of hours I’ve put into it is not normal.” — Designed by <a href="https://gar-papaya-9ebn.squarespace.com/config/">Mitch van Trigt</a> from the Netherlands.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/july-23-flat-design-s-hertogenbosch-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-flat-design-s-hertogenbosch-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/july-23-flat-design-s-hertogenbosch-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/cal/july-23-flat-design-s-hertogenbosch-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/flat-design-s-hertogenbosch/nocal/july-23-flat-design-s-hertogenbosch-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Motion Sickness
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/july-23-motion-sickness-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-motion-sickness-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/july-23-motion-sickness-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/cal/july-23-motion-sickness-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/motion-sickness/nocal/july-23-motion-sickness-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Underneath The Banana Tree
<p>“July is the time to relax. What about having a rest underneath a… banana tree, lala la la? You know this song? Yes it’s about a mango tree, but never mind.” — Designed by <a href="https://www.philippebrouard.fr">Philippe Brouard</a> from France.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/july-23-underneath-the-banana-tree-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-august-2023/july-23-underneath-the-banana-tree-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/july-23-underneath-the-banana-tree-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/cal/july-23-underneath-the-banana-tree-cal-2880x1800.jpg">2880x1800</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/underneath-the-banana-tree/nocal/july-23-underneath-the-banana-tree-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>

Book Imagination
<p>“Everyone’s imagination when reading books is different. One person thinks of a village and another of a city. That’s the beauty of reading.” — Designed by <a href="https://www.behance.net/gallery/173420923/portfolio">Britt van Falier</a> from the Netherlands.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/july-23-book-imagination-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-23-book-imagination-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/july-23-book-imagination-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/cal/july-23-book-imagination-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-23/book-imagination/nocal/july-23-book-imagination-nocal-2560x1440.png">2560x1440</a></li>
</ul>



Oldies But Goodies

<p>Our wallpapers archives are full of timeless treasures that are just too good to be forgotten. So here’s a small selection of <strong>favorites from past July editions</strong>. Please note that these designs don’t come with a calendar.</p>

<p></p><h3>Melting July</h3><p></p>
<p></p><p>“Welcome to the sweltering July — the month when it’s so hot that even the fruits are edgy. Our ice-creamy, vibrantly-colored monthly calendar is melting as the temperature rises, so make sure to download it as quickly as possible!” — Designed by <a href="https://www.popwebdesign.net/portfolio-popart-studio-eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-melting-july-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-melting-july-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-melting-july-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/melting-july/nocal/july-22-melting-july-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Hotdog</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-hotdog-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-hotdog-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-hotdog-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/hotdog/nocal/july-22-hotdog-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Meeting Mary Poppins</h3><p></p>
<p></p><p>“This month, we travel to London with Mary Poppins to discover the city. We will have great adventures!” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-meeting-mary-poppins-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-meeting-mary-poppins-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-22-meeting-mary-poppins-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/july-22/meeting-mary-poppins/nocal/july-22-meeting-mary-poppins-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Birdie July</h3><p></p>
<p></p><p>Designed by <a href="https://pathlove.com/">Lívi Lénárt</a> from Hungary.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5448a8b6-1627-4a28-bf82-e76d385f88dd/july-20-birdie-july-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c52c6aad-ac2c-4fd9-9aa6-528d7bf7bf6e/july-20-birdie-july-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c52c6aad-ac2c-4fd9-9aa6-528d7bf7bf6e/july-20-birdie-july-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/birdie-july/nocal/july-20-birdie-july-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Summer Season</h3><p></p>
<p></p><p>“I’m an avid runner, and I have some beautiful natural views surrounding my city. The Smoky Mountains are a bit further east, so I took some liberties, but Tennessee’s nature is nothing short of beautiful and inspiring.” — Designed by <a href="https://www.imcamelliott.com">Cam Elliott</a> from Memphis, TN.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/025783b8-527f-4015-b168-e542ab336b56/july-21-summer-season-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc88996c-3bb0-4cb1-81d0-398fdff17913/july-21-summer-season-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc88996c-3bb0-4cb1-81d0-398fdff17913/july-21-summer-season-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/summer-season/nocal/july-21-summer-season-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>The Ancient Device</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ec8b597-e406-4b1e-b0d2-95420b115f6c/july-21-the-ancient-device-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d4f1d08-e3cd-4783-8cde-1386f34ed7c3/july-21-the-ancient-device-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d4f1d08-e3cd-4783-8cde-1386f34ed7c3/july-21-the-ancient-device-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/the-ancient-device/nocal/july-21-the-ancient-device-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Summer Cannonball</h3><p></p>
<p></p><p>“Summer is coming in the northern hemisphere and what better way to enjoy it than with watermelons and cannonballs.” — Designed by <a href="https://www.mariakellerac.com">Maria Keller</a> from Mexico.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1537ec9a-99ad-4cc1-8755-8ac0ee69b83b/july-17-summer-cannonball-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3e8e873-674d-43b2-b5b6-3709ad2f428c/july-17-summer-cannonball-preview-opt.png" /></a><p></p><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3e8e873-674d-43b2-b5b6-3709ad2f428c/july-17-summer-cannonball-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-640x1136.png">640x1136</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-750x1334.png">750x1334</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1242x2208.png">1242x2208</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/summer-cannonball/nocal/july-17-summer-cannonball-nocal-2880x1800.png">2880x1800</a></li>
</ul>

<p></p><h3>Eternal Summer</h3><p></p>
<p></p><p>“And once you let your imagination go, you find yourself surrounded by eternal summer, unexplored worlds, and all-pervading warmth, where there are no rules of physics and colors tint the sky under your feet.” — Designed by <a href="https://www.creitive.com/">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44fce15a-b5f0-4933-b73b-66411fb6b698/july-17-eternal-summer-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd17eedd-d2e1-43d9-806a-1a853d0415fb/july-17-eternal-summer-preview-opt.png" /></a><p></p><ul><p></p>
<p><li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd17eedd-d2e1-43d9-806a-1a853d0415fb/july-17-eternal-summer-preview-opt.png">preview</a></li></p>
<p><li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/eternal-summer/nocal/july-17-eternal-summer-nocal-2560x1440.png">2560x1440</a></li>
</p></ul><p></p>
<p></p><h3>A Flamboyance Of Flamingos</h3><p></p>
<p></p><p>“July in South Africa is dreary and wintery so we give all the southern hemisphere dwellers a bit of color for those gray days. And for the northern hemisphere dwellers a bit of pop for their summer!” — Designed by <a href="https://www.wonderlandcollective.co.za/">Wonderland Collective</a> from South Africa.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2bbc33fd-46b8-437c-ac69-ecbf96320b61/july-15-a-flamboyance-of-flamingos-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa099a9d-0d72-4083-ac98-3e84d03dc825/july-15-a-flamboyance-of-flamingos-preview-opt.png" /></a><p></p><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa099a9d-0d72-4083-ac98-3e84d03dc825/july-15-a-flamboyance-of-flamingos-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/a-flamboyance-of-flamingos/nocal/july-15-a-flamboyance-of-flamingos-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Riding In The Drizzle</h3><p></p>
<p></p><p>“Rain has come, showering the existence with new seeds of life. Everywhere life is blooming, as if they were asleep and the falling music of raindrops have awakened them. Feel the drops of rain. Feel this beautiful mystery of life. Listen to its music, melt into it.” — Designed by <a href="https://aufait.in/document-management-system">DMS Software</a> from India.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5acea4a6-5483-4425-8eeb-c7f5f0a3b295/july-19-riding-in-the-drizzle-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0828d9a5-d788-4e99-b930-5bbad01b45e2/july-19-riding-in-the-drizzle-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0828d9a5-d788-4e99-b930-5bbad01b45e2/july-19-riding-in-the-drizzle-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/riding-in-the-drizzle/nocal/july-19-riding-in-the-drizzle-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Less Busy Work, More Fun!</h3><p></p>
<p></p><p>Designed by <a href="https://activecollab.com/">ActiveCollab</a> from the United States.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-21-less-busy-work-more-fun-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-21-less-busy-work-more-fun-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-21-less-busy-work-more-fun-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1080x1920.png">1080x1920</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-21/less-busy-work-more-fun/nocal/july-21-less-busy-work-more-fun-nocal-3840x2160.png">3840x2160</a></li>
</ul>



<p></p><h3>Taste Like Summer</h3><p></p>
<p></p><p>“In times of clean eating and the world of superfoods there is one vegetable missing. An old, forgotten one. A flower actually. Rare and special. Once it had a royal reputation (I cheated a bit with the blue). The artichocke — this is my superhero in the garden! I am a food lover — you too? Enjoy it — dip it!” — Designed by <a href="https://www.netzbewegung.com/de/start/">Alexandra Tamgnoué</a> from Germany.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/28df075e-42b1-4990-a5d3-cf7e8b9b9b41/july-17-taste-like-summer-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3de3571f-466c-4772-a945-4e22af244f29/july-17-taste-like-summer-preview.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3de3571f-466c-4772-a945-4e22af244f29/july-17-taste-like-summer-preview.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1440x1050.png">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/taste-like-summer/nocal/july-17-taste-like-summer-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Day Turns To Night</h3><p></p>
<p></p><p>Designed by <a href="https://www.behance.net/xenialatii">Xenia Latii</a> from Germany.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2996c7ca-1d17-421e-b9e8-fb327c486367/july-16-day-turns-to-night-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8502bdc-b5a7-44e3-85a1-13c5ee8987a0/july-16-day-turns-to-night-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8502bdc-b5a7-44e3-85a1-13c5ee8987a0/july-16-day-turns-to-night-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/day-turns-to-night/nocal/july-16-day-turns-to-night-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Heated Mountains</h3><p></p>
<p></p><p>“Warm summer weather inspired the color palette.” — Designed by Marijana Pivac from Croatia.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-18-heated-mountains-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-18-heated-mountains-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-18-heated-mountains-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-18/heated-mountains/nocal/july-18-heated-mountains-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Tropical Lilies</h3><p></p>
<p></p><p>“I enjoy creating tropical designs. They fuel my wanderlust and passion for the exotic, instantaneously transporting me to a tropical destination.” — Designed by <a href="https://www.fox-and-eagle.com/">Tamsin Raslan</a> from the United States.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eedd035d-7844-4e18-826f-4f48965c4d37/july-16-tropical-lilies-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18e34889-f79b-4fec-8d5f-e4b951e98daf/july-16-tropical-lilies-preview-opt.png" /></a><p></p><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18e34889-f79b-4fec-8d5f-e4b951e98daf/july-16-tropical-lilies-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1440x1050.png">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/tropical-lilies/nocal/july-16-tropical-lilies-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Sweet Summer</h3><p></p>
<p></p><p>“In summer everything inspires me.” — Designed by <a href="https://www.upwork.com/freelancers/~0120e9966be1097d99">Maria Karapaunova</a> from Bulgaria.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-17-sweet-summer-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-17-sweet-summer-preview-opt.png" /></a><p></p>
<ul><li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-17-sweet-summer-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1440x1050.png">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/sweet-summer/nocal/july-17-sweet-summer-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Summermoon</h3><p></p>
<p></p><p>Designed by <a href="https://www.neumann-mediengestaltung.de">Erik Neumann</a> from Germany.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f36886bb-9104-41fc-9424-946f46e96bbd/july-16-summermoon-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3412699-b035-4cb1-8230-7468b4eaf954/july-16-summermoon-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3412699-b035-4cb1-8230-7468b4eaf954/july-16-summermoon-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/summermoon/nocal/july-16-summermoon-nocal-2560x1600.png">2560x1600</a></li>
</ul>

<p></p><h3>Fire Camp</h3><p></p>
<p></p><p>“What’s better than a starry summer night with an (unexpected) friend around a fire camp with some marshmallows? Happy July!” — Designed by <a href="https://etiennemansard.com/">Etienne Mansard</a> from the UK.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a193982-ecfe-4701-9809-ae4962f3cbea/july-17-fire-camp-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6bf0b33e-80dc-42ef-8a79-273dd775e9b8/july-17-fire-camp-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6bf0b33e-80dc-42ef-8a79-273dd775e9b8/july-17-fire-camp-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1440x1050.jpg">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-2048x1536.jpg">2048x1536</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-17/fire-camp/nocal/july-17-fire-camp-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Island River</h3><p></p>
<p></p><p>“Make sure you have a refreshing source of ideas, plans and hopes this July. Especially if you are to escape from urban life for a while.” — Designed by <a href="https://izhik.com">Igor Izhik</a> from Canada.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e25b7ef-1294-4f55-933a-d8e14e92affc/july-16-island-river-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c639eef9-6a52-47e8-8996-ba56f1167742/july-16-island-river-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c639eef9-6a52-47e8-8996-ba56f1167742/july-16-island-river-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/island-river/nocal/july-16-island-river-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Captain Amphicar</h3><p></p>
<p></p><p>“My son and I are obsessed with the Amphicar right now, so why not have a little fun with it?” — Designed by <a href="https://www.3bicycles.com/">3 Bicycles Creative</a> from the United States.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2915201-289a-4723-ae4a-5d014105c0db/july-16-captain-amphicar-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/295f6033-ce57-4e72-b3e0-9de5cae96cd9/july-16-captain-amphicar-preview.png" /></a><p></p><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/295f6033-ce57-4e72-b3e0-9de5cae96cd9/july-16-captain-amphicar-preview.png">preview</a></li><li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-16/captain-amphicar/nocal/july-16-captain-amphicar-nocal-2560x1440.png">2560x1440</a></li></ul>



<p></p><h3>It’s Getting Hot</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-20-its-getting-hot-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-20-its-getting-hot-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-20-its-getting-hot-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-20/its-getting-hot/nocal/july-20-its-getting-hot-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Alentejo Plain</h3><p></p>
<p></p><p>“Based in the Alentejo region, in the south of Portugal, where there are large plains used for growing wheat. It thus represents the extensions of the fields of cultivation and their simplicity. Contrast of the plain with the few trees in the fields. Storks that at this time of year predominate in this region, being part of the Alentejo landscape and mentioned in the singing of Alentejo.” — Designed by <a href="https://www.linkedin.com/in/josé-guerra-00b029151/">José Guerra</a> from Portugal.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d178fd83-c537-475b-9c68-404d74ab5852/july-19-alentejo-plain-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f669f954-8856-4148-b95d-79c96fc0b789/july-19-alentejo-plain-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f669f954-8856-4148-b95d-79c96fc0b789/july-19-alentejo-plain-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-19/alentejo-plain/nocal/july-19-alentejo-plain-nocal-1125x2436.png">1125x2436</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/alentejo-plain/nocal/july-19-alentejo-plain-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/alentejo-plain/nocal/july-19-alentejo-plain-nocal-1536x2048.png">1536x2048</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/alentejo-plain/nocal/july-19-alentejo-plain-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/alentejo-plain/nocal/july-19-alentejo-plain-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/alentejo-plain/nocal/july-19-alentejo-plain-nocal-2880x1800.png">2880x1800</a></li>
</ul>

<p></p><h3>An Intrusion Of Cockroaches</h3><p></p>
<p></p><p>“Ever watched <em>Joe’s Apartment</em> when you were a kid? Well, that movie left a soft spot in my heart for the little critters. Don’t get me wrong: I won’t invite them over for dinner, but I won’t grab my flip flop and bring the wrath upon them when I see one running in the house. So there you have it… three roaches… bringing the smack down on that pesky human… ZZZZZZZAP!!” — Designed by <a href="https://www.wonderlandcollective.co.za/">Wonderland Collective</a> from South Africa.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5782cbe2-5c14-49f7-ba53-bce238c1d430/july-15-an-intrusion-of-cockroaches-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efd43660-6705-4fb6-bcc2-993e764a8a5b/july-15-an-intrusion-of-cockroaches-preview-opt.png" /></a><p></p>
<ul><li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efd43660-6705-4fb6-bcc2-993e764a8a5b/july-15-an-intrusion-of-cockroaches-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-15/an-intrusion-of-cockroaches/nocal/july-15-an-intrusion-of-cockroaches-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Heat Wave</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-19-heat-wave-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-19-heat-wave-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-19-heat-wave-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/heat-wave/nocal/july-19-heat-wave-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>My July</h3><p></p>
<p></p><p>Designed by <a href="https://www.instagram.com/catiaapereira/">Cátia Pereira</a> from Portugal.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7df8820b-62d2-46c0-8a01-9c41a9f5ff3a/july-19-my-july-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffc72537-60d0-4255-b55d-8f7efbfefb1e/july-19-my-july-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffc72537-60d0-4255-b55d-8f7efbfefb1e/july-19-my-july-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-19/my-july/nocal/july-19-my-july-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/my-july/nocal/july-19-my-july-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/my-july/nocal/july-19-my-july-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/my-july/nocal/july-19-my-july-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>July Rocks!</h3><p></p>
<p></p><p>Designed by <a href="https://jm930.webnode.pt/">Joana Moreira</a> from Portugal.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/333a2bf1-6de8-470d-ab86-8ae25ec4869a/july-19-july-rocks-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef573fef-8f0a-4c86-88f9-855de7cfdaa3/july-19-july-rocks-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef573fef-8f0a-4c86-88f9-855de7cfdaa3/july-19-july-rocks-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-19/july-rocks/nocal/july-19-july-rocks-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/july-rocks/nocal/july-19-july-rocks-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/july-rocks/nocal/july-19-july-rocks-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/july-rocks/nocal/july-19-july-rocks-nocal-1920x1080.png">1920x1080</a></li>
</ul>

<p></p><h3>Frogs In The Night</h3><p></p>
<p></p><p>“July is coming and the nights are warmer. Frogs look at the moon while they talk about their day.” — Designed by <a href="https://www.silocreativo.com/en/">Veronica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-19-frogs-in-the-night-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-19-frogs-in-the-night-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-july-2023/july-19-frogs-in-the-night-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/july-19/frogs-in-the-night/nocal/july-19-frogs-in-the-night-nocal-2560x1440.png">2560x1440</a></li>
</ul>

]]></content:encoded>
      <author>hello@smashingmagazine.com (Cosima Mielke)</author>
      <enclosure url="http://files.smashing.media/articles/desktop-wallpaper-calendars-august-2023/july-23-under-the-enchanting-moonlight-preview-opt.png" length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[What’s The Perfect Design Process?]]></title>
      <link>https://smashingmagazine.com/2023/06/perfect-design-process/</link>
      <guid>https://smashingmagazine.com/2023/06/perfect-design-process/</guid>
      <pubDate>Thu, 29 Jun 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[The design process is messy. You might be following a structured approach, but too often, it takes a life of its own. And before you know it, you are designing in chaos, with last-minute changes and missed deadlines. So, what’s the “perfect” design process?]]></description>
      <content:encoded><![CDATA[<p><strong>Design process is messy.</strong> You might be following a structured approach, but with all the last-minute changes and overlooked details, too often, it takes a life of its own. And before you know it, you are designing in a chaotic environment full of refinements, final-final deliverables, and missed deadlines.</p>


<p>This article is <strong>part of our ongoing series</strong> on <a href="/category/design-patterns">design patterns</a>. It’s an upcoming part of the video library on <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a> 🍣 and is a part of the <a href="https://smashingconf.com/online-workshops/workshops/interface-design-course-vitaly-friedman/">live UX training</a> as well.</p>

What’s The “Right” Design Process?
<p>Of course, there is no “right-and-only” way to frame a design process. It’s defined by whatever works well for you and for your team. Personally, I tend to rely on <strong>4 design models</strong> that seem to fit well with my design work:</p>
<ul>
<li><a href="https://medium.com/digital-experience-design/how-to-apply-a-design-thinking-hcd-ux-or-any-creative-process-from-scratch-b8786efbf812">Double Diamond Process</a> for its comprehensive and reliable methodology for solving problems. In this guide, Dan Nessler breaks down the entire Double-Diamond process into single parts, explaining how exactly it works, step-by-step, in all fine details.</li>
</ul>
<p><img src="https://files.smashing.media/articles/perfect-design-process/01-double-diamond-process.png" /></p>
<ul>
<li><a href="https://uxdesign.cc/why-the-double-diamond-isnt-enough-adaa48a8aec1">Triple Diamond Process</a> for its more realistic approach to the designer’s input across the product’s life cycle. That’s a piece by <a href="https://www.linkedin.com/in/ACoAABoRt6sBLfH-Jr9p1e5aBm_DKhkGCascETw">Adam Gray</a> on why bringing flexibility to the messy reality of the design process is critical to improving planning and involving design work as prototypes are being built.</li>
</ul>
<p><img src="https://files.smashing.media/articles/perfect-design-process/02-triple-diamond-process.png" /></p>
<ul>
<li><a href="https://www.ibm.com/design/thinking/page/framework">Enterprise Design Thinking Model by IBM</a> for its focus on design maturity and scale, which really helps large organizations. A useful model that helps argue for user research, user-centricity, and rapid low-fidelity prototyping — and how to transfer ownership to design teams at scale.</li>
</ul>
<p><img src="https://files.smashing.media/articles/perfect-design-process/03-IBM-design-thinking-process.png" /></p>
<ul>
<li><a href="https://danmall.com/posts/hot-potato-process/">Hot Potato process</a>, for its simplicity in bridging design and development across the <strong>entire product lifecycle</strong>. Designers and developers throw ideas, mock-ups, and prototypes to each other permanently. Sometimes there are more involved design phases than dev phases, but <a href="https://smart-interface-design-patterns.com/articles/design-handoff/">there is no hand-off</a>, and the entire process is driven by <strong>continuous collaboration</strong>.</li>
</ul>
<p><img src="https://files.smashing.media/articles/perfect-design-process/04-hot-potato-process.png" /></p>
<p>These ways of thinking about the design process translated into a process that works well for me but has to be adjusted for every project that I’m working on. In a nutshell, here’s how it would work.</p>
A Process That Works For Me
<p>There is no such thing as enough user research. In every project, I start with <strong>involving users as early as possible</strong>. I explore all the data we have, interview customer support and the service desk, check for technical debt and design issues, backlog items, and dismissed ideas. I explore organizational charts to understand layers of management. I set the right expectations and seek allies.</p>
<p>From there, I would typically spend weeks or even months in diagrams and spreadsheets and endless docs before drawing a single pixel on the screen. I try to get developers on board, so they can start setting up the dev environment already.</p>
<p>I bring in stakeholders and people who have a vested interest in <strong>contributing to the success of the project</strong>. Voices that need to be heard but are often forgotten. I see my role as a person who needs to bridge the gap between business requirements and user needs through the lens of design.</p>
<p><strong>Then I take a blank piece of paper and start sketching</strong>. I sketch ideas. I sketch customer journey maps. I sketch content boxes. I write down components that we will surely need in the product — the usual suspects. I set up a workshop with designers and developers to decide on names. Then developers can go ahead and prototype while designers focus on UI and interaction design.</p>
<p>To make sure I get both sides of the equation right, I draft customer journey maps, brainstorm ideas and <a href="https://roadmunk.com/product-prioritization-ebook/">prioritize them</a> with the <a href="https://foldingburritos.com/blog/kano-model/#end-form">Kano model</a> and <a href="https://miro.com/templates/impact-effort-matrix/">Impact ÷ Effort matrix</a> (with developers, PMs, and stakeholders).</p>
<p><img src="https://files.smashing.media/articles/perfect-design-process/05-design-KPI-tree.png" /></p>
<p>I don’t want to waste time designing and building the wrong thing, so I establish <a href="https://www.linkedin.com/pulse/design-kpis-ux-metrics-vitaly-friedman/">design KPIs</a> and connect them with business goals using <a href="https://whimsical.com/kpi-tree-2heCEgnYprowt9gUwMKfZ1">KPI trees</a>. I get a sign-off on those, and then the interface design starts.</p>
<p>I develop hypotheses. Low-fidelity mock-ups. Speak to developers. Get their feedback. Refine. Throw the mock-ups to developers. Bring them into HTML and CSS. Test hypotheses in usability sessions until we get to an 80% success rate for top tasks. Designers keep refining, and developers keep building out.</p>
<p><strong>Establish a process to continuously measure the quality of design</strong>. Track task completion rates. Track task completion times. Track error rates. Track error recovery rates. Track accessibility. Track sustainability. Track performance. In a B2B setting, we track the time customers need to complete their tasks and try to minimize it.</p>
<p><strong>Make them visible to the entire organization</strong> to show the value of design and its impact on business KPIs. Explain that the process isn’t based on hunches. It’s an evidence-driven design.</p>
<p><strong>Establish ownership and governance</strong>. The search team must be measured by the quality of search results for the top 100 search queries over the last two months. People who publish content are owners of that content. It’s their responsibility to keep it up-to-date, rewrite, archive, or delete it.</p>
<p>Refine, refine, refine. Keep throwing new components and user journeys to developers. Stop. Test with users to check how we are doing. Keep going and refine in the browser. Continuously and rigorously test. Launch and keep refining. <strong>Measure the KPIs</strong> and report to the next iteration of the design.</p>
<p>Admittedly, it is a bit messy. But it helps me stay on track when <strong>navigating a complex problem space</strong> in a way that delivers measurable results, removes bias and subjectivity from design decisions, and helps deliver user-centric designs that also address business needs.</p>
Wrapping Up
<p>Of course, there is no “right-and-only” way to frame a design process. It’s defined by whatever works well for you and for your team. Explore options and keep them in mind when designing your design process. Whatever you choose, don’t follow it rigidly just for the sake of it, and combine bits from all models to make it right for you.</p>
<p>As long as it works well for you, it’s right. And that’s the only thing that matters.</p>
<p>You can find more details on <strong>design patterns</strong> in the <a href="https://smart-interface-design-patterns.com">video library on Smart Interface Design Patterns 🍣</a> — with a <a href="https://smart-interface-design-patterns.com">live UX training</a> that’s coming up in September this year.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/04/content-fundamental-part-web-design-process/">Why Content Is Such A Fundamental Part Of The Web Design Process</a>,” Matt Saunders</li>
<li>“<a href="https://www.smashingmagazine.com/2020/02/seo-web-design-process/">Where Does SEO Belong In Your Web Design Process?</a>,” Suzanne Scacca</li>
<li>“<a href="https://www.smashingmagazine.com/2023/05/impact-agile-methodologies-code-quality/">The Impact Of Agile Methodologies On Code Quality</a>,” Sarah Oke Okolo</li>
<li>“<a href="https://www.smashingmagazine.com/2023/03/pragmatists-guide-lean-user-research/">A Pragmatist’s Guide To Lean User Research</a>,” Paul Boag</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure url="http://files.smashing.media/articles/perfect-design-process/perfect-design-process.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Useful DevTools Tips and Tricks]]></title>
      <link>https://smashingmagazine.com/2023/06/popular-devtools-tips/</link>
      <guid>https://smashingmagazine.com/2023/06/popular-devtools-tips/</guid>
      <pubDate>Tue, 27 Jun 2023 12:00:00 GMT</pubDate>
      <description><![CDATA[Let’s discover the most popular DevTools tips that can boost your productivity and revolutionize your debugging workflow.]]></description>
      <content:encoded><![CDATA[<p>When it comes to browser DevTools, we all have our own preferences and personal workflows, and we pride ourselves in knowing that “one little trick” that makes our debugging lives easier.</p>
<p>But also — and I know this from having worked on DevTools at Mozilla and Microsoft for the past ten years — most people tend to use the same three or four DevTools features, leaving the rest unused. This is unfortunate as there are dozens of panels and hundreds of features available in DevTools across all browsers, and even the less popular ones can be quite useful when you need them.</p>
<p>As it turns out, I’ve maintained the <a href="https://devtoolstips.org/">DevTools Tips website</a> for the past two years now. More and more tips get added over time, and traffic keeps growing. I recently started tracking the most popular tips that people are accessing on the site, and I thought it would be interesting to share some of this data with you!</p>
<p>So, here are the top 15 most popular DevTools tips from the website.</p>
<p>If there are other tips that you love and that make you more productive, consider sharing them with our community in the comments section!</p>
<p>Let’s count down, starting with…</p>
15: Zoom DevTools
<p>If you’re like me, you may find the text and buttons in DevTools too small to use comfortably. I know I’m not alone here, judging by the number of people who ask our team how to make them bigger!</p>
<p>Well, it turns out you can actually zoom into the DevTools UI.</p>
<p>DevTools’ user interface is built with HTML, CSS, and JavaScript, which means that it’s rendered as web content by the browser. And just like any other web content in browsers, it can be zoomed in or out by using the Ctrl+ and Ctrl- keyboard shortcuts (or Cmd+ and Cmd- on macOS).</p>
<p>So, if you find the text in DevTools too small to read, click anywhere in DevTools to make sure the focus is there, and then press Ctrl+ (or Cmd+ on macOS).</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/1-devtools-list-fonts.png" /></p>
<p>Chromium-based browsers such as Chrome, Edge, Brave, or Opera can also display the font used by an element that contains the text:</p>
<ul>
<li>Select an element that only contains text children.</li>
<li>Open the <strong>Computed</strong> tab in the sidebar of the <strong>Elements</strong> tool.</li>
<li>Scroll down to the bottom of the tab.</li>
<li>The rendered fonts are displayed.</li>
</ul>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/list-used-fonts/">List the fonts used on a page or an element</a>.”</em></p>
12: Measure Arbitrary Distances On A Page
<p>Sometimes it can be useful to quickly measure the size of an area on a webpage or the distance between two things. You can, of course, use DevTools to get the size of any given element. But sometimes, you need to measure an arbitrary distance that may not match any element on the page.</p>
<p>When this happens, one nice way is to use Firefox’s measurement tool:</p>
<ol>
<li>If you haven’t done so already, enable the tool. This only needs to be done once: Open DevTools, go into the <strong>Settings</strong> panel by pressing F1 and, in the <strong>Available Toolbox Buttons</strong>, check the <strong>Measure a portion of the page</strong> option.</li>
<li>Now, on any page, click the new <strong>Measure a portion of the page</strong> icon in the toolbar.</li>
<li>Click and drag with the mouse to measure distances and areas.</li>
</ol>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/2-measure-arbitrary-distances.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/measure-distances/">Measure arbitrary distances in the page</a>.”</em></p>
11: Detect Unused Code
<p>One way to make a webpage appear fast to your users is to make sure it only loads the JavaScript and CSS dependencies it truly needs.</p>
<p>This may seem obvious, but today’s complex web apps often load huge bundles of code, even when only a small portion is needed to render the first page.</p>
<p>In Chromium-based browsers, you can use the <strong>Coverage</strong> tool to identify which parts of your code are unused. Here is how:</p>
<ol>
<li>Open the <strong>Coverage</strong> tool. You can use the Command Menu as a shortcut: press Ctrl+Shift+P (or Cmd+Shift+P on macOS), type “coverage” and then press Enter.)</li>
<li>Click <strong>Start instrumenting coverage and refresh the page</strong>.</li>
<li>Wait for the page to reload and for the coverage report to appear.</li>
<li>Click any of the reported files to open them in the <strong>Sources</strong> tool.</li>
</ol>
<p>The file appears in the tool along with blue and red bars that indicate whether a line of code is used or unused, respectively.</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/3-coverage-tool-unused-code.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/detect-unused-code/">Detect unused CSS and JavaScript code</a>.”</em></p>
10: Change The Playback Rate Of A Video
<p>Usually, when a video appears on a webpage, the video player that displays it also provides buttons to control its playback, including a way to speed it up or slow it down. But that’s not always the case.</p>
<p>In cases when the webpage makes it difficult or impossible to control a video, you can use DevTools to control it via JavaScript istead.</p>
<ol>
<li>Open DevTools.</li>
<li>Select the <code>&lt;video&gt;</code> element in the <strong>Elements</strong> tool (called <strong>Inspector</strong> in Firefox).</li>
<li>Open the <strong>Console</strong> tool.</li>
<li>Type the following: <code>$0.playbackRate = 2;</code> and press Enter.</li>
</ol>
<p>The <a href="https://devtoolstips.org/tips/en/get-recently-selected-dom-nodes-in-console/"><code>$0</code> expression</a> is a shortcut that refers to whatever element is currently selected in DevTools; in this case, it refers to the <code>&lt;video&gt;</code> HTML element.</p>
<p>By using the <code>playbackRate</code> property of the <code>&lt;video&gt;</code> element, you can speed up or slow down the video. Note that you could also use any of the other <code>&lt;video&gt;</code> element properties or methods, such as:</p>
<ul>
<li><code>$0.pause()</code> to pause the video;</li>
<li><code>$0.play()</code> to resume playing the video;</li>
<li><code>$0.loop = true</code> to repeat the video in a loop.</li>
</ul>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/4-playback-rate-video.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/change-video-playback-rate/">Speed up or slow down a video</a>.”</em></p>
9: Use DevTools In Another Language
<p>If, like me, English isn’t your primary language, using DevTools in English might make things harder for you.</p>
<p>If that’s your case, know that you can actually use a translated version of DevTools that either matches your operating system, your browser, or a language of your choice.</p>
<p>The procedure differs per browser.</p>
<p>In Safari, both the browser and Web Inspector (which is what DevTools is called in Safari) inherit the language of the operating system. So if you want to use a different language for DevTools, you’ll need to set it globally by going into <strong>System preferences</strong> → <strong>Language &amp; Region</strong> → <strong>Apps</strong>.</p>
<p>In Firefox, DevTools always matches the language of the browser. So, if you want to use DevTools in, say, French, then download Firefox in French.</p>
<p>Finally, in Chrome or Edge, you can choose to either match the language of the browser or set a different language just for DevTools. </p>
<p>To make your choice:</p>
<ol>
<li>Open DevTools and press F1 to open the <strong>Settings</strong>.</li>
<li>In the <strong>Language</strong> drop-down, choose either <strong>Browser UI language</strong> to match the browser language or choose another language from the list.</li>
</ol>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/5-devtools-different-languages.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/use-another-language/">Use DevTools in another language</a>.”</em></p>
8: Disable Event Listeners
<p>Event listeners can sometimes get in the way of debugging a webpage. If you’re investigating a particular issue, but every time you move your mouse or use the keyboard, unrelated event listeners are triggered, this could make it harder to focus on your task.</p>
<p>A simple way to disable an event listener is by selecting the element it applies to in the <strong>Elements</strong> tool (or <strong>Inspector</strong> in Firefox). Once you’ve found and selected the element, do either of the following:</p>
<ul>
<li>In Firefox, click the <strong>event</strong> badge next to the element, and in the popup that appears, uncheck the listeners you want to disable.</li>
<li>In Chrome or Edge, click the <strong>Event Listeners</strong> tab in the sidebar panel, find the listener you want to remove, and click <strong>Remove</strong>.</li>
</ul>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/6-devtools-disable-event-listeners.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/disable-event-listeners/">Remove or disable event listeners</a>.”</em></p>
7: View Console Logs On Non-Safari Browsers On iOS
<p>As you might know, Safari isn’t the only browser you can install and use on an iOS device. Firefox, Chrome, Edge, and others can also be used. Technically, they all run on the same underlying browser rendering engine, WebKit, so a website should more or less look the same in all of these browsers in iOS.</p>
<p>However, it’s possible to have bugs on other browsers that don’t replicate in Safari. This can be quite tricky to investigate. While it’s possible to debug Safari on an iOS device by attaching the device to a Mac with a USB cable, it’s impossible to debug non-Safari browsers.</p>
<p>Thankfully, there is a way to at least see your console logs in Chrome and Edge (and possibly other Chromium-based browsers) when using iOS:</p>
<ol>
<li>Open Chrome or Edge on your iOS device and go to the special <strong><code>about:inspect</code></strong> page.</li>
<li>Click <strong>Start Logging</strong>.</li>
<li>Keep this tab open and then open another one.</li>
<li>In the new tab, go to the page you’re trying to debug.</li>
<li>Return to the previous tab. Your console logs should now be displayed.</li>
</ol>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/7-console-logs-non-safari-browsers.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/view-logs-for-other-browsers-on-ios/">View console logs from non-Safari browsers on an iPhone</a>.”</em></p>
6: Copy Element Styles
<p>Sometimes it’s useful to extract a single element from a webpage, maybe to test it in isolation. To do this, you’ll first need to extract the element’s HTML code via the <strong>Elements</strong> tool by right-clicking the element and choosing <strong>Copy</strong> → <strong>Copy outer HTML</strong>.</p>
<p>Extracting the element’s styles, however, is a bit more difficult as it involves going over all of the CSS rules that apply to the element.</p>
<p>Chrome, Edge, and other Chromium-based browsers make this step a lot faster:</p>
<ol>
<li>In the <strong>Elements</strong> tool, select the element you want to copy styles from.</li>
<li>Right-click the selected element.</li>
<li>Click <strong>Copy</strong> → <strong>Copy styles</strong>.</li>
<li>Paste the result in your text editor.</li>
</ol>
<p>You now have all the styles that apply to this element, including inherited styles and custom properties, in a single list.</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/8-devtools-copy-element-styles.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/copy-element-styles/">Copy an element’s styles</a>.”</em></p>
5: Download All Images On The Page
<p>This nice tip isn’t specific to any browser and can be run anywhere as long as you can execute JavaScript. If you want to download all of the images that are on a webpage, open the <strong>Console</strong> tool, paste the following code, and press Enter:</p>
<pre><code>$$('img').forEach(async (img) =&gt; {
 try {
   const src = img.src;
   // Fetch the image as a blob.
   const fetchResponse = await fetch(src);
   const blob = await fetchResponse.blob();
   const mimeType = blob.type;
   // Figure out a name for it from the src and the mime-type.
   const start = src.lastIndexOf('/') + 1;
   const end = src.indexOf('.', start);
   let name = src.substring(start, end === -1 ? undefined : end);
   name = name.replace(/[^a-zA-Z0-9]+/g, '-');
   name += '.' + mimeType.substring(mimeType.lastIndexOf('/') + 1);
   // Download the blob using a &lt;a&gt; element.
   const a = document.createElement('a');
   a.setAttribute('href', URL.createObjectURL(blob));
   a.setAttribute('download', name);
   a.click();
 } catch (e) {}
});
</code></pre>

<p><img src="https://files.smashing.media/articles/popular-devtools-tips/9-devtools-download-images.png" /></p>
<p>Note that this might not always succeed: the CSP policies in place on the web page may cause some of the images to fail to download.</p>
<p>If you happen to use this technique often, you might want to turn this into a <a href="https://devtoolstips.org/tips/en/use-scripts-as-snippets/">reusable snippet</a> of code by pasting it into the <strong>Snippets</strong> panel, which can be found in the left sidebar of the <strong>Sources</strong> tool in Chromium-based browsers.</p>
<p>In Firefox, you can also press Ctrl+I on any webpage to open <strong>Page Info</strong>, then go to <strong>Media</strong> and select <strong>Save As</strong> to download all the images.</p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/download-all-images/">Download all images from the page</a>.”</em></p>
4: Visualize A Page In 3D
<p>The HTML and CSS code we write to create webpages gets parsed, interpreted, and transformed by the browser, which turns it into various tree-like data structures like the DOM, compositing layers, or the stacking context tree.</p>
<p>While these data structures are mostly internal in-memory representations of a running webpage, it can sometimes be helpful to explore them and make sure things work as intended.</p>
<p>A three-dimensional representation of these structures can help see things in a way that other representations can’t. Plus, let’s admit it, it’s cool!</p>
<p>Edge is the only browser that provides a tool dedicated to visualizing webpages in 3D in a variety of ways.</p>
<ol>
<li>The easiest way to open it is by using the <strong>Command Menu</strong>. Press Ctrl+Shift+P (or Cmd+Shift+P on macOS), type “3D” and then press Enter.</li>
<li>In the <strong>3D View</strong> tool, choose between the three different modes: <strong>Z-Index</strong>, <strong>DOM</strong>, and <strong>Composited Layers</strong>.</li>
<li>Use your mouse cursor to pan, rotate, or zoom the 3D scene.</li>
</ol>
<p>The <strong>Z-Index</strong> mode can be helpful to know which elements are stacking contexts and which are positioned on the z-axis.</p>
<p>The <strong>DOM</strong> mode can be used to easily see how deep your DOM tree is or find elements that are <a href="https://devtoolstips.org/tips/en/spot-out-of-viewport-elements/">outside of the viewport</a>.</p>
<p>The <strong>Composited Layers</strong> mode shows all the different layers the browser rendering engine creates to paint the page as quickly as possible.</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/10-devtools-visualize-page-3D.png" /></p>
<p>Consider that Safari and Chrome also have a <strong>Layers</strong> tool that shows composited layers.</p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/see-the-page-in-3d/">See the page in 3D</a>.”</em></p>
3: Disable Abusive Debugger Statements
<p>Some websites aren’t very nice to us web developers. While they seem normal at first, as soon as you open DevTools, they immediately get stuck and pause at a JavaScript breakpoint, making it very hard to inspect the page!</p>
<p>These websites achieve this by adding a <code>debugger</code> statement in their code. This statement has no effect as long as DevTools is closed, but as soon as you open it, DevTools pauses the website’s main thread.</p>
<p>If you ever find yourself in this situation, here is a way to get around it:</p>
<ol>
<li>Open the <strong>Sources</strong> tool (called <strong>Debugger</strong> in Firefox).</li>
<li>Find the line where the debugger statement is. That shouldn’t be hard since the debugger is currently paused there, so it should be visible right away.</li>
<li>Right-click on the line number next to this line.</li>
<li>In the context menu, choose <strong>Never pause here</strong>.</li>
<li>Refresh the page.</li>
</ol>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/11-disable-abusive-debugger-statements.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/disable-abusive-debugger-statement/">Disable abusive debugger statements that prevent inspecting websites</a>.”</em></p>
2: Edit And Resend Network Requests
<p>When working on your server-side logic or API, it may be useful to send a request over and over again without having to reload the entire client-side webpage and interact with it each time. Sometimes you just need to tweak a couple of request parameters to test something.</p>
<p>One of the easiest ways to do this is by using Edge’s <strong>Network Console</strong> tool or Firefox’s <strong>Edit and Resend</strong> feature of the <strong>Network</strong> tool. Both of them allow you to start from an existing request, modify it, and resend it.</p>
<p>In Firefox:</p>
<ul>
<li>Open the <strong>Network</strong> tool.</li>
<li>Right-click the network request you want to edit and then click <strong>Edit and Resend</strong>.</li>
<li>A new sidebar panel opens up, which lets you change things like the URL, the method, the request parameters, and even the body.</li>
<li>Change anything you need and click <strong>Send</strong>.</li>
</ul>
<p>In Edge:</p>
<ul>
<li>First, enable the <strong>Network Console</strong> tool by going into the <strong>Settings</strong> panel (press F1) → <strong>Experiments</strong> → <strong>Enable Network Console</strong>.</li>
<li>Then, in the <strong>Network</strong> tool, find the request you want to edit, right-click it and then click <strong>Edit and Resend</strong>.</li>
<li>The <strong>Network Console</strong> tool appears, which lets you change the request just like in Firefox.</li>
<li>Make the changes you need, and then click <strong>Send</strong>.</li>
</ul>
<p>Here is what the feature looks like in Firefox:</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/12-edit-resend-network-requests.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/edit-and-resend-network-requests/">Edit and resend faulty network requests to debug them</a>.”</em></p>
<p>If you need to resend a request without editing it first, you can do so too. (See: <a href="https://devtoolstips.org/tips/en/replay-xhr/">Replay a XHR request</a>)</p>
<p>And the honor of being the Number One most popular DevTools tip in this roundup goes to… 🥁</p>
1: Simulate Devices
<p>This is, by far, the most widely viewed DevTools tip on my website. I’m not sure why exactly, but I have theories:</p>
<ul>
<li>Cross-browser and cross-device testing remain, to this day, one of the most important pain points that web developers face, and it’s nice to be able to simulate other devices from the comfort of your development browser.</li>
<li>People might be using it to achieve non-dev tasks. For example, people use it to post photos on Instagram from their laptops or desktop computers!</li>
</ul>
<p>It’s important to realize, though, that DevTools can’t simulate what your website will look like on another device. Underneath it, it is all still the same browser rendering engine. So, for example, when you simulate an iPhone by using Firefox’s <strong>Responsive Design Mode</strong>, the page still gets rendered by Firefox’s rendering engine, Gecko, rather than Safari’s rendering engine, WebKit.</p>
<p>Always test on actual browsers and actual devices if you don’t want your users to stumble upon bugs you could have caught.</p>
<p>That being said, </p>
<p>Simulating devices in DevTools is very useful for testing how a layout works at different screen sizes and device pixel ratios. You can even use it to simulate touch inputs and other user agent strings.</p>
<p>Here are the easiest ways to simulate devices per browser:</p>
<ul>
<li>In Safari, press Ctrl+Cmd+R, or click <strong>Develop</strong> in the menu bar and then click <strong>Enter Responsive Design Mode</strong>.</li>
<li>In Firefox, press Ctrl+Shift+M (or Cmd+Shift+M), or use the browser menu → <strong>More tools</strong> → <strong>Responsive design mode</strong>.</li>
<li>In Chrome or Edge, open DevTools first, then press Ctrl+Shift+M (or Cmd+Shift+M), or click the <strong>Device Toolbar</strong> icon.</li>
</ul>
<p>Here is how simulating devices looks in Safari:</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/13-simulating-devices-safari.png" /></p>
<p><strong>Note</strong>: <em>To learn more, see “<a href="https://devtoolstips.org/tips/en/simulate-devices/">Simulate different devices and screen sizes</a>.”</em></p>
<p>Finally, if you find yourself simulating screen sizes often, you might be interested in using <a href="https://polypane.app/">Polypane</a>. Polypane is a great development browser that lets you simulate multiple synchronized viewports at the same time, so you can see how your website renders at different sizes at the same time.</p>
<p><img src="https://files.smashing.media/articles/popular-devtools-tips/14-devtools-polypane-browser.png" /></p>
<p>Polypane comes with its own set of unique features, which you can also find on <a href="https://devtoolstips.org/browser/polypane/">DevTools Tips</a>.</p>
Conclusion
<p>I’m hoping you can see now that DevTools is very versatile and can be used to achieve as many tasks as your imagination allows. Whatever your debugging use case is, <a href="https://devtoolstips.org/tips/en/discover-all-tools/">there’s probably a tool</a> that’s right for the job. And if there isn’t, you may be able to find out what you need to know by running JavaScript in the <strong>Console</strong>!</p>
<p>If you’ve discovered cool little tips that come in handy in specific situations, please share them in the comments section, as they may be very useful to others too.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/03/css-auditing-tools/">CSS Auditing Tools</a>,” Iris Lješnjanin</li>
<li>“<a href="https://www.smashingmagazine.com/2021/02/useful-chrome-firefox-devtools-tips-shortcuts/">DevTools Debugging Tips And Shortcuts (Chrome, Firefox, Edge)</a>,” Vitaly Friedman</li>
<li>“<a href="https://www.smashingmagazine.com/2020/08/accessibility-chrome-devtools/">Accessibility In Chrome DevTools</a>,” Umar Hansa</li>
<li>“<a href="https://www.smashingmagazine.com/make-life-easier-when-using-git/">How To Make Life Easier When Using Git</a>,” Shane Hudson</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Patrick Brosset)</author>
      <enclosure url="http://files.smashing.media/articles/popular-devtools-tips/popular-devtools-tips.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Behind The Curtains Of Wikipedia Redesign]]></title>
      <link>https://smashingmagazine.com/2023/06/behind-curtains-wikipedia-redesign/</link>
      <guid>https://smashingmagazine.com/2023/06/behind-curtains-wikipedia-redesign/</guid>
      <pubDate>Mon, 26 Jun 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[The Wikipedia team shipped a redesign of the ubiquitous and one of the [most visited websites](https://en.wikipedia.org/wiki/List_of_most_visited_websites) on the web. Alex Hollender and Jon Robson led the work and generously discussed the effort with us in a thorough, wide-ranging interview that covers the design, development, and processes that went into the project.]]></description>
      <content:encoded><![CDATA[<p>Wikipedia is more than a website — it’s perhaps a cornerstone of the World Wide Web. For decades, the site has provided a model for collaborating online, designing long-form content layouts, and supporting internationalization.</p>
<p>One of the more endearing qualities of Wikipedia is its design, which is known for its utilitarian aesthetics that have stuck around since its 2001 inception. The site has undergone redesigns before, but they are rare and often introduce subtle updates.</p>
<p>This year, 2023, marks the first Wikipedia redesign since 2014. Alex Hollender and Jon Robson led the effort and were kind enough to discuss it with us. The following is an interview that delves into what changed in this latest design, getting into the process as well as design and development details that we all can learn from.</p>
Interview
<p></p><p><img src="https://files.smashing.media/authors/alex-hollender-jon-robson.jpg" />Geoff Graham: When I think of Wikipedia as a website, I think about the design first and foremost. It’s classic for its focus on function over aesthetics, yet often considered a relic along the same lines as Craigslist. How was it decided that “now” is the right time for a redesign?</p>
<p>Alex Hollender: You know, it’s funny, I think people sometimes assume that organizations make these super-calculated, methodical decisions, and maybe some do. What I’ve experienced more often are opportunistic decisions resulting from some combination of intuition and relationships. <a href="https://notnirzar.com">Nirzar Pangakar</a>, the design director back in 2019, knew what the organization was hoping to accomplish in the coming years and understood that media and content on the internet were changing rapidly. He saw that we needed to set ourselves up with a better foundation to iterate on top of going forward. He also imagined how the website looked to newcomers and thought that making it a bit more familiar to them would offer a more inclusive experience. And I think he also sensed that in terms of the culture of the Wikipedia community, if we let any more time pass before making some changes, the conservativism and ossification would grow more and more intense, and projects like this would only become more difficult down the road.</p>
<p><img src="https://files.smashing.media/articles/behind-curtains-wikipedia-redesign/wikipedia-mockup.jpg" /></p>
<p>So it’s not like something was severely broken, or data was pointing us towards a specific problem or opportunity. There were a few concrete things we knew could be improved, but the driving force was Nirzar’s intuition regarding some of these larger things. He had a great relationship with the Chief Product Officer, Toby Negrin, and our team’s Product Manager, Olga Vasileva, and found an opportunity to get the project started. And because it can be somewhat difficult to articulate these sorts of intuitions, Nirzar, Olga, and I made a little design sprint to help others envision and understand the types of changes we could start with and where they might lead us.</p>
<p>Geoff: Wikipedia is more than just a website, right? It’s more like 300 sites where each instance is a different language. How do you approach a design system for a large network of sites like that? Is there a single, centralized source of truth, or is it something looser, depending on the locale?</p>
<p>Alex: Right, so there’s Wikipedia in over 300 languages, then there’s also a bunch of sister projects, including WikiData, Commons, WikiQuote, WikiSource, and others — all of which use the same interface. I’d say the needs are maybe 80-ish percent the same across all of the experiences. Then you’ve got things where specific languages need special functionality, or the WikiData search bar needs something extra, or the WikiSource “article” page has different needs from the Wikipedia one.</p>
<p>There’s, unfortunately, no single source of truth — we don’t even have all of the customizations and variations documented. A big part of being a designer here is just building a catalog in your mind over time. Different people know about different little nooks and crannies and would remind us like, “Hey, if you want to put a button there, you’re going to have to figure out something for project X in language Y because they’ve got a custom feature living in that spot currently.” It’s this very organic, emergent kind of thing where it’s just grown to fit people’s needs in a very unstructured, decentralized way. Super cool but quite difficult when you want to tweak some of the more fundamental/foundational parts of the experience.</p>
<p>Jon Robson: Before I worked on Wikipedia, I’d never worked on multilingual sites. There’s such a fascinating depth to it, for example, how numbering systems differ in different languages, how quotation marks should be considered translated content, how certain projects have content in two scripts, and how some projects add their own cultural flavor to the design. If you look at the <a href="https://nv.wikipedia.org/wiki/%C3%8Diyis%C3%AD%C3%AD_Naaltsoos">Navajo Wikipedia website</a>, they use a Navajo rug pattern which they’ve had since at least 2005.</p>
<p><img src="https://files.smashing.media/articles/behind-curtains-wikipedia-redesign/wikipedia-navajo.png" /></p>
<p>It was fascinating how during this redesign, every release risked disrupting something small, as it was impossible to audit everything that was happening in all those projects. We had to make peace with the fact that we might not be able to retain them all and that things would break, and we’d iterate and find a happy medium. Often it’s unclear who to talk to about these things within the organization. Some projects just notice our changes and adapt, while other communities are more vocal. So we have to work together to reconcile these extremes. I’ve been impressed with how Alex has remained so stoic as a designer despite the curve balls the project has thrown at him.</p>
<p>Geoff: I imagine there’s a fine balance when working on a redesign for a site that’s as ubiquitous and that has as a long legacy as Wikipedia. How important was maintaining a sense of familiarity with the design for users? And how constraining was that for introducing new design elements?</p>
<p>Alex: Ultimately, we were focused on delivering the best reading and editing experience we could, somewhat regardless of familiarity for experienced users. For example, moving the table of contents from being inline below the lead section to being a sidebar, from a familiarity perspective, was a huge shift, and a lot of experienced users couldn’t get past that. For them, it violated the platonic form of a Wikipedia article or something, like if the table of contents wasn’t inline, then the article wasn’t a Wikipedia article. And while they tried to justify that preference from a functionality standpoint, their reasons weren’t strong, and I think it was mostly about them being uncomfortable with the unfamiliar. Meanwhile, all of the testing and the functional justifications we, and some community members, put forth made it super clear that the sidebar was the better approach. So, that’s how we made that particular decision.</p>
<p>Jon: The table of contents going from within the article to outside the article also uncovered a lot of interesting innovations our community had made for certain articles. For example, in some articles, they’d converted the standard table of contents to a horizontal layout using some inline styles or only listed the top-level headings using <code>display: none</code> in CSS to hide the rest. These customizations were broken when we implemented our redesign, which has opened up interesting discussions about whether customizations should be core parts of the software and how they should work in the new design.</p>
<p>Alex: I think the question of familiarity came into play more in terms of the rollout and how much we could change at once. We were sensitive to the risk of upsetting this very small part of the community that has an outsized influence on our decisions. Our fear was they would try to shut the project down, which has happened with other projects, big and small, in the past. So, for example, we didn’t include an increased font size in the first version of the new interface, even though we (and many community members) strongly believed it would be a significant improvement. We know from past projects that typography is a particularly hot-button topic.</p>
<p>Geoff: Who else was involved in the redesign? What roles did they play, and how did you manage all the work?</p>
<p>Alex: As far as our team goes, it’s about 5-6 Engineers, a Product Manager, a Community Specialist, and someone on Quality Assurance. Pretty much everyone was involved in a meaningful way in terms of exploring design challenges and weighing in on various options. Olga, the Product Manager, and several of the Engineers are better than I am when it comes to thinking about certain challenges. One clear example is accessibility.</p>
<p>There were several community members who were close collaborators and hundreds of others who were more casually involved. The majority of that collaboration happens on <a href="https://phabricator.wikimedia.org/project/view/4281/">Phabricator</a>, which is our task-tracking system. Of course, the timing gets tricky because community members might jump in with ideas or concerns as we’re finishing up a feature, maybe just because they weren’t aware that the conversation had started a few months back or whatever.</p>
<p>And then there’s the <a href="https://design.wikimedia.org">Wikimedia Foundation (WMF) design team</a>. Each member of the design team has their own product team they belong to, so involvement, for the most part, happens via design reviews. There was a bunch of overlap, particularly between the work we were doing and the stuff the editing team worked on, so I got to collaborate closely with that designer. Also, each designer is assigned a design mentor. So, Rita, who is my design mentor — and who also happens to be an incredible designer and person — was behind the scenes all along, helping me figure everything out.</p>
<p>To me, the whole process felt pretty inclusive. A lot of the time, it felt like the process and the conversations were guiding things more than any one individual, which is both cool and a little scary.</p>
<p>Geoff: Wikipedia has been used to <a href="https://pielot.org/pubs/Rello2016-Fontsize.pdf">study online text legibility</a> (PDF) because of its heavy focus on content. Yet, there have been so many advances in web fonts and typography since the last significant Wikipedia redesign in 2004, from variable font formats and fluid typography to even newer stuff in CSS from this past year, like the super new <a href="https://developer.chrome.com/blog/css-text-wrap-balance/"><code>text-wrap: balance</code></a> and a <a href="https://css-tricks.com/lh-and-rlh-units/">new line height (<code>lh</code>) unit</a>. What design considerations went into the text in the latest redesign?</p>
<p>Alex: As far as I understand, there was a <a href="https://www.mediawiki.org/wiki/Typography_refresh">typography refresh</a> back in 2014, which succeeded in some ways but was also super contentious. In terms of design ownership, there’s an unwritten understanding that the volunteer community owns the content, and WMF owns the interface. And while the typography is clearly a fundamental part of the overall user experience of the site, it’s definitely on the content side of the content-interface divide, which makes it more difficult for us to work on.</p>
<p>Prior to this project, a lot of great work had already been done by the Design Systems Team regarding the font stack (which is critical, given all of the different language editions of Wikipedia), how the type sizing is declared (which has a big impact on the experience if you manually change the font size), and other things like that.</p>
<p>For this project, from a sort of 80/20 perspective, I think 80% of the room for improvement was managing the line length by adding a <code>max-width</code>, and increasing the base <code>font-size</code> value (which is hopefully coming soon). We did spend a bunch of time looking into other refinements that are forthcoming.</p>
<p>Jon: I actually worked on that typography refresh early in my career at the Wikimedia Foundation. It was contentious for two reasons. First, we added a limited container width for the content and used Helvetica Neue for the font. The latter was a problem due to the “open source” nature of the project, which the community felt strongly about. We compromised by preferring an open font when available, which I think was Linux Libertine at the time.</p>
<p>That project was a lot shorter in terms of time, and we had more important problems to solve, such as having a functioning mobile site and a WYSIWYG editor. So, no compromise could be found on the limited width front. But I was glad we finally got that in with this redesign, even if it came eight years later. Free knowledge is more a marathon than a sprint.</p>
<p>Alex: I do think it’s ironic that Wikipedia, one of the most popular text-based websites on the internet, doesn’t necessarily have a super strong typography practice, at least from a design perspective. Maybe a lot of that has to do with how varied the content is, how many different templates we have, and all of the different languages we need to support. Maybe it would have to almost be a language-by-language endeavor if we were ever to pull it off. I’m not sure.</p>
<p><strong>Editor’s Note:</strong> <em>The <a href="https://phabricator.wikimedia.org/T313828">main discussion</a> and <a href="https://di-typography-update.web.app/Rome">prototype</a> for the project’s typography efforts are available to view.</em></p>
<p>Geoff: Speaking of the differences in web design since 2004, the term <a href="https://alistapart.com/article/responsive-web-design/">“responsive web design” was also coined in that span of time</a>. Wikipedia has no doubt had a mobile presence for some time, but were there any new challenges to make the site more responsive, given how best practices have evolved?</p>
<p>Alex: We set a soft goal of delivering a great experience down to a <code>500px</code> browser width. I think it’s fairly uncommon for people to be using desktop or laptop devices with browsers that narrow. But these days, it’s pretty easy to achieve a fully-responsive site with CSS alone, so there didn’t seem to be much of a tradeoff there. Plus, we heard from a few editors that they often tile two or three browser windows side-by-side, so it can get narrow in those cases. The updated interface does feature three menus that can be pinned open as sidebars or collapsed as dropdowns, which is a configuration mainly for logged-in users in order to give them more control over their workstations. And the state of those menus is managed by JavaScript, which presented a slight challenge. Jon wrote a <a href="https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-does-wikipedia-in-2018-have-a-mobile-site-and-a-desktop-site-bc2982f30fb9">great article</a> a few years ago about why we still have separate mobile and desktop sites.</p>
<p>I think another aspect of making things work well down to <code>500px</code> was that we wanted to push ourselves to see how close we might be able to get to have one site for all devices, though we’re not quite there yet.</p>
<p>Jon: If I remember correctly, Alex and I had a good back-and-forth about that <code>500px</code> threshold. In theory, we could have supported a breakpoint below that, and Alex had the mockups ready, but I was concerned that it would slow down development. Plus, the use case was not there as most of our users were resizing browsers, and we could back that up with data.</p>
<p>In fact, during the redesign, vocal members of our community pushed us to introduce an explicit viewport size in our markup because they were annoyed that the table of contents component was collapsing inconsistently in browsers. If you view the source, you’ll now see <code>&lt;meta name="viewport" content="width=1000"&gt;</code>. </p>
<p><strong>Note</strong>: <em>You can even <a href="https://phabricator.wikimedia.org/T306910">read the entire discussion about the change</a>.</em></p>
<p><img src="https://files.smashing.media/articles/behind-curtains-wikipedia-redesign/wikipedia-meta-viewport.png" /></p>
<p>Geoff: I know front-end nerds will want to know how CSS is written and managed in this latest design because, well, I’m one of them! What does the process look like to make an edit to the styles?</p>
<p>Jon: You have to remember that Wikipedia — and the MediaWiki software that provides it — is quite old and very large, and some of our technology stack reflects that.</p>
<p>MediaWiki is primarily a progressively enhanced web page written in PHP, so we tend to ship HTML with vanilla JavaScript and CSS that enhances it. Our front end is really unusual in that we have no build scripts for our JavaScript and CSS. We write ES6 code without transpiling it, and we use LESS compiled at runtime in PHP, with heavy caching, for our CSS. HTML is provided by Mustache templates.</p>
<p>We are very conservative about what libraries and technologies we use, particularly if they are likely to have an impact on others in the stack. We use TypeScript in the project to validate our code using JSDoc blocks but do not write our code in TypeScript as many of our volunteers do not know the language, and we don’t want to alienate them.</p>
<p>There was talk about replacing LESS with a different CSS preprocessor, but we decided to retain the status quo we’ve used since 2013 because we don’t want to fragment our codebase. We currently use Mustache templates because that’s what we’ve used since 2014, but we hope to eventually phase those out and replace them with Vue.js templates.</p>
<p>All our code is open-sourced, which is pretty unusual and cool! So, if you ever see some visual thing that looks off or could be improved, we’re always happy to <a href="https://github.com/wikimedia/mediawiki-skins-Vector/tree/master/resources/skins.vector.styles/components">take PRs with CSS that fix it</a>.</p>
<p>Geoff: Another nerdy but key question for you: how important were performance considerations to the redesign? What specific things do you look for in Wikipedia’s performance, and what tools do you use to measure them?</p>
<p>Jon: Performance is really important to us, as Wikipedia is global, and we have many projects growing in areas with slower internet connections. We have a performance dashboard that we monitor where we collect global data from our users using the <code>NavigationTiming</code> API. And we run automated synthetic performance tests using <a href="https://www.sitespeed.io">Sitespeed.io</a>. This is all public, and <a href="https://grafana.wikimedia.org/d/000000205/reading-web-performance?orgId=1">anyone can dig into the data</a>!</p>
<p><img src="https://files.smashing.media/articles/behind-curtains-wikipedia-redesign/wikipedia-performance-dashboard.png" /></p>
<p>One of the biggest concerns for this redesign project was how replacing the internal search feature might lose users if it became too slow or unresponsive. We added instrumentation specifically designed to monitor this, and <a href="https://www.nray.dev/blog/analyzing-search-performance/">there’s a detailed write-up on how we analyzed the findings with synthetic performance tests</a>.</p>
<p>Besides thinking about performance for specific features, we monitor bundle sizes of our render-blocking CSS assets, and our CI pipeline blocks anything that goes over our performance budget. We also run spikes to see if there are additional ways to improve performance. For example, in a quiet period, <a href="https://www.nray.dev/blog/300ms-faster-reducing-wikipedias-total-blocking-time/">we ran a spike, which made our mobile site 300ms faster</a>.</p>
<p>Given that we have hundreds of volunteers and staff collaborating on the codebase,</p>
<p>It’s a challenge to uphold our own high-performance standards. We’re currently working on implementing a performance budget across all our projects to formally enforce this and share the knowledge more widely for everyone to reference.</p>
<p>Geoff: Alex, you’ve <a href="https://alexhollender.info/wiki-2023">noted</a> that one of the goals you defined for the project was to “develop a more flexible interface with an eye towards future features.” What makes the new interface more flexible compared to how it was before, and what future features are you anticipating?</p>
<p>Alex: A small example of a new feature is the sticky header, which is currently only available when you are logged into the site. We built it knowing that for different types of pages, like article pages versus discussion pages versus help pages, et cetera, we would want to put different types of tools in the sticky header. That forethought can save a lot of time and complexity in terms of development.</p>
<p>Another aspect of flexibility, or maybe more specifically, extensibility, is information architecture. The previous interface had two different places for page tools: in the sidebar menu on the left and then above the article title. So, whenever we worked on a new page tools feature, we had to decide where it would go. Creating a clearer and more structured information architecture for the site means there’s one place for page tools, one for global navigation, and so on. I think this will make it easier for us to design new features in the future.</p>
<p>In terms of future features, we’re thinking about reading settings: dark mode, the ability to increase and decrease the font size and line height more easily, and maybe even themes like the Wikipedia apps have. We’re also thinking about ways to help people discover more knowledge related to what they are reading. Other things we might consider are reading features, like the ability to take notes and create collections of articles.</p>
<p><img src="https://files.smashing.media/articles/behind-curtains-wikipedia-redesign/wikipedia-concept-dark-mode.jpg" /></p>
<p>Geoff: Thanks so much to you both for spending some time to share your work with us! Is there anything especially interesting about the design or the work it took to make it that might not be immediately obvious but that you are proud of?</p>
<p>Alex: I think it’s cool to think about super small things that have a big impact. Links are a critical part of the reading experience, and following from that, knowing which links you’ve already visited is important. Previously, there was so little contrast between visited links and black text that this whole sort of navigational wayfinding benefit was missing from experience. <a href="https://phabricator.wikimedia.org/T213778">Changing the color of visited links</a> was about as simple as a change can be from a technical perspective, with an outsized impact on the user experience.</p>
<p>Another thing I’m interested in and excited about is prototyping, specifically how additional fidelity in prototypes affects the design process. I reached a point where I was predominantly making prototypes with HTML, CSS, and JavaScript to work through design challenges rather than relying on mockups. It’s maybe impossible to know what impact that had in terms of the ability for us to have discussions about the designs, evaluate them, and include community members across many languages, among other things. There’s no way for us to know how the project would have turned out or how much longer it would have taken us to arrive at certain decisions if I hadn’t taken that approach, but my inclination is that it was super helpful.</p>
<p>Jon: The thing I’m most excited about is that the redesign project gave us the time to really pull apart a system that was 21 years old and build the foundation for something more sustainable. Fundamental things like introducing design tokens across the entire software stack are going to be powerful tools that we can use to support user customizations that allow people to change font size and enable a dark mode, the latter of which has been a popular request. So hopefully, we can finally deliver that.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Geoff Graham)</author>
      <enclosure url="http://files.smashing.media/articles/behind-curtains-wikipedia-redesign/behind-curtains-wikipedia-redesign.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Penpot’s Flex Layout: Building CSS Layouts In A Design Tool]]></title>
      <link>https://smashingmagazine.com/2023/06/penpot-flex-layout-building-css-layouts-design-tool/</link>
      <guid>https://smashingmagazine.com/2023/06/penpot-flex-layout-building-css-layouts-design-tool/</guid>
      <pubDate>Fri, 23 Jun 2023 13:00:00 GMT</pubDate>
      <description><![CDATA[In today’s article, let’s explore how we can use Flex Layout and see how it empowers designers with greater control over their work while saving everyone’s time.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://penpot.app/?mtm_campaign=Flex-layout&amp;mtm_source=newssmashingmag">Penpot</a></p>
<p>Among design tools, <a href="https://penpot.app/?mtm_campaign=Flex-layout&amp;mtm_source=newssmashingmag">Penpot</a> holds a special place. It is an open-source design tool, meant for designers and developers to work together and help them speak the same language. It’s also the first design tool out there to be fully open-source and based on open web standards.</p>
<p>That’s a perfect choice for designers and developers working closely together as Penpot’s approach can help to radically improve design to development processes and effortlessly make them seamless and faster.</p>
<p>As open-source software, Penpot also evolves blazingly fast, fueled by the support of the community. When I was <a href="https://www.smashingmagazine.com/2023/02/meet-penpot-open-source-design-platform-designers-developers/">first writing about Penpot</a> a few months ago, I shared my excitement about the app’s layout features that finally bring parity between design and code and follow the same rules as CSS does. Since then, the team behind Penpot has made creating layouts even better, so they deserve another look. I really enjoyed playing with the new Penpot’s features, and I believe you might want to give them a try too.</p>
Designing Layouts Done Right
<p>If you ever wrote or read CSS code, there are high chances you have already stumbled upon Flexbox. It’s a cornerstone of building layouts for the modern web, and quite likely, every single website you visit on an everyday basis uses it.</p>
<p>Flexbox is the bread and butter of creating simple, flexible layouts. It’s the most common way of positioning elements: stacking them in rows and columns and deciding how they are supposed to be aligned and distributed.</p>
<p>Therefore, creating Flexbox layouts is a vital part of most web hand-off processes. And not rarely time-consuming and causing friction between design and development. Usually, developers try to translate static mockups into code by rebuilding layouts made by designers from scratch. As most designers don’t write CSS code and most design tools follow a different logic than CSS does, lots can go wrong or get lost in translation.</p>
<p>This is where Penpot’s Flex Layout comes into play. Layouts built-in Penpot don’t need tedious translating into code. Even though designers can build them using a familiar visual interface, they come as production-ready code out-of-the-box. And even if they need tweaking, they can still save developers plenty of time and guesswork as they follow a logic that is already familiar and understandable to them.</p>
<p>So at the bottom line, it benefits everyone. It’s less work for developers as they get the code they need straight away. It’s better for designers as they have finer control over the final effect and a better understanding of the technologies they are designing for. And finally, it’s good for business as it saves everyone’s time. </p>
<p>All of that without making the designer's job an inch harder or forcing them to write a single line of code. Now, let’s take a look at what building designs with Flex Layout look like in practice!</p>
Getting Started With Flex Layout
<p>As mentioned before, Flexbox can be understood as a toolkit for building layout and positioning elements. </p>
<p>Each Flex Layout is generally an array, a list of elements. This list can be sorted from left to write, right to left, top to bottom, or bottom to top. </p>
<p><img src="https://files.smashing.media/articles/penpot-flex-layout-building-css-layouts-design-tool/1-flex-direction.png" /></p>
<p>Flex Layout allows you to control how elements in these lists are aligned against each other.</p>
<p><img src="https://files.smashing.media/articles/penpot-flex-layout-building-css-layouts-design-tool/2-flex-alignment.png" /></p>
<p>You can also control how elements are laid out within containers.</p>
<p><img src="https://files.smashing.media/articles/penpot-flex-layout-building-css-layouts-design-tool/3-flex-distribution.png" /></p>
<p>Flex layouts can wrap into multiple lines too. You can also nest them indefinitely to create as complex layouts as you wish.</p>
<p><img src="https://files.smashing.media/articles/penpot-flex-layout-building-css-layouts-design-tool/4-flex-wrapping.png" /></p>
<p>And that’s just the beginning. There are many more options to explore. As you can see, Flex layout gives you much more possibilities and precision than most design tools do. Creating with it is not only a better process but a more powerful one. </p>
<p>To explore all the possible features of Flex Layout, Penpot’s team created <a href="http://penpot.app/layout?mtm_campaign=Flex-layout&amp;mtm_source=newssmashingmag">a comprehensive Playground template for you to try</a>. If you don’t have a Penpot account yet, go ahead and create one now. Then, duplicate the file and try to play with it yourself! The file will take you on a journey through each and every Flex layout feature, with clear examples and definitions, so you can start building complex, robust layouts in no time.</p>
Building An Example Together
<p>To give you an even better understanding of what working with Flex Layout is in practice, let’s look at a practical example. In the next few steps, we will dig into the structure of this little mockup and rebuild each and every part of it with Flex Layout.</p>
<p><img src="https://files.smashing.media/articles/penpot-flex-layout-building-css-layouts-design-tool/mockup-example.png" /></p>
<p>For the first elements, we can use Flex Layout for our buttons. With a few clicks, we can make sure they are responsive to the size of the icon and the label inside, and set paddings and distances between the children elements.</p>
<p>We can also use Flex Layout for the avatars stack. To make the images overlap, a negative gap between the elements does the trick. We also have full control over the order of elements. We can lay out the stack in any direction. We can also control the stack order of each element individually. That’s thanks to Penpot’s support for z-index, another useful CSS property.</p>
<p>Flex layouts can be nested, creating more complex layouts and dependencies. In this case, we’ll create a separate Flex Layout for the navbar and another for the tiles grid below.</p>
<p>Remember that elements in Flex layouts can be wrapped? Let’s see this in action. In this case, we can create a flexible multi-dimensional layout of elements that’s responsive to the parent container and fill it with blocks both vertically and horizontally, just as CSS would do.</p>
<p>But what if some of the elements don’t belong to the grid? Alongside Flexbox, Penpot provides support for absolute positioning. This means that any element can be picked up from the Flex Layout to still leave in the same container but ignore the layout rules. That’s exactly what we need for the ‘Edit’ button.</p>
<p>Eventually, we can transform the whole board into a Flex Layout. Now, we have a design that is not only easy to work with and edit but is also fully flexible. Wondering how your design would perform on a smaller or bigger screen? All you have to do is to resize the board.</p>
Next Steps
<p>If you’d like to take a look at the source file of the layout we’ve just built, go ahead and <a href="https://www.smashingmagazine.com/provide/penpot-flex-layout-building-css-layouts-design-tool.zip">duplicate this file</a>.</p>
<p>To dig deeper and learn more about how to use Flex Layout, don’t forget to <a href="http://penpot.app/layout?mtm_campaign=Flex-layout&amp;mtm_source=newssmashingmag">try the Flex Layout template</a>.</p>
<p>In case you get stuck or have some questions, <a href="https://community.penpot.app/c/contributions/10">Penpot Community</a> would be the best place to look for help.</p>
<p>There is also a great <a href="https://www.youtube.com/watch?v=2tFX66Td9cU&amp;lc=Ugw24jd9C5zeVkqBqjt4AaABAg">video tutorial</a> that explains how designers and developers can work together using Flex Layout.</p>
Summary
<p>As you can see, with Flex Layout, the possibilities for structuring your designs are endless. I believe that features like this are a welcome change in the design tools scene and a shift in the right direction. Helping designers to take more control over their work and helping developers to work as efficiently as possible.</p>
Coming Soon: Support For CSS Grid
<p>Maybe you’re now thinking the same as I am: CSS layouts are not only Flexbox, are they? If you work with CSS, you probably know that Flexbox alone is not enough. More complex layouts are often better built using CSS Grid. Flexbox and Grid work best when combined together — combined to create precise yet complex and fully responsive websites.</p>
<p>Penpot doesn’t support CSS Grid just yet, but that is about to change! You can learn more about it at the upcoming <a href="http://penpotfest.org">Penpot Fest</a>. During the event, Penpot’s team will share their plan and a demo of the upcoming Grid Layout feature. Don’t hesitate to join (virtually or in person), if you’d like to learn more about the next steps for Penpot. </p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Mikołaj Dobrucki)</author>
      <enclosure url="http://files.smashing.media/articles/penpot-flex-layout-building-css-layouts-design-tool/penpot-flex-layout-building-css-layouts-design-tool.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Using AI To Detect Sentiment In Audio Files]]></title>
      <link>https://smashingmagazine.com/2023/06/ai-detect-sentiment-audio-files/</link>
      <guid>https://smashingmagazine.com/2023/06/ai-detect-sentiment-audio-files/</guid>
      <pubDate>Thu, 22 Jun 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[Dive into an article where you will build an app that evaluates audio files for positive and negative sentiments. The idea is that you will create an interface for uploading an audio file, then transcribe the contents into text before analyzing the text and assigning it a positive or negative score for how the tone is perceived.]]></description>
      <content:encoded><![CDATA[<p>I don’t know if you’ve ever used Grammarly’s service for writing and editing content. But if you have, then you no doubt have seen the feature that detects the tone of your writing.</p>
<p>It’s an extremely helpful tool! It can be hard to know how something you write might be perceived by others, and this can help affirm or correct you. Sure, it’s some algorithm doing the work, and we know <a href="https://www.theatlantic.com/technology/archive/2022/12/chatgpt-openai-artificial-intelligence-writing-ethics/672386/">that not all AI-driven stuff is perfectly accurate</a>. But as a gut check, it’s really useful.</p>
<p><img src="https://files.smashing.media/articles/ai-detect-sentiment-audio-files/ai-audio-grammarly.png" /></p>
<p>Now imagine being able to do the same thing with audio files. How neat would it be to understand the underlying sentiments captured in audio recordings? Podcasters especially could stand to benefit from a tool like that, not to mention customer service teams and many other fields. </p>
<p>An audio sentiment analysis has the potential to transform the way we interact with data.</p>
<p>That’s what we are going to accomplish in this article.</p>
<p><img src="https://files.smashing.media/articles/ai-detect-sentiment-audio-files/ai-audio-ui.png" /></p>
<p>The idea is fairly straightforward:</p>
<ul>
<li>Upload an audio file.</li>
<li>Convert the content from speech to text.</li>
<li>Generate a score that indicates the type of sentiment it communicates.</li>
</ul>
<p>But how do we actually build an interface that does all that? I’m going to introduce you to three tools and show how they work together to create an audio sentiment analyzer.</p>
But First: Why Audio Sentiment Analysis?
<p>By harnessing the capabilities of an audio sentiment analysis tool, developers and data professionals can <strong>uncover valuable insights from audio recordings, revolutionizing the way we interpret emotions and sentiments</strong> in the digital age. Customer service, for example, is crucial for businesses aiming to deliver personable experiences. We can surpass the limitations of text-based analysis to get a better idea of the feelings communicated by verbal exchanges in a variety of settings, including:</p>
<ul>
<li><strong>Call centers</strong><br />Call center agents can gain real-time insights into customer sentiment, enabling them to provide personalized and empathetic support.</li>
<li><strong>Voice assistants</strong><br />Companies can improve their natural language processing algorithms to deliver more accurate responses to customer questions.</li>
<li><strong>Surveys</strong><br />Organizations can gain valuable insights and understand customer satisfaction levels, identify areas of improvement, and make data-driven decisions to enhance overall customer experience.</li>
</ul>
<p>And that is just the tip of the iceberg for one industry. Audio sentiment analysis offers valuable insights across various industries. Consider healthcare as another example. Audio analysis could enhance patient care and improve doctor-patient interactions. Healthcare providers can gain a deeper understanding of patient feedback, identify areas for improvement, and optimize the overall patient experience.</p>
<p>Market research is another area that could benefit from audio analysis. Researchers can leverage sentiments to gain valuable insights into a target audience’s reactions that could be used in everything from competitor analyses to brand refreshes with the use of audio speech data from interviews, focus groups, or even social media interactions where audio is used.</p>
<p>I can also see audio analysis being used in the design process. Like, instead of asking stakeholders to write responses, how about asking them to record their verbal reactions and running those through an audio analysis tool? The possibilities are endless!</p>
The Technical Foundations Of Audio Sentiment Analysis
<p>Let’s explore the technical foundations that underpin audio sentiment analysis. We will delve into machine learning for <strong>natural language processing (NLP)</strong> tasks and look into Streamlit as a web application framework. These essential components lay the groundwork for the audio analyzer we’re making.</p>
<h3>Natural Language Processing</h3>
<p>In our project, we leverage the Hugging Face <a href="https://huggingface.co/docs/transformers/index">Transformers</a> library, a crucial component of our development toolkit. Developed by Hugging Face, the Transformers library equips developers with a vast collection of pre-trained models and advanced techniques, enabling them to extract valuable insights from audio data.</p>
<p><img src="https://files.smashing.media/articles/ai-detect-sentiment-audio-files/ai-audio-transformers.png" /></p>
<p>With Transformers, we can supply our audio analyzer with the ability to classify text, recognize named entities, answer questions, summarize text, translate, and generate text. Most notably, it also provides <strong>speech recognition</strong> and <strong>audio classification capabilities.</strong> Basically, we get an API that taps into pre-trained models so that our AI tool has a starting point rather than us having to train it ourselves.</p>
<h3>UI Framework And Deployments</h3>
<p><a href="https://streamlit.io/">Streamlit</a> is a web framework that simplifies the process of building interactive data applications. What I like about it is that it provides a <a href="https://streamlit.io/components">set of predefined components</a> that works well in the command line with the rest of the tools we’re using for the audio analyzer, not to mention we can deploy directly to their service to preview our work. It’s not required, as there may be other frameworks you are more familiar with.</p>
Building The App
<p>Now that we’ve established the two core components of our technical foundation, we will next explore implementation, such as</p>
<ol>
<li>Setting up the development environment,</li>
<li>Performing sentiment analysis, </li>
<li>Integrating speech recognition, </li>
<li>Building the user interface, and </li>
<li>Deploying the app.</li>
</ol>
<h3>Initial Setup</h3>
<p>We begin by importing the libraries we need:</p>
<pre><code>import os
import traceback
import streamlit as st
import speech_recognition as sr
from transformers import pipeline
</code></pre>

<p>We import <code>os</code> for system operations, <code>traceback</code> for error handling, <code>streamlit</code> (<code>st</code>) as our UI framework and for deployments, <code>speech_recognition</code> (<code>sr</code>) for audio transcription, and <code>pipeline</code> from Transformers to perform sentiment analysis using pre-trained models.</p>
<p>The project folder can be a pretty simple single directory with the following files:</p>
<ul>
<li><code>app.py</code>: The main script file for the Streamlit application.</li>
<li><code>requirements.txt</code>: File specifying project dependencies.</li>
<li><code>README.md</code>: Documentation file providing an overview of the project.</li>
</ul>
<h3>Creating The User Interface</h3>
<p>Next, we set up the layout, courtesy of Streamlit’s framework. We can create a spacious UI by <a href="https://docs.streamlit.io/library/get-started/main-concepts">calling a <code>wide</code> layout</a>:</p>
<pre><code>st.set_page_config(layout="wide")
</code></pre>

<p>This ensures that the user interface provides ample space for displaying results and interacting with the tool. </p>
<p>Now let’s add some elements to the page using Streamlit’s functions. We can <a href="https://docs.streamlit.io/library/api-reference/text/st.title">add a title</a> and <a href="https://docs.streamlit.io/library/api-reference/write-magic/st.write">write some text</a>:</p>
<pre><code>// app.py
st.title("🎧 Audio Analysis 📝")
st.write("[Joas](https://huggingface.co/Pontonkid)")
</code></pre>

<p>I’d like to add a sidebar to the layout that can hold a description of the app as well as the form control for uploading an audio file. We’ll use the main area of the layout to display the audio transcription and sentiment score.</p>
<p>Here’s how we <a href="https://docs.streamlit.io/library/api-reference/layout/st.sidebar">add a sidebar</a> with Streamlit:</p>
<div>
<pre><code>// app.py
st.sidebar.title("Audio Analysis")
st.sidebar.write("The Audio Analysis app is a powerful tool that allows you to analyze audio files and gain valuable insights from them. It combines speech recognition and sentiment analysis techniques to transcribe the audio and determine the sentiment expressed within it.")
</code></pre>
</div>

<p>And here’s how we <a href="https://docs.streamlit.io/library/api-reference/widgets/st.file_uploader">add the form control for uploading an audio file</a>:</p>
<pre><code>// app.py
st.sidebar.header("Upload Audio")
audio_file = st.sidebar.file_uploader("Browse", type=["wav"])
upload_button = st.sidebar.button("Upload")
</code></pre>

<p>Notice that I’ve set up the <code>file_uploader()</code> so it only accepts WAV audio files. That’s just a preference, and you can specify the exact types of files you want to support. Also, notice how I <a href="https://docs.streamlit.io/library/api-reference/widgets/st.button">added an Upload button</a> to initiate the upload process.</p>
<h3>Analyzing Audio Files</h3>
<p>Here’s the fun part, where we get to extract text from an audio file, analyze it, and calculate a score that measures the sentiment level of what is said in the audio.</p>
<p>The plan is the following:</p>
<ol>
<li>Configure the tool to utilize a pre-trained NLP model fetched from the Hugging Face models hub.</li>
<li>Integrate Transformers’ <code>pipeline</code> to perform sentiment analysis on the transcribed text.</li>
<li>Print the transcribed text.</li>
<li>Return a score based on the analysis of the text.</li>
</ol>
<p>In the first step, we configure the tool to leverage a pre-trained model:</p>
<pre><code>// app.py
def perform_sentiment_analysis(text):
  model_name = "distilbert-base-uncased-finetuned-sst-2-english"
</code></pre>

<p>This points to a model in the hub called <a href="https://huggingface.co/docs/transformers/v4.29.1/en/model_doc/distilbert#overview">DistilBERT</a>. I like it because it’s focused on text classification and is pretty lightweight compared to some other models, making it ideal for a tutorial like this. But there are <a href="https://huggingface.co/models?sort=downloads">plenty of other models available in Transformers</a> out there to consider.</p>
<p>Now we integrate <a href="https://huggingface.co/docs/transformers/main/en/quicktour#pipeline">the <code>pipeline()</code> function</a> that does the sentiment analysis:</p>
<div>
<pre><code>// app.py
def perform_sentiment_analysis(text):
  model_name = "distilbert-base-uncased-finetuned-sst-2-english"
  sentiment_analysis = pipeline("sentiment-analysis", model=model_name)
</code></pre>
</div>

<p>We’ve set that up to perform a sentiment analysis based on the DistilBERT model we’re using.</p>
<p>Next up, define a variable for the text that we get back from the analysis:</p>
<div>
<pre><code>// app.py
def perform_sentiment_analysis(text):
  model_name = "distilbert-base-uncased-finetuned-sst-2-english"
  sentiment_analysis = pipeline("sentiment-analysis", model=model_name)
  results = sentiment_analysis(text)
</code></pre>
</div>

<p>From there, we’ll assign variables for the score label and the score itself before returning it for use:</p>
<div>
<pre><code>// app.py
def perform_sentiment_analysis(text):
  model_name = "distilbert-base-uncased-finetuned-sst-2-english"
  sentiment_analysis = pipeline("sentiment-analysis", model=model_name)
  results = sentiment_analysis(text)
  sentiment_label = results[0]['label']
  sentiment_score = results[0]['score']
  return sentiment_label, sentiment_score
</code></pre>
</div>

<p>That’s our complete <code>perform_sentiment_analysis()</code> function!</p>
<h3>Transcribing Audio Files</h3>
<p>Next, we’re going to transcribe the content in the audio file into plain text. We’ll do that by defining a <code>transcribe_audio()</code> function that uses the <a href="https://pypi.org/project/SpeechRecognition/"><code>speech_recognition</code></a> library to transcribe the uploaded audio file:</p>
<pre><code>// app.py
def transcribe_audio(audio_file):
  r = sr.Recognizer()
  with sr.AudioFile(audio_file) as source:
    audio = r.record(source)
    transcribed_text = r.recognize_google(audio)
  return transcribed_text
</code></pre>

<p>We initialize a recognizer object (<code>r</code>) from the <code>speech_recognition</code> library and open the uploaded audio file using the <a href="https://github.com/Uberi/speech_recognition/blob/master/examples/audio_transcribe.py"><code>AudioFile</code> function</a>. We then record the audio using <code>r.record(source)</code>. Finally, we use the <a href="https://cloud.google.com/speech-to-text/">Google Speech Recognition API</a> through <code>r.recognize_google(audio)</code> to transcribe the audio and obtain the transcribed text. </p>
<p>In a <code>main()</code> function, we first check if an audio file is uploaded and the upload button is clicked. If both conditions are met, we proceed with audio transcription and sentiment analysis.</p>
<pre><code>// app.py
def main():
  if audio_file and upload_button:
    try:
      transcribed_text = transcribe_audio(audio_file)
      sentiment_label, sentiment_score = perform_sentiment_analysis(transcribed_text)
</code></pre>



<h3>Integrating Data With The UI</h3>
<p>We have everything we need to display a sentiment analysis for an audio file in our app’s interface. We have the file uploader, a language model to train the app, a function for transcribing the audio into text, and a way to return a score. All we need to do now is hook it up to the app!</p>
<p>What I’m going to do is set up two headers and a text area from Streamlit, as well as variables for icons that represent the sentiment score results:</p>
<pre><code>// app.py
st.header("Transcribed Text")
st.text_area("Transcribed Text", transcribed_text, height=200)
st.header("Sentiment Analysis")
negative_icon = "👎"
neutral_icon = "😐"
positive_icon = "👍"
</code></pre>

<p>Let’s use conditional statements to display the sentiment score based on which label corresponds to the returned result. If a sentiment label is empty, we use <a href="https://docs.streamlit.io/library/api-reference/layout/st.empty"><code>st.empty()</code></a> to leave the section blank.</p>
<div>
<pre><code>// app.py
if sentiment_label == "NEGATIVE":
  st.write(f"{negative_icon} Negative (Score: {sentiment_score})", unsafe_allow_html=True)
else:
  st.empty()

if sentiment_label == "NEUTRAL":
  st.write(f"{neutral_icon} Neutral (Score: {sentiment_score})", unsafe_allow_html=True)
else:
  st.empty()

if sentiment_label == "POSITIVE":
  st.write(f"{positive_icon} Positive (Score: {sentiment_score})", unsafe_allow_html=True)
else:
  st.empty()
</code></pre>
</div>

<p>Streamlit has a handy <a href="https://docs.streamlit.io/library/api-reference/status/st.info"><code>st.info()</code> element</a> for displaying informational messages and statuses. Let’s tap into that to display an explanation of the sentiment score results:</p>
<div>
<pre><code>// app.py
st.info(
  "The sentiment score measures how strongly positive, negative, or neutral the feelings or opinions are."
  "A higher score indicates a positive sentiment, while a lower score indicates a negative sentiment."
)
</code></pre>
</div>

<p>We should account for error handling, right? If any exceptions occur during the audio transcription and sentiment analysis processes, they are caught in an <code>except</code> block. We display an error message using Streamlit’s <a href="https://docs.streamlit.io/library/api-reference/status/st.error"><code>st.error()</code> function</a> to inform users about the issue, and we also print the exception traceback using <code>traceback.print_exc()</code>:</p>
<div>
<pre><code>// app.py
except Exception as ex:
  st.error("Error occurred during audio transcription and sentiment analysis.")
  st.error(str(ex))
  traceback.print_exc()
</code></pre>
</div>

<p>This code block ensures that the app’s <code>main()</code> function is executed when the script is run as the main program:</p>
<pre><code>// app.py
if __name__ == "__main__": main()
</code></pre>

<p>It’s common practice to wrap the execution of the main logic within this condition to prevent it from being executed when the script is imported as a module.</p>
<h3>Deployments And Hosting</h3>
<p>Now that we have successfully built our audio sentiment analysis tool, it’s time to deploy it and publish it live. For convenience, I am using the <a href="https://docs.streamlit.io/streamlit-community-cloud">Streamlit Community Cloud</a> for deployments since I’m already using Streamlit as a UI framework. That said, I do think it is a fantastic platform because it’s free and allows you to share your apps pretty easily.</p>
<p>But before we proceed, there are a few prerequisites:</p>
<ul>
<li><strong>GitHub account</strong><br />If you don’t already have one, <a href="https://github.com/">create a GitHub account</a>. GitHub will serve as our code repository that connects to the Streamlit Community Cloud. This is where Streamlit gets the app files to serve.</li>
<li><strong>Streamlit Community Cloud account</strong><br /><a href="https://streamlit.io/cloud">Sign up for a Streamlit Cloud</a> so you can deploy to the cloud.</li>
</ul>
<p>Once you have your accounts set up, it’s time to dive into the deployment process:</p>
<ol>
<li><strong>Create a GitHub repository.</strong><br />Create a new repository on GitHub. This repository will serve as a central hub for managing and collaborating on the codebase.</li>
<li><strong>Create the Streamlit application.</strong><br />Log into Streamlit Community Cloud and create a new application project, providing details like the name and pointing the app to the GitHub repository with the app files.</li>
<li><strong>Configure deployment settings.</strong><br />Customize the deployment environment by specifying a Python version and defining environment variables.</li>
</ol>
<p>That’s it! From here, Streamlit will automatically build and deploy our application when new changes are pushed to the main branch of the GitHub repository. You can see a working example of the audio analyzer I created: <a href="https://coding-audio-sentiment.streamlit.app">Live Demo</a>.</p>
Conclusion
<p>There you have it! You have successfully built and deployed an app that recognizes speech in audio files, transcribes that speech into text, analyzes the text, and assigns a score that indicates whether the overall sentiment of the speech is positive or negative.</p>
<p>We used a tech stack that only consists of a language model (Transformers) and a UI framework (Streamlit) that has integrated deployment and hosting capabilities. That’s really all we needed to pull everything together!</p>
<p>So, what’s next? Imagine capturing sentiments in real time. That could open up new avenues for instant insights and dynamic applications. It’s an exciting opportunity to push the boundaries and take this audio sentiment analysis experiment to the next level.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2023/05/ai-tools-skyrocket-programming-productivity/">How To Use AI Tools To Skyrocket Your Programming Productivity</a>,” Shane Duggan</li>
<li>“<a href="https://www.smashingmagazine.com/2022/03/audio-visualization-javascript-gsap-part1/">A Guide To Audio Visualization With JavaScript And GSAP</a>,” Jhey Tompkins</li>
<li>“<a href="https://www.smashingmagazine.com/2021/06/web-design-done-well-audio/">Web Design Done Well: Making Use Of Audio</a>,” Frederick O’Brien</li>
<li>“<a href="https://www.smashingmagazine.com/2018/04/audio-video-recording-react-native-expo/">How To Create An Audio/Video Recording App With React Native: An In-Depth Tutorial</a>,” Oleh Mryhlod</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Joas Pambou)</author>
      <enclosure url="http://files.smashing.media/articles/ai-detect-sentiment-audio-files/ai-detect-sentiment-audio-files.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Visual Editing Comes To The Headless CMS]]></title>
      <link>https://smashingmagazine.com/2023/06/visual-editing-headless-cms/</link>
      <guid>https://smashingmagazine.com/2023/06/visual-editing-headless-cms/</guid>
      <pubDate>Tue, 20 Jun 2023 09:00:00 GMT</pubDate>
      <description><![CDATA[Visual editing is beginning to make its way into headless architecture and the early results look promising. We’ll look at a few headless CMSs that currently support visual editing in this article.]]></description>
      <content:encoded><![CDATA[<p>A couple of years ago, my friend Maria asked me to build a website for her architecture firm. For projects like this, I would normally use a headless content management system (CMS) and build a custom front end, but this time I advised her to use a site builder like Squarespace or Wix.</p>
<p>Why a site builder? Because Maria is a highly visual and creative person and I knew she would want everything to look just right. She needed the visual feedback loop of a site builder and Squarespace and Wix are two of the most substantial offerings in the visual editing space.</p>
<p>In my experience, content creators like Maria are much more productive when they can see their edits reflected on their site in a live preview. The problem is that visual editing has traditionally been supported only by site-builders, and they are often of the “low” or “no” code varieties. Visual editing just hasn’t been the sort of thing you see on a more modern stack, like a headless CMS.</p>
<p>Fortunately, this visual editing experience is starting to make its way to headless CMSs! And that’s what I want to do in this brief article: introduce you to headless CMSs that currently offer visual editing features.</p>
<p>But first…</p>
What Is Visual Editing, Again?
<p>Visual editing has been around since the early days of the web. Anyone who has used Dreamweaver in the past probably experienced an early version of visual editing.</p>
<p>Visual editing is when you can see a live preview of your site while you’re editing content. It gives the content creator an instantaneous visual feedback loop and shows their changes in the context of their site.</p>
<p>There are two defining features of visual editing:</p>
<ul>
<li>A live preview so content creators can see their changes reflected in the context of their site.</li>
<li>Clickable page elements in the preview so content creators can easily navigate to the right form fields.</li>
</ul>
<p>Visual editing has been standard among no-code and low-code site-builders like Squarespace, Wix, and Webflow. But those tools are not typically used by developers who want control over their tech stack. Fortunately, now we’re seeing visual editing come to headless CMSs.</p>
Visual Editing In A Headless CMS
<p>A headless CMS treats your content more like a database that's decoupled from the rendering of your site.</p>
<p>Until recently, headless CMSs came with a big tradeoff: content creators are disconnected from the front end, making it difficult to preview their site. They can't see updates as they make them.</p>
<p>A typical headless CMS interface just provides form fields for editing content. This lacks the context of what content looks like on the page. This UX can feel archaic to people who are familiar with real-time editing experiences in tools like Google Docs, Wix, Webflow, or Notion.</p>
<p>Fortunately, a new wave of headless CMSs is offering visual editing in a way that makes sense to developers. This is great news for anyone who wants to empower their team with an editing experience similar to Wix or Squarespace but on top of their own open-source stack.</p>
<p>Let’s compare the CMS editing experience with and without visual editing on the homepage of Roev.com.</p>
<p>You can see that the instant feedback from the live preview combined with the ability to click elements on the page makes the visual editing experience much more intuitive. The improvements are even more dramatic when content is nested deep inside sections on the page, making it hard to locate without clicking on the page elements.</p>
Headless CMSs That Support Visual Editing
<p>Many popular headless CMS offerings currently support visual editing. Let’s look at a few of the more popular options.</p>
<h3><a href="https://tina.io?utm_source=guest_post\&amp;utm_medium=blog\&amp;utm_campaign=smashingmagazine.com_post">Tina</a></h3>
<p><a href="https://tina.io?utm_source=guest_post\&amp;utm_medium=blog\&amp;utm_campaign=smashingmagazine.com_post">TinaCMS</a> was built from the ground up for visual editing but also offers a “basic editing” mode that’s similar to traditional CMSs. Tina has an open-source admin interface and headless content API that stays synced with files in your Git repository (such as Markdown and JSON).</p>
<h3><a href="https://www.storyblok.com/">Storyblok </a></h3>
<p><a href="https://www.storyblok.com/">Storyblok</a> is a headless CMS that was an early pioneer in visual editing. Storyblok stores your content in its database and makes it available via REST and GraphQL APIs.</p>
<h3><a href="https://sanity.io">Sanity.io</a> (via their <a href="https://www.sanity.io/plugins/iframe-pane">iframe plugin</a>)</h3>
<p><a href="https://sanity.io">Sanity</a> is a traditional headless CMS with an open-source admin interface. It supports visual editing through the use of its <a href="https://www.sanity.io/plugins/iframe-pane">Iframe Pane plugin</a>. Sanity stores your content in its database and makes it available via API.</p>
<h3><a href="http://builder.io">Builder.io</a></h3>
<p><a href="http://builder.io">Builder.io</a> is a closed-source, visual-editing-first headless CMS that stores content in Builder.io’s database and makes it available via API.</p>
<h3><a href="https://www.stackbit.com/">Stackbit</a></h3>
<p><a href="https://www.stackbit.com/">Stackbit</a> is a closed-source editing interface that’s designed to be complementary to other headless CMSs. With Stackbit, you can use another headless CMS to store your content and visually edit that content with Stackbit.</p>
<h3><a href="https://vercel.com/blog/visual-editing">Vercel</a></h3>
<p>Although it’s not a CMS, Vercel’s Deploy Previews can show an <a href="https://vercel.com/blog/visual-editing">edit button</a> in the toolbar. This edit button overlays a UI that helps content creators quickly navigate to the correct location in the CMS.</p>
Conclusion
<p>Now that developers are adding visual editing to their sites, I’m seeing content creators like Maria become super productive on a developer-first stack. Teams that were slow to update content before switching to visual editing are now more active and efficient.</p>
<p>There are many great options to build visual editing experiences without compromising developer-control and extensibility. The promise of Dreamweaver is finally here!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Scott Gallant)</author>
      <enclosure url="http://files.smashing.media/articles/visual-editing-headless-cms/visual-editing-headless-cms.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Gatsby Headaches And How To Cure Them: i18n (Part 2)]]></title>
      <link>https://smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-2/</link>
      <guid>https://smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-2/</guid>
      <pubDate>Mon, 19 Jun 2023 17:00:00 GMT</pubDate>
      <description><![CDATA[Part 2 of the series concentrates on implementing internationalization (i18n) on a Gatsby website, an essential feature on any multilingual website that can be quite a bit of trouble if incorrectly implemented, creating more problems than it solves.]]></description>
      <content:encoded><![CDATA[<p>In <a href="https://www.smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/">Part 1</a> of this series, we peeked at how to add i18n to a Gatsby blog using a motley set of Gatsby plugins. They are great if you know what they can do, how to use them, and how they work. Still, plugins don’t always work great together since they are often written by different developers, which can introduce compatibility issues and cause an even bigger headache. Besides, we usually use plugins for more than i18n since we also want to add features like responsive images, Markdown support, themes, CMSs, and so on, which can lead to a whole compatibility nightmare if they aren’t properly supported.</p>
<p>How can we solve this? Well, when working with an incompatible, or even an old, plugin, the best solution often involves finding another plugin, hopefully one that provides better support for what is needed. Otherwise, you could find yourself editing the plugin’s original code to make it work (an indicator that you are in a bad place because it can introduce breaking changes), and unless you want to collaborate on the plugin’s codebase with the developers who wrote it, it likely won’t be a permanent solution.</p>
<p>But there is another option!</p>
<h3>Table of Contents</h3>
<ul>
<li><a href="#the-solution-make-your-own-plugin">The Solution</a></li>
<li><a href="#the-starter">The Starter</a></li>
<li><a href="#create-localized-routes">Create localized routes</a><ul>
<li><a href="#how-plugins-create-pages">How Plugins create pages</a></li>
<li><a href="#using-oncreatepage">Using <code>onCreatePage</code></a></li>
<li><a href="#creating-the-pages">Creating the pages</a></li>
</ul>
</li>
<li><a href="#querying-localized-content">Querying localized content</a></li>
<li><a href="#creating-localized-links">Creating Localized Links</a><ul>
<li><a href="#setting-up-a-locale-context">Setting up a Locale Context</a></li>
<li><a href="#creating-localizedlink">Creating <code>LocalizedLink</code></a></li>
</ul>
</li>
<li><a href="#redirecting-users">Redirecting users</a></li>
<li><a href="#changing-locales">Changing locales</a></li>
<li><a href="#localizing-static-content">Localizing Static Content</a><ul>
<li><a href="#page-body-translations">Page Body Translations</a></li>
<li><a href="#page-title-translations">Page Title Translations</a></li>
</ul>
</li>
<li><a href="#formatting">Formatting</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p><strong>Note</strong>: <em>Here is the <a href="https://gatsby-headaches-i18n-demo-no-plugins.netlify.app">Live Demo</a>.</em></p>
The Solution: Make Your Own Plugin!
<p>Sure, that might sound intimidating, but adding i18n from scratch to your blog is not so bad once you get down to it. Plus, you gain <strong>complete control over compatibility</strong> and how it is implemented. That’s exactly what we are going to do in this article, specifically by adding i18n to the starter site — a cooking blog — that we created together in <a href="https://www.smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/">Part 1</a>.</p>
The Starter
<p>You can go ahead and see how we made our cooking blog starter in <a href="https://www.smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/#the-starter">Part 1</a> or <a href="https://github.com/Monknow/starter-gatsby-headaches-and-how-to-cure-them-i18n">get it from GitHub</a>.</p>
<p>This starter includes a homepage, blog post pages created from Markdown files, and blog posts authored in English and Spanish.</p>
<p>What we will do is add the following things to the site:</p>
<ul>
<li>Localized routes for the home and blog posts,</li>
<li>A locale selector,</li>
<li>Translations,</li>
<li>Date formatting.</li>
</ul>
<p>Let’s go through each one together.</p>
Create Localized Routes
<p>First, we will need to create a localized route for each locale, i.e., route our English pages to paths with a <code>/en/</code> prefix and the Spanish pages to a path with a <code>/es/</code> prefix. So, for example, a path like <code>my-site.com/recipes/mac-and-cheese/</code> will be replaced with localized routes, like <code>my-site.com/en/recipes/mac-and-cheese/</code> for English and <code>my-site.com/recipes/es/mac-and-cheese/</code> for Spanish.</p>
<p>In Part 1, we used the <a href="https://www.gatsbyjs.com/plugins/gatsby-theme-i18n/"><code>gatsby-theme-i18n</code> plugin</a> to automatically add localized routes for each page, and it worked perfectly. However, to make our own version, we first must know what happens underneath the hood of that plugin.</p>
<p>What <code>gatsby-theme-i18n</code> does is modify the <code>createPages</code> process to create a localized version of each page. However, what exactly is <code>createPages</code>?</p>
<h3>How Plugins Create Pages</h3>
<p>When running <code>npm run build</code> in a fresh Gatsby site, you will see in the terminal what Gatsby is doing, and it looks something like this:</p>
<pre><code>success open and validate gatsby-configs - 0.062 s
success load plugins - 0.915 s
success onPreInit - 0.021 s
success delete html and css files from previous builds - 0.030 s
success initialize cache - 0.034 s
success copy gatsby files - 0.099 s
success onPreBootstrap - 0.034 s
success source and transform nodes - 0.121 s
success Add explicit types - 0.025 s
success Add inferred types - 0.144 s
success Processing types - 0.110 s
success building schema - 0.365 s
success createPages - 0.016 s
success createPagesStatefully - 0.079 s
success onPreExtractQueries - 0.025 s
success update schema - 0.041 s
success extract queries from components - 0.333 s
success write out requires - 0.020 s
success write out redirect data - 0.019 s
success Build manifest and related icons - 0.141 s
success onPostBootstrap - 0.164 s
⠀
info bootstrap finished - 6.932 s
⠀
success run static queries - 0.166 s — 3/3 20.90 queries/second
success Generating image thumbnails — 6/6 - 1.059 s
success Building production JavaScript and CSS bundles - 8.050 s
success Rewriting compilation hashes - 0.021 s
success run page queries - 0.034 s — 4/4 441.23 queries/second
success Building static HTML for pages - 0.852 s — 4/4 23.89 pages/second
info Done building in 16.143999152 sec
</code></pre>

<p>As you can see, Gatsby does a lot to ship your React components into static files. In short, it takes five steps:</p>
<ol>
<li>Source the node objects defined by your plugins on <code>gatsby-config.js</code> and the code in <code>gatsby-node.js</code>.</li>
<li>Create a schema from the <code>nodes</code> object.</li>
<li>Create the pages from your <code>/src/page</code> JavaScript files.</li>
<li>Run the GraphQL queries and inject the data on your pages.</li>
<li>Generate and bundle the static files into the public directory.</li>
</ol>
<p>And, as you may notice, plugins like <code>gatsby-theme-i18n</code> intervene in step three, specifically when pages are created on <code>createPages</code>:</p>
<pre><code>success createPages - 0.016 s
</code></pre>

<p>How exactly does <code>gatsby-theme-i18n</code> access <code>createPages</code>? Well, Gatsby exposes an <code>onCreatePage</code> event handler on the <code>gatsby-node.js</code> to read and modify pages when they are being created.</p>
<p>Learn more about <a href="https://www.gatsbyjs.com/docs/creating-and-modifying-pages/">creating and modifying pages</a> and the <a href="https://www.gatsbyjs.com/docs/conceptual/overview-of-the-gatsby-build-process/">Gatsby building process</a> over at Gatsby’s official documentation.</p>
<h3>Using <code>onCreatePage</code></h3>
<p>The <code>createPages</code> process can be modified in the <code>gatsby-node.js</code> file through the <code>onCreatePage</code> API. In short, <code>onCreatePage</code> is a function that runs each time a page is created by Gatsby. Here’s how it looks:</p>
<pre><code>// ./gatsby-node.js
exports.onCreatePage = ({ page, actions }) =&gt; {
  const { createPage, deletePage } = actions;
  // etc.
};
</code></pre>

<p>It takes two parameters inside an object:</p>
<ul>
<li><strong><code>page</code></strong> holds the information of the page that’s going to be created, including its context, path, and the React component associated with it.</li>
<li><strong><code>actions</code></strong> holds several methods for editing the site’s state. In the Gatsby docs, you can see <a href="https://www.gatsbyjs.com/docs/reference/config-files/actions/">all available methods</a>. For this example we’re making, we will be using two methods: <code>createPage</code> and <code>deletePage</code>, both of which take a <code>page</code> object as the only parameter and, as you might have deduced, they create or delete the page.</li>
</ul>
<p>So, if we wanted to add a new context to all pages, it would translate to deleting the pages being created and replacing them with new ones that have the desired context:</p>
<pre><code>exports.onCreatePage = ({ page, actions }) =&gt; {
  const { createPage, deletePage } = actions;

  deletePage(page);

  createPage({
    ...page,
    context: {
      ...page.context,
      category: `vegan`,
    },
  });
};
</code></pre>

<h3>Creating The Pages</h3>
<p>Since we need to create English and Spanish versions of each page, it would translate to deleting every page and creating two new ones, one for each locale. And to differentiate them, we will assign them a localized route by adding the locale at the beginning of their <code>path</code>.</p>
<p>Let’s start by creating a new <code>gatsby-node.js</code> file in the project’s root directory and adding the following code:</p>
<pre><code>// ./gatsby-node.js

const locales = ["en", "es"];

exports.onCreatePage = ({page, actions}) =&gt; {
  const {createPage, deletePage} = actions;

  deletePage(page);

  locales.forEach((locale) =&gt; {
    createPage({
      ...page,
      path: `${locale}${page.path}`,
    });
  });
};
</code></pre>

<p><strong>Note</strong>: <em>Restarting the development server is required to see the changes.</em></p>
<p>Now, if we go to <code>http://localhost:8000/en/</code> or <code>http://localhost:8000/es/</code>, we will see all our content there. However, there is a big caveat. Specifically, if we head back to the non-localized routes — like <code>http://localhost:8000/</code> or <code>http://localhost:8000/recipes/mac-and-cheese/</code> — Gatsby will throw a runtime error instead of the usual 404 page provided by Gatsby. This is because we deleted our 404 page in the process of deleting all of the other pages!</p>
<p>Well, the 404 page wasn’t <em>exactly</em> deleted because we can still access it if we go to <code>http://localhost:8000/en/404</code> or <code>http://localhost:8000/es/404</code>. However, we deleted the original 404 page and created two localized versions. Now Gatsby doesn’t know they are supposed to be 404 pages.</p>
<p>To solve it, we need to do something special to the 404 pages at <code>onCreatePage</code>.</p>
<p>Besides a <code>path</code>, every <code>page</code> object has another property called <code>matchPath</code> that Gatsby uses to match the page on the client side, and it is normally used as a fallback when the user reaches a non-existing page. For example, a <code>page</code> with a <code>matchPath</code> property of <code>/recipes/*</code> (notice the wildcard <code>*</code>) will be displayed on each route at <code>my-site.com/recipes/</code> that doesn’t have a page. This is useful for making personalized 404 pages depending on where the user was when they reached a non-existing page. For instance, social media could display a usual 404 page on <code>my-media.com/non-existing</code> but display an empty profile page on <code>my-media.com/user/non-existing</code>. In this case, we want to display a localized 404 page depending on whether or not the user was on <code>my-site.com/en/not-found</code> or <code>my-site.com/es/not-found</code>.</p>
<p>The good news is that we can modify the <code>matchPath</code> property on the 404 pages:</p>
<div>
<pre><code>// gatsby-node.js

const locales = [ "en", "es" ];

exports.onCreatePage = ({ page, actions }) =&gt; {
  const { createPage, deletePage } = actions;
  deletePage(page);
  locales.forEach((locale) =&gt; {
    const matchPath = page.path.match(/^\/404\/$/) ? (locale === "en" ? <code>/&amp;#42;</code> : <code>/${locale}/&amp;#42;</code>) : page.matchPath;
    createPage({
      ...page,
      path: <code>${locale}${page.path}</code>,
      matchPath,
    });
  });
};
</code></pre>
</div>

<p>This solves the problem, but what exactly did we do in <code>matchpath</code>? The value we are assigning to the <code>matchPath</code> is asking:</p>
<ul>
<li>Is the page path <code>/404/</code>?<ul>
<li>No: Leave it as-is.</li>
<li>Yes:<ul>
<li>Is the locale in English?<ul>
<li>Yes: Set it to match any route.</li>
<li>No: Set it to only match routes on that locale.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>This results in the English 404 page having a <code>matchPath</code> of <code>/*</code>, which will be our default 404 page; meanwhile, the Spanish version will have <code>matchPath</code> equal <code>/es/*</code> and will only be rendered if the user is on a route that begins with <code>/es/</code>, e.g., <code>my-site.com/es/not-found</code>. Now, if we restart the server and head to a non-existing page, we will be greeted with our usual 404 page.</p>
<p>Besides fixing the runtime error, doing leave us with the possibility of localizing the 404 page, which we didn’t achieve in Part 1 with the <code>gatsby-theme-i18n</code> plugin. That’s already a nice improvement we get by not using a plugin!</p>
Querying Localized Content
<p>Now that we have localized routes, you may notice that both <code>http://localhost:8000/en/</code> and <code>http://localhost:8000/es/</code> are querying English and Spanish blog posts. This is because we aren’t filtering our Markdown content on the page’s locale. We solved this in Part 1, thanks to <code>gatsby-theme-i18n</code> injecting the page’s locale on the context of each page, making it available to use as a query variable on the GraphQL query.</p>
<p>In this case, we can also add the locale into the page’s context in the <code>createPage</code> method:</p>
<div>
<pre><code>// gatsby-node.js

const locales = [ "en", "es" ];

exports.onCreatePage = ({page, actions}) =&gt; {
  const { createPage, deletePage } = actions;
  deletePage(page);
  locales.forEach((locale) =&gt; {
    const matchPath = page.path.match(/^\/404\/$/) ? (locale === "en" ? <code>/&amp;#42;</code> : <code>/${locale}/&amp;#42;</code>) : page.matchPath;
    createPage({
      ...page,
      path: <code>${locale}${page.path}</code>,
      context: {
        ...page.context,
        locale,
      },
      matchPath,
    });
  });
};
</code></pre>
</div>

<p><strong>Note</strong>: <em>Restarting the development server is required to see the changes.</em></p>
<p>From here, we can filter the content on both the homepage and blog posts, which we explained thoroughly in Part 1. This is the <code>index</code> page query:</p>
<pre><code>query IndexQuery($locale: String) {
  allMarkdownRemark(filter: {frontmatter: {locale: {eq: $locale}}}) {
    nodes {
      frontmatter {
        slug
        title
        date
        cover_image {
          image {
            childImageSharp {
              gatsbyImageData
            }
          }
          alt
        }
      }
    }
  }
}
</code></pre>

<p>And this is the <code>{markdownRemark.frontmatter__slug}.js</code> page query:</p>
<div>
<pre><code>query RecipeQuery($frontmatter__slug: String, $locale: String) {
  markdownRemark(frontmatter: {slug: {eq: $frontmatter__slug}, locale: {eq: $locale}}) {
    frontmatter {
      slug
      title
      date
      cover_image {
        image {
          childImageSharp {
            gatsbyImageData
          }
        }
        alt
      }
    }
    html
  }
}
</code></pre>
</div>

<p>Now, if we head to <code>http://localhost:8000/en/</code> or <code>http://localhost:8000/es/</code>, we will only see our English or Spanish posts, depending on which locale we are on.</p>
Creating Localized Links
<p>However, if we try to click on any recipe, it will take us to a 404 page since the links are still pointing to the non-localized recipes. In Part 1, <code>gatsby-theme-i18n</code> gave us a <code>LocalizedLink</code> component that worked exactly like Gatsby’s <code>Link</code> but pointed to the current locale, so we will have to create a <code>LocalizedLink</code> component from scratch. Luckily is pretty easy, but we will have to make some preparation first.</p>
<h3>Setting Up A Locale Context</h3>
<p>For the <code>LocalizedLink</code> to work, we will need to know the page’s locale at all times, so we will create a new context that holds the current locale, then pass it down to each component. We can implement it on <code>wrapPageElement</code> in the <code>gatsby-browser.js</code> and <code>gatsby-ssr.js</code> Gatsby files. The <code>wrapPageElement</code> is the component that wraps our entire page element. However, remember that Gatsby recommends <a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapPageElement">setting context providers inside <code>wrapRootElement</code></a>, but in this case, only <code>wrapPageEement</code> can access the page’s context where the current locale can be found.</p>
<p>Let’s create a new directory at <code>./src/context/</code> and add a <code>LocaleContext.js</code> file in it with the following code:</p>
<pre><code>// ./src/context/LocaleContext.js

import * as React from "react";
import { createContext } from "react";

export const LocaleContext = createContext();
export const LocaleProvider = ({ locale, children }) =&gt; {
  return &lt;LocaleContext.Provider value={locale}&gt;{children}&lt;/LocaleContext.Provider&gt;;
};
</code></pre>

<p>Next, we will set the page’s context at <code>gatsby-browser.js</code> and <code>gatsby-ssr.js</code> and pass it down to each component:</p>
<pre><code>// ./gatsby-browser.js &amp; ./gatsby-ssr.js

import * as React from "react";
import { LocaleProvider } from "./src/context/LocaleContext";

export const wrapPageElement = ({ element }) =&gt; {
  const {locale} = element.props.pageContext;
  return &lt;LocaleProvider locale={locale}&gt;{element}&lt;/LocaleProvider&gt;;
};
</code></pre>

<p><strong>Note</strong>: <em>Restart the development server to load the new files.</em></p>
<h3>Creating <code>LocalizedLink</code></h3>
<p>Now let’s make sure that the locale is available in the <code>LocalizedLink</code> component, which we will create in the <code>./src/components/LocalizedLink.js</code> file:</p>
<pre><code>// ./src/components/LocalizedLink.js

import * as React from "react";
import { useContext } from "react";
import { Link } from "gatsby";
import { LocaleContext } from "../context/LocaleContext";

export const LocalizedLink = ({ to, children }) =&gt; {
  const locale = useContext(LocaleContext);
  return &lt;Link to={`/${locale}${to}`}&gt;{children}&lt;/Link&gt;;
};
</code></pre>

<p>We can use our <code>LocalizedLink</code> at <code>RecipePreview.js</code> and <code>404.js</code> just by changing the imports:</p>
<div>
<pre><code>// ./src/components/RecipePreview.js

import * as React from "react";
import { LocalizedLink as Link } from "./LocalizedLink";
import { GatsbyImage, getImage } from "gatsby-plugin-image";

export const RecipePreview = ({ data }) =&gt; {
  const { cover_image, title, slug } = data;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;Link to={<code>/recipes/${slug}</code>}&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
    &lt;/Link&gt;
  );
};
</code></pre>
</div>

<div>
<pre><code>// ./src/pages/404.js

import * as React from "react";
import { LocalizedLink as Link } from "../components/LocalizedLink";

const NotFoundPage = () =&gt; {
  return (
    &lt;main&gt;
      &lt;h1&gt;Page not found&lt;/h1&gt;
      &lt;p&gt;
        Sorry 😔 We were unable to find what you were looking for.
        &lt;br /&gt;
        &lt;Link to="/"&gt;Go Home&lt;/Link&gt;.
      &lt;/p&gt;
    &lt;/main&gt;
  );
};

export default NotFoundPage;
export const Head = () =&gt; &lt;title&gt;Not Found&lt;/title&gt;;
</code></pre>
</div>

Redirecting Users
<p>As you may have noticed, we deleted the non-localized pages and replaced them with localized ones, but by doing so, we left the non-localized routes empty with a 404 page. As we did in Part 1, we can solve this by setting up redirects at <code>gatbsy-node.js</code> to take users to the localized version. However, this time we will create a redirect for each page instead of creating a redirect that covers all pages.</p>
<p>These are the redirects from Part 1:</p>
<pre><code>// ./gatsby-node.js

exports.createPages = async ({ actions }) =&gt; {
  const { createRedirect } = actions;

  createRedirect({
    fromPath: `/*`,
    toPath: `/en/*`,
    isPermanent: true,
  });

  createRedirect({
    fromPath: `/*`,
    toPath: `/es/*`,
    isPermanent: true,
    conditions: {
      language: [`es`],
    },
  });
};

// etc.
</code></pre>

<p>These are the new localized redirects:</p>
<pre><code>// ./gatsby-node.js

exports.onCreatePage = ({ page, actions }) =&gt; {
  // Create localize version of pages...
  const { createRedirect } = actions;

  createRedirect({
    fromPath: page.path,
    toPath: `/en${page.path}`,
    isPermanent: true,
  });

  createRedirect({
    fromPath: page.path,
    toPath: `/es${page.path}`,
    isPermanent: true,
    conditions: {
      language: [`es`],
    },
  });
};

// etc.
</code></pre>

<p>We won’t see the difference right away since redirects don’t work in development, but if we don’t create a redirect for each page, the localized 404 pages won’t work in production. We didn’t have to do this same thing in Part 1 since <code>gatsby-theme-i18n</code> didn’t localize the 404 page the way we did.</p>
Changing Locales
<p>Another vital feature to add is a <strong>language selector component</strong> to toggle between the two locales. However, making a language selector isn’t completely straightforward because:</p>
<ol>
<li>We need to know the current page’s path, like <code>/en/recipes/pizza</code>,</li>
<li>Then extract the <code>recipes/pizza</code> part, and</li>
<li>Add the desired locale, getting <code>/es/recipes/pizza</code>.</li>
</ol>
<p>Similar to Part 1, we will have to access the page’s location information (URL, HREF, path, and so on) in all of our components, so it will be necessary to set up another context provider at the <code>wrapPageElement</code> function to pass down the <code>location</code> object through context on each page. A deeper explanation can be found in Part 1.</p>
<h3>Setting Up A Location Context</h3>
<p>First, we will create the location context at <code>./src/context/LocationContext.js</code>:</p>
<pre><code>// ./src/context/LocationContext.js

import * as React from "react";
import { createContext } from "react";

export const LocationContext = createContext();
export const LocationProvider = ({ location, children }) =&gt; {
  return &lt;LocationContext.Provider value={location}&gt;{children}&lt;/LocationContext.Provider&gt;;
};
</code></pre>

<p>Next, let’s pass the page’s <code>location</code> object to the provider’s <code>location</code> attribute on each Gatsby file:</p>
<pre><code>// ./gatsby-ssr.js &amp; ./gatsby-browser.js

import * as React from "react";
import { LocaleProvider } from "./src/context/LocaleContext";
import { LocationProvider } from "./src/context/LocationContext";

export const wrapPageElement = ({ element, props }) =&gt; {
  const { location } = props;
  const { locale } = element.props.pageContext;

  return (
    &lt;LocaleProvider locale={locale}&gt;
      &lt;LocationProvider location={location}&gt;{element}&lt;/LocationProvider&gt;
    &lt;/LocaleProvider&gt;
  );
};
</code></pre>

<h3>Creating An i18n Config</h3>
<p>For the next step, it will come in handy to create a file with all our i18n details, such as the locale code or the local name. We can do it in a new <code>config.js</code> file in a new <code>i18n/</code> directory in the root directory of the project.</p>
<pre><code>// ./i18n/config.js

export const config = [
  {
    code: "en",
    hrefLang: "en-US",
    name: "English",
    localName: "English",
  },

  {
    code: "es",
    hrefLang: "es-ES",
    name: "Spanish",
    localName: "Español",
  },
];
</code></pre>

<h3>The <code>LanguageSelector</code> Component</h3>
<p>The last thing is to remove the locale (i.e., <code>es</code> or <code>en</code>) from the path (e.g., <code>/es/recipes/pizza</code> or <code>/en/recipes/pizza</code>). Using the following simple but ugly regex, we can remove all the <code>/en/</code> and <code>/es/</code> at the beginning of the path:</p>
<pre><code>/(\/e(s|n)|)(\/*|)/
</code></pre>

<p>It’s important to note that the <strong>regex pattern only works for the <code>en</code> and <code>es</code> combination of locales</strong>.</p>
<p>Now we can create our <code>LanguageSelector</code> component at <code>./src/components/LanguageSelector.js</code>:</p>
<pre><code>// ./src/components/LanguageSelector.js

import * as React from "react";
import { useContext } from "react";
// 1
import { config } from "../../i18n/config";
import { Link } from "gatsby";
import { LocationContext } from "../context/LocationContext";
import { LocaleContext } from "../context/LocaleContext";

export const LanguageSelector = () =&gt; {
// 2
  const locale = useContext(LocaleContext);
// 3
  const { pathname } = useContext(LocationContext);
// 4
  const removeLocalePath = /(\/e(s|n)|)(\/*|)/;
  const pathnameWithoutLocale = pathname.replace(removeLocalePath, "");
// 5
  return (
    &lt;div&gt;
      { config.map(({code, localName}) =&gt; {
        return (
          code !== locale &amp;&amp; (
            &lt;Link key={code} to={`/${code}/${pathnameWithoutLocale}`}&gt;
              {localName}
            &lt;/Link&gt;
          )
        );
      }) }
    &lt;/div&gt;
);
};
</code></pre>

<p>Let’s break down what is happening in that code:</p>
<ol>
<li>We get our i18n configurations from the <code>./i18n/config.js</code> file instead of the <code>useLocalization</code> hook that was provided by the <code>gatsby-theme-i18n</code> plugin in Part 1.</li>
<li>We get the current locale through context.</li>
<li>We find the page’s current pathname through context, which is the part that comes after the domain (e.g., <code>/en/recipes/pizza</code>).</li>
<li>We remove the locale part of the pathname using the regex pattern (leaving just <code>recipes/pizza</code>).</li>
<li>We render a link for each available locale except the current one. So we check if the locale is the same as the page before rendering a common Gatsby <code>Link</code> to the desired locale.</li>
</ol>
<p>Now, inside our <code>gatsby-ssr.js</code> and <code>gatsby-browser.js</code> files, we can add our <code>LanguageSelector</code>, so it is available globally on the site at the top of all pages:</p>
<pre><code>// ./gatsby-ssr.js &amp; ./gatsby-browser.js

import * as React from "react";
import { LocationProvider } from "./src/context/LocationContext";
import { LocaleProvider } from "./src/context/LocaleContext";
import { LanguageSelector } from "./src/components/LanguageSelector";

export const wrapPageElement = ({ element, props }) =&gt; {
  const { location } = props;
  const { locale } = element.props.pageContext;

  return (
    &lt;LocaleProvider locale={locale}&gt;
      &lt;LocationProvider location={location}&gt;
        &lt;LanguageSelector /&gt;
        {element}
      &lt;/LocationProvider&gt;
    &lt;/LocaleProvider&gt;
  );
};
</code></pre>



Localizing Static Content
<p>The last thing to do would be to localize the static content on our site, like the page titles and headers. To do this, we will need to save our translations in a file and find a way to display the correct one depending on the page’s locale.</p>
<h3>Page Body Translations</h3>
<p>In Part 1, we used the <code>react-intl</code> package for adding our translations, but we can do the same thing from scratch. First, we will need to create a new <code>translations.js</code> file in the <code>/i18n</code> folder that holds all of our translations. </p>
<p>We will create and export a <code>translations</code> object with two properties: <code>en</code> and <code>es</code>, which will hold the translations as strings under the same property name.</p>
<div>
<pre><code>// ./i18n/translations.js

export const translations = {
  en: {
    index_page_title: "Welcome to my English cooking blog!",
    index_page_subtitle: "Written by Juan Diego Rodríguez",
    not_found_page_title: "Page not found",
    not_found_page_body: "😔 Sorry, we were unable find what you were looking for.",
    not_found_page_back_link: "Go Home",
  },
  es: {
    index_page_title: "¡Bienvenidos a mi blog de cocina en español!",
    index_page_subtitle: "Escrito por Juan Diego Rodríguez",
    not_found_page_title: "Página no encontrada",
    not_found_page_body: "😔 Lo siento, no pudimos encontrar lo que buscabas",
    not_found_page_back_link: "Ir al Inicio",
  },
};
</code></pre>
</div>

<p>We know the page’s locale from the <code>LocaleContext</code> we set up earlier, so we can load the correct translation using the desired property name. </p>
<p>The cool thing is that no matter how many translations we add, we won’t bloat our site’s bundle size since Gatsby builds the entire app into a static site.</p>
<pre><code>// ./src/pages/index.js

// etc.

import { LocaleContext } from "../context/LocaleContext";
import { useContext } from "react";
import { translations } from "../../i18n/translations";

const IndexPage = ({ data }) =&gt; {
  const recipes = data.allMarkdownRemark.nodes;
  const locale = useContext(LocaleContext);

  return (
    &lt;main&gt;
      &lt;h1&gt;{translations[locale].index_page_title}&lt;/h1&gt;
      &lt;h2&gt;{translations[locale].index_page_subtitle}&lt;/h2&gt;
      {recipes.map(({frontmatter}) =&gt; {
        return &lt;RecipePreview key={frontmatter.slug} data={frontmatter} /&gt;;
      })}
    &lt;/main&gt;
  );
};

// etc.
</code></pre>

<div>
<pre><code>// ./src/pages/404.js

// etc.

import { LocaleContext } from "../context/LocaleContext";
import { useContext } from "react";
import { translations } from "../../i18n/translations";

const NotFoundPage = () =&gt; {
  const locale = useContext(LocaleContext);

  return (
    &lt;main&gt;
      &lt;h1&gt;{translations[locale].not_found_page_title}&lt;/h1&gt;
      &lt;p&gt;
        {translations[locale].not_found_page_body} &lt;br /&gt;
        &lt;Link to="/"&gt;{translations[locale].not_found_page_back_link}&lt;/Link&gt;.
      &lt;/p&gt;
    &lt;/main&gt;
  );
};

// etc.
</code></pre>
</div>

<p><strong>Note</strong>: <em>Another way we can access the <code>locale</code> property is by using <code>pageContext</code> in the page <code>props</code>.</em></p>
<h3>Page Title Translations</h3>
<p>We ought to localize the site’s page titles the same way we localized our page content. However, in <a href="https://www.smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/#gatsby-theme-i18n">Part 1</a>, we used <code>react-helmet</code> for the task since the <code>LocaleContext</code> isn’t available at the <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/">Gatsby Head API</a>. So, to complete this task without resorting to a third-party plugin, we will take a different path. We’re unable to access the locale through the <code>LocaleContext</code>, but as I noted above, we can still get it with the <code>pageContext</code> property in the page <code>props</code>.</p>
<pre><code>// ./src/page/index.js

// etc.

export const Head = ({pageContext}) =&gt; {
  const {locale} = pageContext;
  return &lt;title&gt;{translations[locale].index_page_title}&lt;/title&gt;;
};

// etc.
</code></pre>

<pre><code>// ./src/page/404.js

// etc.

export const Head = ({pageContext}) =&gt; {
  const {locale} = pageContext;
  return &lt;title&gt;{translations[locale].not_found_page_title}&lt;/title&gt;;
};

// etc.
</code></pre>

Formatting
<p>Remember that i18n also covers formatting numbers and dates depending on the current locale. We can use the <code>Intl</code> object from the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl">JavaScript Internationalization API</a>. The <code>Intl</code> object holds several constructors for formatting numbers, dates, times, plurals, and so on, and it’s globally available in JavaScript.</p>
<p>In this case, we will use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat"><code>Intl.DateTimeFormat</code> constructor</a> to localize dates in blog posts. It works by creating a new <code>Intl.DateTimeFormat</code> object with the locale as its parameter:</p>
<pre><code>const DateTimeFormat = new Intl.DateTimeFormat("en");
</code></pre>

<p>The new <code>Intl.DateTimeFormat</code> and other <code>Intl</code> instances have several methods, but the main one is the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format"><code>format</code> method</a>, which takes a <code>Date</code> object as a parameter.</p>
<pre><code>const date = new Date();
console.log(new Intl.DateTimeFormat("en").format(date)); // 4/20/2023
console.log(new Intl.DateTimeFormat("es").format(date)); // 20/4/2023
</code></pre>

<p>The <code>format</code> method takes an <code>options</code> object as its second parameter, which is used to customize how the date is displayed. In this case, the <code>options</code> object has a <code>dateStyle</code> property to which we can assign <code>"full"</code>, <code>"long"</code>, <code>"medium"</code>, or <code>"short"</code> values depending on our needs:</p>
<pre><code>const date = new Date();

console.log(new Intl.DateTimeFormat("en", {dateStyle: "short"}).format(date)); // 4/20/23
console.log(new Intl.DateTimeFormat("en", {dateStyle: "medium"}).format(date)); // Apr 20, 2023
console.log(new Intl.DateTimeFormat("en", {dateStyle: "long"}).format(date)); // April 20, 2023
console.log(new Intl.DateTimeFormat("en", {dateStyle: "full"}).format(date)); // Thursday, April 20, 2023
</code></pre>

<p>In the case of our blog posts publishing date, we will set the <code>dateStyle</code> to <code>"long"</code>.</p>
<div>
<pre><code>// ./src/pages/recipes/{markdownRemark.frontmatter__slug}.js

// etc.

const RecipePage = ({ data, pageContext }) =&gt; {
  const { html, frontmatter } = data.markdownRemark;
  const { title, cover_image, date } = frontmatter;
  const { locale } = pageContext;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;main&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;p&gt;{new Intl.DateTimeFormat(locale, { dateStyle: "long" }).format(new Date(date))}&lt;/p&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
      &lt;p dangerouslySetInnerHTML={{__html: html}}&gt;&lt;/p&gt;
    &lt;/main&gt;
  );
};

// etc.
</code></pre>
</div>

Conclusion
<p>And just like that, we reduced the need for several i18n plugins to a grand total of zero. And we didn’t even lose any functionality in the process! If anything, our hand-rolled solution is actually more robust than the system of plugins we cobbled together in <a href="https://www.smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/">Part 1</a> because we now have localized 404 pages.</p>
<p>That said, both approaches are equally valid, but in times when Gatsby plugins are unsupported in some way or conflict with other plugins, it is sometimes better to create your own i18n solution. That way, you don’t have to worry about plugins that are outdated or left unmaintained. And if there is a conflict with another plugin, you control the code and can fix it. I’d say these sorts of benefits greatly outweigh the obvious convenience of installing a ready-made, third-party solution.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Juan Diego Rodríguez)</author>
      <enclosure url="http://files.smashing.media/articles/gatsby-headaches-i18n-part-2/gatsby-headaches-i18n-part-2.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[What Was SmashingConf In San Franciso Like?]]></title>
      <link>https://smashingmagazine.com/2023/06/smashingconf-sanfrancisco2023-recap/</link>
      <guid>https://smashingmagazine.com/2023/06/smashingconf-sanfrancisco2023-recap/</guid>
      <pubDate>Fri, 16 Jun 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[One way of getting a more behind-the-scenes experience of any Smashing event is to apply as a volunteer, and Ren did just that! The SmashingConf team organized a conference in good ol’ San Francisco this year, and here’s pretty much how it went down.]]></description>
      <content:encoded><![CDATA[<p>“Give them sweet memories.”</p>
<p>It was an unexpected suggestion from one of the Smashing event organizers when I asked for guidance on this article. But then, so much of the week had been unexpected. As a baby dev, volunteering at industry events is a no-brainer; I’ve been to nine this year, and this Smashing Conference has definitely been the standout. </p>
<p>There was none of the frenzied desperation that characterizes so many conferences; rather, the atmosphere was <strong>relaxed and casual</strong>. I talked to anyone who didn’t actively flee my approach, so by the end of the week, I’d spoken with guests, speakers, sponsors, fellow volunteers, catering staff, and the bouncer at the afterparty. Most people described the week as “fun” and “intimate,” not what one usually expects from a tech conference, although returning guests clearly did expect it.</p>
<p>I believe this pleasant expectation, this trust in Smashing to create something good, was the foundation of the get-together-with-friends vibe at the event. First-timers (myself included) were welcomed and soon made a happy part of the community. Many solo attendees ended the week with the intention of returning next year with their entire team in tow.</p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-volunteers.jpg" /></p>
<p>A significant reason for this welcoming feeling was the schedule. Speakers were arranged in <strong>a single track</strong>, on a single stage, thus avoiding the dreaded either/or dilemma and relieving guests and speakers alike of the need to rush around in search of their next session. Breaks were long enough to enjoy lunch at a relaxed pace and to socialize — I even spotted a couple of impromptu chess matches in the lobby.</p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-speaker-on-stage.jpg" /> </p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-una-kravets-vitaly.jpg" /></p>
<p>For those who wished to continue learning over sandwiches and orzo, there were optional lunch sessions held in the workshop building. These sessions were well-attended, and it was heartening to see such <strong>honest enthusiasm</strong> for the subject matter.</p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-lunchtime-sessions.jpg" /></p>
<p>The <strong>speakers were very accessible</strong> — everyone loved how they were happy to meet, not just for fist bumps but for meaningful conversations. I overheard a group squealing like K-Pop fans about the excellent chat they’d had with their favorite speaker.</p>
<p>As a volunteer, it wasn’t always feasible to sit in the theatre and enjoy the talks in person, but it turned out that missing content wasn’t a concern: <strong>presentations were streamed live</strong> in the lobby, complete with closed captioning.</p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-attentdees-speaker.jpg" /></p>
<p>Presentation topics seemed to have been thoughtfully curated, such that hardly anyone could settle on a single favorite. For the familiar topics, there was professional eagerness. For the unfamiliar ones, there was first polite interest, then appreciation. The crowd always emerged for caffeine and snacks <strong>eager to gather and talk</strong> about their recent revelations.</p>
<p>I’ve personally heard from several people who are already trying out ideas they haven’t heard of before.</p>
<blockquote>“I didn’t know [frequently-used tech] could do all that!”</blockquote>

<p>As for the hands-on workshops, I actually heard someone describe these <strong>deep dive sessions</strong> as “magic.” Workshop topics were practical and, one could argue, essential, including accessibility, flexibility, performance, and more. The breakroom chatter sounded like a huge improv troupe riffing on the theme of <em>shameless plugs for workshops</em>.</p>
<blockquote>“I can’t wait to use this at work — this is going to make [task I don’t understand yet] so much faster!”</blockquote>

<blockquote>“I can’t believe how much I’m learning in just a few hours!”</blockquote>

<p>It was amusing, and exciting.</p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-workshop-carie-fisher.jpg" /></p>
<p>If the speaker presentations, lunch sessions, and full-day workshops weren’t enough for the lifelong learners in attendance, the conference also featured <strong>Jam Sessions</strong> — an evening of dinner, drinks, and “lightning talks” designed to spark curiosity and interest in fascinating mini-topics. I’m grateful to have been able to present the closing talk on “Developing Emotional Resilience” that night, and if you’re wondering whether you should give a talk of your own next time, the answer is a resounding YES.</p>
<p>Beyond all this quality content, the event organizers had also planned a number of purely <strong>fun activities</strong>. A Golden Gate 5k kicked off each morning and attracted a dozen of the cheeriest faces I’ve seen on this side of the bridge at any hour. Alcatraz, sailboats, and sea lion pups completed the quintessential San Francisco summer scene (the freezing winds were also quintessential San Francisco summer).</p>
<p><img src="https://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco-2023-morning-run.jpg" /></p>
<p>As the only Bay Area native volunteer, I had the honor of leading the photo walk around the picturesque Presidio neighborhood. I’d been expecting a group size comparable to the morning jogs, but over thirty determined photographers showed up for the tour. Together, <strong>we visited several popular destinations</strong> and braved the famous Lyon Street steps, but the crowd favorite had to be the Yoda fountain at Lucasfilm. Nerds.</p>
<p>After the first conference day, a good crowd met up for the afterparty at Emporium, where drink tickets and game tokens were plentiful. Between pinball, arcade games, and seemingly endless other entertainments, the party was a hit with the night owls.</p>
<p>The Smashing organizers really wanted people to enjoy themselves, and even a bookish misanthrope like me couldn’t help but have a great time. Many of the chattiest people I met that week later confessed, in nearly the exact same words:</p>
<blockquote>“You know, I’m actually an introvert. I usually dread social events — but it feels so comfortable here!”</blockquote>

<p>I had to agree. Thanks to early access to the Smashing Slack channel, we were able to get acquainted in advance and meet in person as not-quite-strangers. More than that, the emphasis on <strong>kindness and open-mindedness</strong> seemed to attract the loveliest people. </p>
<p>I made more friends in those few days than I had in my whole adult life in the same city. In the week following the conference, I’ve had brunch with an East Coast engineer, lunch and an office tour with a San Francisco team, a laugh-filled hour-long video call with an exec in Uruguay, and I’ve been invited to a group project with an energetic pack of devs dispersed across the country, but connected by our love of coding and cats. I’ve exchanged recipes with a Senior Engineer, book recommendations with an Engineering Manager, and Instagram handles with enough people to start our own mid-sized company. I wonder what kinds of connections others were able to make!</p>
<p>In terms of networking, Smashing was unparalleled, yet it felt like we didn’t “network” at all. <strong>We certainly learned a lot</strong>, and we have some new LinkedIn connections, but unexpectedly, we made honest-to-goodness friends. As far as I’m concerned, that’s more than a sweet memory. It’s a sweet beginning!</p>
<p>If you’d like to join the SmashingConf team next time, feel free to <a href="https://smashingconf.com/scholarship-volunteering/#volunteering-for-smashingconf">apply as a volunteer yourself</a> anytime. There are even <a href="https://smashingconf.com/scholarship-volunteering/#discount-for-students-and-non-profits">discounts for students and non-profits</a> available — all you need to do is reach out to the team!</p>
<ul>
<li><a href="https://smashingconf.com/freiburg-2023?_ga=2.248184583.1699750462.1686899594-1914980953.1686899594">SmashingConf Freiburg</a> 🇩🇪 (in-person + online, <strong>Sep 4–6</strong>) with adventures into design systems, accessibility, CSS, JS and web performance.</li>
<li><a href="https://smashingconf.com/antwerp-2023?_ga=2.21609275.1699750462.1686899594-1914980953.1686899594">SmashingConf Antwerp</a> 🇧🇪 (<strong>Oct 9–11</strong>), on design systems, usability, product design and complex UI challenges.</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Ren Chen)</author>
      <enclosure url="http://files.smashing.media/articles/smashingconf-sanfrancisco2023-recap/smashingconf-sanfrancisco2023-recap.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Meet Codux: The React Visual Editor That Improves Developer Experience]]></title>
      <link>https://smashingmagazine.com/2023/06/codux-react-visual-editor-improves-developer-experience/</link>
      <guid>https://smashingmagazine.com/2023/06/codux-react-visual-editor-improves-developer-experience/</guid>
      <pubDate>Thu, 15 Jun 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[[Codux](https://codux.hopp.to/smashing) is a new visual IDE brought to you by the fine folks over at[ Wix](https://www.wix.com/). It’s got a lot of low-code features that level the playing field for app development but is really designed for React developers. How so, you ask? That’s what we’re going to explore in this article.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.wix.com/">Wix</a></p>
<p>Personally, I get tired of the antics at the start of any new project. I’m a contractor, too, so there’s always some new dependency I need to adopt, config files to force me to write the way a certain team likes, and deployment process I need to plug into. It’s never a fire-up-and-go sort of thing, and it often takes the better part of a working day to get it all right.</p>
<p>There are a lot of moving pieces to a project, right? Everything — from integrating a framework and establishing a component library to collaboration and deployments — is a separate but equally important part of your IDE. If you’re like me, jumping between apps and systems is something you get used to. But honestly, it’s an act of Sisyphus rolling the stone up the mountain each time, only to do it again on the next project.</p>
<p>That’s the setup for what I think is a pretty darn good approach to streamline this convoluted process in a way that supports any common project structure and is capable of enhancing it with visual editing capabilities. <a href="https://codux.hopp.to/smashing">It’s called Codux</a>, and if you stick with me for a moment, I think you’ll agree that Codux could be the one-stop shop for everything you need to build production-ready React apps.</p>
Codux is More “Your-Code” Than "Low-Code"
<p>I know, I know. <em>"Yay, another visual editor!"</em> says no one, ever. The planet is already full of those, and they’re really designed to give folks developer superpowers without actually doing any development.</p>
<p>That’s so not the case with Codux. There are indeed a lot of "low-code" affordances that could empower non-developers, but that’s not the headlining feature of Codux or really who or what it caters to. Instead, Codux is a fully-integrated IDE that provides the bones of your project while improving the developer experience instead of abstracting it away.</p>
<p>Do you use CodePen? What makes it so popular (and great to use) is that it "just" works. It combines frameworks, preprocessors, a live rendering environment, and modern build tools into a single interface that does all the work on "Save". But I still get to write code in a single place, the way I like it.</p>
<p>I see Codux a lot like that. But bigger. Not bigger in the sense of more complicated, but bigger in that it is more integrated than frameworks and build tools. It _is_ your framework. It _is_ your component library. It _is_ your build process. And it just so happens to have incredibly powerful visual editing controls that are fully integrated with your code editor.</p>
<p><img src="https://files.smashing.media/articles/codux-react-visual-editor-improves-developer-experience/codux-new-project.png" /></p>
<p>That’s why it makes more sense to call Codux “your code” instead of the typical low-code or no-code visual editing tools. Those are designed for non-developers. Codux, on the other hand, is made <em>for developers</em>.</p>
<p>In fact, here’s a pretty fun thing to do. Open a component file from your project in VS Code and put the editor window next to the Codux window open to the same component. Make a small CSS change or something and watch both the preview rendering <em>and</em> code update instantly in Codux.</p>
<p><img src="https://files.smashing.media/articles/codux-react-visual-editor-improves-developer-experience/cloudcash-screenshot.png" /></p>
<p>That’s just one of those affordances that really polish up the developer experience. Anyone else might overlook something like this, but as a developer, you know how much saved time can add up with something like this.</p>
Code, Inspect And Debug Together At Last
<p>There are a few other affordances available when selecting an element on the interactive stage on Codux:</p>
<ul>
<li>A <strong>style panel</strong> for editing CSS and trying different layouts. And, again, changes are made in real-time, both in the rendered preview and in <em>your</em> code, which is visible to you all the time — whether directly in Codux or in your IDE. </li>
<li>A <strong>property panel</strong> that provides easy access to all the selected properties of a component with visual controllers to modify them (and see the changes reflected directly in the code)</li>
<li>An <strong>environment panel</strong> that provides you with control over the rendering environment of the component, such as the screen or canvas size, as well as the styling for it.</li>
</ul>
<p><img src="https://files.smashing.media/articles/codux-react-visual-editor-improves-developer-experience/cloudcash-weekly-sumup.png" /></p>
Maybe Give Codux A Spin
<p>It’s pretty rad that I can fire up a single app to access my component library, code, documentation, live previews, DOM inspector, and version control. If you would’ve tried explaining this to me <em>before</em> seeing Codux, I would’ve said that’s too much for one app to handle; it’d be a messy UI that’s more aspiration than it is a liberating center of development productivity.</p>
<p>No lying. That’s exactly what I thought when the Wix team told me about it. I didn’t even think it was a good idea to pack all that in one place.</p>
<p>But they did, and I was dead wrong. Codux is pretty awesome. And apparently, it will be even more awesome because the<a href="https://www.codux.com/faq"> FAQ talks about a bunch of new features</a> in the works, things like supporting full frameworks. The big one is an online version that will completely remove the need to set up development environments every time someone joins the team, or a stakeholder wants access to a working version of the app. Again, this is all in the works, but it goes to show how Codux is all about improving the <em>developer experience</em>.</p>
<p>And it’s not like you’re building a Wix site with it. Codux is its own thing — something that Wix built to get rid of their own pain points in the development process. It just so happens that their frustrations are the same that many of us in the community share, which makes Codux a legit consideration for any developer or team.</p>
<p>Oh, and it’s free. You can <a href="https://codux.hopp.to/smashing">download it right now</a>, and it supports Windows, Mac, and Linux. In other words, you can give it a spin without buying into anything.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Geoff Graham)</author>
      <enclosure url="http://files.smashing.media/articles/codux-react-visual-editor-improves-developer-experience/codux-react-visual-editor-improves-developer-experience.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[How To Build Server-Side Rendered (SSR) Svelte Apps With SvelteKit]]></title>
      <link>https://smashingmagazine.com/2023/06/build-server-side-rendered-svelte-apps-sveltekit/</link>
      <guid>https://smashingmagazine.com/2023/06/build-server-side-rendered-svelte-apps-sveltekit/</guid>
      <pubDate>Wed, 14 Jun 2023 11:00:00 GMT</pubDate>
      <description><![CDATA[SvelteKit is a framework for building apps using Svelte. In this article, Sriram shows you how to build a server-side rendered (SSR) SvelteKit application and deploy it to Netlify by following this step-by-step guide.]]></description>
      <content:encoded><![CDATA[<p>I’m not interested in starting a turf war between server-side rendering and client-side rendering. The fact is that SvelteKit supports both, which is one of the many perks it offers right out of the box. The server-side rendering paradigm is not a new concept. It means that the client (i.e., the user’s browser) sends a request to the server, and the server responds with the data and markup for that particular page, which is then rendered in the user’s browser.</p>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/11-what-is-ssr.png" /></p>
<p>To build an SSR app using the primary <a href="https://svelte.dev">Svelte</a> framework, you would need to maintain two codebases, one with the server running in Node, along with with some templating engine, like <a href="https://handlebarsjs.com">Handlebars</a> or <a href="http://mustache.github.io">Mustache</a>. The other application is a client-side Svelte app that fetches data from the server.</p>
<p>The approach we’re looking at in the above paragraph isn’t without disadvantages. Two that immediately come to mind that I’m sure you thought of after reading that last paragraph:</p>
<ol>
<li>The application is more complex because we’re effectively maintaining two systems.</li>
<li>Sharing logic and data between the client and server code is more difficult than fetching data from an API on the client side.</li>
</ol>
SvelteKit Simplifies The Process
<p>SvelteKit streamlines things by handling of complexity of the server and client on its own, allowing you to focus squarely on developing the app. There’s no need to maintain two applications or do a tightrope walk sharing data between the two.</p>
<p>Here’s how:</p>
<ul>
<li>Each route can have a <code>page.server.ts</code> file that’s used to run code in the server and return data seamlessly to your client code.</li>
<li>If you use TypeScript, SvelteKit auto-generates types that are shared between the client and server.</li>
<li>SvelteKit provides an option to select your rendering approach based on the route. You can choose SSR for some routes and CSR for others, like maybe your admin page routes.</li>
<li>SvelteKit also supports routing based on a file system, making it much easier to define new routes than having to hand-roll them yourself.</li>
</ul>
SvelteKit In Action: Job Board
<p>I want to show you how streamlined the SvelteKit approach is to the traditional way we have been dancing between the SSR and CSR worlds, and I think there’s no better way to do that than using a real-world example. So, what we’re going to do is build a job board — basically a list of job items — while detailing SvelteKit’s role in the application.</p>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/1-job-listing-home-page.png" /></p>
<p>When we’re done, what we’ll have is an app where SvelteKit fetches the data from a JSON file and renders it on the server side. We’ll go step by step.</p>
First, Initialize The SvelteKit Project
<p>The official SvelteKit docs already do a great job of explaining how to set up a new project. But, in general, we start any SvelteKit project in the command line with this command:</p>
<pre><code>npm create svelte@latest job-list-ssr-sveltekit
</code></pre>

<p>This command creates a new project folder called <code>job-list-ssr-sveltekit</code> on your machine and initializes Svelte and SvelteKit for us to use. But we don’t stop there — we get prompted with a few options to configure the project:</p>
<ol>
<li>First, we select a SvelteKit template. We are going to stick to using the basic Skeleton Project template.</li>
<li>Next, we can enable type-checking if you’re into that. Type-checking provides assistance when writing code by watching for bugs in the app’s data types. I’m going to use the “TypeScript syntax” option, but you aren’t required to use it and can choose the “None” option instead.</li>
</ol>
<p>There are additional options from there that are more a matter of personal preference:</p>
<ul>
<li><a href="https://eslint.org">ESLint</a> to enforce code consistency,</li>
<li><a href="https://prettier.io">Prettier</a> to clean up code formatting,</li>
<li><a href="https://playwright.dev">Playwright</a> for browser testing locally,</li>
<li><a href="https://vitest.dev">Vitest</a> for unit testing.</li>
</ul>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/2-project-init.png" /></p>
<p>If you are familiar with any of these, you can add them to the project. We are going to keep it simple and not select anything from the list since what I really want to show off is the app architecture and how everything works together to get data rendered by the app.</p>
<p>Now that we have the template for our project ready for us let’s do the last bit of setup by installing the dependencies for Svelte and SvelteKit to do their thing:</p>
<pre><code>cd job-listing-ssr-sveltekit
npm install
</code></pre>

<p>There’s something interesting going on under the hood that I think is worth calling out:</p>
<h3>Is SvelteKit A Dependency?</h3>
<p>If you are new to Svelte or SvelteKit, you may be pleasantly surprised when you open the project’s <code>package.json</code> file. Notice that the SvelteKit is listed in the <code>devDependencies</code> section. The reason for that is Svelte (and, in turn, SvelteKit) acts like a compiler that takes all your <code>.js</code> and <code>.svelte</code> files and converts them into optimized JavaScript code that is rendered in the browser.</p>
<p>This means the Svelte package is actually unnecessary when we deploy it to the server. That’s why it is not listed as a dependency in the package file. The final bundle of our job board app is going to contain just the app’s code, which means the <strong>size of the bundle is way smaller and loads faster than the regular Svelte-based architecture</strong>.</p>
<p>Look at how tiny and readable the <code>package-json</code> file is!</p>
<div>
<pre><code>{
    "name": "job-listing-ssr-sveltekit",
    "version": "0.0.1",
    "private": true,
    "scripts": {
        "dev": "vite dev",
        "build": "vite build",
        "preview": "vite preview",
        "check": "svelte-kit sync &amp;&amp; svelte-check --tsconfig ./tsconfig.json",
        "check:watch": "svelte-kit sync &amp;&amp; svelte-check --tsconfig ./tsconfig.json --watch"
    },
    "devDependencies": {
        "@sveltejs/adapter-auto": "^2.0.0",
        "@sveltejs/kit": "^1.5.0",
        "svelte": "^3.54.0",
        "svelte-check": "^3.0.1",
        "tslib": "^2.4.1",
        "typescript": "^4.9.3",
        "vite": "^4.0.0"
    },
    "type": "module"
}
</code></pre>
</div>

<p>I really find this refreshing, and I hope you do, too. Seeing a big list of packages tends to make me nervous because all those moving pieces make the entirety of the app architecture feel brittle and vulnerable. The concise SvelteKit output, by contrast, gives me much more confidence.</p>
Creating The Data
<p>We need data coming from somewhere that can inform the app on what needs to be rendered. I mentioned earlier that we would be placing data in and pulling it from a JSON file. That’s still the plan.</p>
<p>As far as the structured data goes, what we need to define are properties for a job board item. Depending on your exact needs, there could be a lot of fields or just a few. I’m going to proceed with the following:</p>
<ul>
<li>Job title,</li>
<li>Job description,</li>
<li>Company Name,</li>
<li>Compensation.</li>
</ul>
<p>Here’s how that looks in JSON:</p>
<pre><code>[{
    "job_title": "Job 1",
    "job_description": "Very good job",
    "company_name": "ABC Software Company",
    "compensation_per_year": "$40000 per year"
}, {
    "job_title": "Job 2",
    "job_description": "Better job",
    "company_name": "XYZ Software Company",
    "compensation_per_year": "$60000 per year"
}]
</code></pre>

<p>Now that we’ve defined some data let’s open up the main project folder. There’s a sub-directory in there called <code>src</code>. We can open that and create a new folder called <code>data</code> and add the JSON file we just made to it. We will come back to the JSON file when we work on fetching the data for the job board.</p>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/3-json-file.png" /></p>
Adding TypeScript Model
<p>Again, TypeScript is completely optional. But since it’s so widely used, I figure it’s worth showing how to set it up in a SvelteKit framework.</p>
<p>We start by creating a new <code>models.ts</code> file in the project’s <code>src</code> folder. This is the file where we define all of the data types that can be imported and used by other components and pages, and TypeScript will check them for us.</p>
<p>Here’s the code for the <code>models.ts</code> file:</p>
<pre><code>export type JobsList = JobItem[]

export interface JobItem {
  job_title: string
  job_description: string
  company_name: string
  compensation_per_year: string
}
</code></pre>

<p>There are two data types defined in the code:</p>
<ol>
<li><code>JobList</code> contains the array of job items.</li>
<li><code>JobItem</code> contains the job details (or properties) that we defined earlier.</li>
</ol>
The Main Job Board Page
<p>We’ll start by developing the code for the main job board page that renders a list of available job items. Open the <code>src/routes/+page.svelte</code> file, which is the main job board. Notice how it exists in the <code>/src/routes</code> folder? That’s the <strong>file-based routing system</strong> I referred to earlier when talking about the benefits of SvelteKit. The name of the file is automatically generated into a route. That’s a real DX gem, as it saves us time from having to code the routes ourselves and maintaining more code.</p>
<p>While <code>+page.svelte</code> is indeed the main page of the app, it’s also the template for any generic page in the app. But we can create a separation of concerns by adding more structure in the <code>/scr/routes</code> directory with more folders and sub-folders that result in different paths. SvelteKit’s docs have all the information you need for <a href="https://kit.svelte.dev/docs/routing#page">routing and routing conventions</a>.</p>
<p>This is the markup and styles we’ll use for the main job board:</p>
<pre><code>&lt;div class="home-page"&gt;
  &lt;h1&gt;Job Listing Home page&lt;/h1&gt;
&lt;/div&gt;

&lt;style&gt;
  .home-page {
    padding: 2rem 4rem;
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
  }
&lt;/style&gt;
</code></pre>

<p>Yep, this is super simple. All we’re adding to the page is an <code>&lt;h1&gt;</code> tag for the page title and some light CSS styling to make sure the content is centered and has some nice padding for legibility. I don’t want to muddy the waters of this example with a bunch of opinionated markup and styles that would otherwise be a distraction from the app architecture.</p>
Run The App
<p>We’re at a point now where we can run the app using the following in the command line:</p>
<pre><code>npm run dev -- --open
</code></pre>

<p>The <code>-- --open</code> argument automatically opens the job board page in the browser. That’s just a small but nice convenience. You can also navigate to the URL that the command line outputs.</p>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/4-initial-project-run.png" /></p>
The Job Item Component
<p>OK, so we have a main job board page that will be used to list job items from the data fetched by the app. What we need is a new component specifically for the jobs themselves. Otherwise, all we have is a bunch of data with no instructions for how it is rendered.</p>
<p>Let’s take of that by opening the <code>src</code> folder in the project and creating a new sub-folder called <code>components</code>. And in that new <code>/src/components</code> folder, let’s add a new Svelte file called <code>JobDisplay.svelte</code>.</p>
<p>We can use this for the component’s markup and styles:</p>
<pre><code>&lt;script lang="ts"&gt;
  import type { JobItem } from "../models";
  export let job: JobItem;
&lt;/script&gt;

&lt;div class="job-item"&gt;
  &lt;p&gt;Job Title: &lt;b&gt;{job.job_title}&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;Description: &lt;b&gt;{job.job_description}&lt;/b&gt;&lt;/p&gt;
  &lt;div class="job-details"&gt;
    &lt;span&gt;Company Name : &lt;b&gt;{job.company_name}&lt;/b&gt;&lt;/span&gt;
    &lt;span&gt;Compensation per year: &lt;b&gt;{job.compensation_per_year}&lt;/b&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
  .job-item {
    border: 1px solid grey;
    padding: 2rem;
    width: 50%;
    margin: 1rem;
    border-radius: 10px;
  }

  .job-details {
    display: flex;
    justify-content: space-between;
  }
&lt;/style&gt;
</code></pre>

<p>Let’s break that down so we know what’s happening:</p>
<ol>
<li>At the top, we import the TypeScript <code>JobItem</code> model.</li>
<li>Then, we define a <code>job</code> prop with a type of <code>JobItem</code>. This prop is responsible for getting the data from its parent component so that we can pass that data to this component for rendering.</li>
<li>Next, the HTML provides this component’s markup.</li>
<li>Last is the CSS for some light styling. Again, I’m keeping this super simple with nothing but a little padding and minor details for structure and legibility. For example, <code>justify-content: space-between</code> adds a little visual separation between job items.</li>
</ol>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/5-job-display-component.png" /></p>
Fetching Job Data
<p>Now that we have the <code>JobDisplay</code> component all done, we’re ready to pass it data to fill in all those fields to be displayed in each <code>JobDisplay</code> rendered on the main job board.</p>
<p>Since this is an SSR application, the data needs to be fetched on the server side. SvelteKit makes this easy by having a separate <code>load</code> function that can be used to fetch data and used as a hook for other actions on the server when the page loads.</p>
<p>To fetch, let’s create yet another new file TypeScript file — this time called <code>+page.server.ts</code> — in the project’s <code>routes</code> directory. Like the <code>+page.svelte</code> file, this also has a special meaning which will make this file run in the server when the route is loaded. Since we want this on the main job board page, we will create this file in the <code>routes</code> directory and include this code in it:</p>
<pre><code>import jobs from ’../data/job-listing.json’
import type { JobsList } from ’../models’;

const job_list: JobsList = jobs;

export const load = (() =&gt; {
  return {
    job_list
  };
})
</code></pre>

<p>Here’s what we’re doing with this code:</p>
<ol>
<li>We import data from the JSON file. This is for simplicity purposes. In the real app, you would likely fetch this data from a database by making an API call.</li>
<li>Then, we import the TypeScript model we created for <code>JobsList</code>.</li>
<li>Next, we create a new <code>job_list</code> variable and assign the imported data to it.</li>
<li>Last, we define a <code>load</code> function that will return an object with the assigned data. SvelteKit will automatically call this function when the page is requested. So, the magic for SSR code happens here as we fetch the data in the server and build the HTML with the data we get back.</li>
</ol>
Accessing Data From The Job Board
<p>SvelteKit makes accessing data relatively easy by passing data to the main job board page in a way that checks the types for errors in the process. We can import a type called <code>PageServerData</code> in the <code>+page.svelte</code> file. This type is autogenerated and will have the data returned by the <code>+page.server.ts</code> file. This is awesome, as we don’t have to define types again when using the data we receive.</p>
<p>Let’s update the code in the <code>+page.svelte</code> file, like the following:</p>
<pre><code>&lt;script lang="ts"&gt;
  import JobDisplay from ’../components/JobDisplay.svelte’;
  import type { PageServerData } from ’./$types’;

  export let data: PageServerData;
&lt;/script&gt;

&lt;div class="home-page"&gt;
  &lt;h1&gt;Job Listing Home page&lt;/h1&gt;

  {#each data.job_list as job}
    &lt;JobDisplay job={job}/&gt;
  {/each}
&lt;/div&gt;

&lt;style&gt;....&lt;/style&gt;
</code></pre>

<p>This is so cool because:</p>
<ol>
<li>The <code>#each</code> syntax is a Svelte benefit that can be used to repeat the <code>JobDisplay</code> component for all the jobs for which data exists.</li>
<li>At the top, we are importing both the JobDisplay component and <code>PageServerData</code> type from <code>./$types</code>, which is autogenerated by SvelteKit.</li>
</ol>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/6-job-listing-home-page.png" /></p>
Deploying The App
<p>We’re ready to compile and bundle this project in preparation for deployment! We get to use the same command in the Terminal as most other frameworks, so it should be pretty familiar:</p>
<pre><code>npm run build
</code></pre>

<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/7-build-output.png" /></p>
<p><strong>Note</strong>: <em>You might get the following warning when running that command: “Could not detect a supported production environment.” We will fix that in just a moment, so stay with me.</em></p>
<p>From here, we can use the <code>npm run preview</code> command to check the latest built version of the app:</p>
<pre><code>npm run preview
</code></pre>

<p>This process is a new way to gain confidence in the build locally before deploying it to a production environment.</p>
<p>The next step is to deploy the app to the server. I’m using Netlify, but that’s purely for example, so feel free to go with another option. SvelteKit offers adapters that will deploy the app to different server environments. You can get the <a href="https://kit.svelte.dev/docs/adapters#supported-environments">whole list of adapters in the docs</a>, of course.</p>
<p>The real reason I’m using Netlify is that deploying there is super convenient for this tutorial, thanks to the <code>adapter-netlify</code> plugin that can be installed with this command:</p>
<pre><code>npm i -D @sveltejs/adapter-netlify
</code></pre>

<p>This does, indeed, introduce a new dependency in the <code>package.json</code> file. I mention that because you know how much I like to keep that list short.</p>
<p>After installation, we can update the <code>svelte.config.js</code> file to consume the adapter:</p>
<pre><code>import adapter from ’@sveltejs/adapter-netlify’;
import { vitePreprocess } from ’@sveltejs/kit/vite’;

/** @type {import(’@sveltejs/kit’).Config} */
const config = {
    preprocess: vitePreprocess(),

    kit: {
        adapter: adapter({
            edge: false, 
            split: false
        })
    }
};

export default config;
</code></pre>

<p>Real quick, this is what’s happening:</p>
<ol>
<li>The <code>adapter</code> is imported from <code>adapter-netlify</code>.</li>
<li>The new adapter is passed to the <code>adapter</code> property inside the <code>kit</code>.</li>
<li>The <code>edge</code> boolean value can be used to configure the deployment to a Netlify edge function.</li>
<li>The <code>split</code> boolean value is used to control whether we want to split each route into separate edge functions.</li>
</ol>
<h3>More Netlify-Specific Configurations</h3>
<p>Everything from here on out is specific to Netlify, so I wanted to break it out into its own section to keep things clear.</p>
<p>We can add a new file called <code>netlify.toml</code> at the top level of the project folder and add the following code:</p>
<pre><code>[build]
  command = "npm run build"
  publish = "build"
</code></pre>

<p>I bet you know what this is doing, but now we have a new alias for deploying the app to Netlify. It also allows us to control deployment from a Netlify account as well, which might be a benefit to you. To do this, we have to:</p>
<ol>
<li>Create a new project in Netlify,</li>
<li>Select the “Import an existing project” option, and</li>
<li>Provide permission for Netlify to access the project repository. You get to choose where you want to store your repo, whether it’s GitHub or some other service.</li>
</ol>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/8-netlify-deploy.png" /></p>
<p>Since we have set up the <code>netlify.toml</code> file, we can leave the default configuration and click the “Deploy” button directly from Netlify.</p>
<p>Once the deployment is completed, you can navigate to the site using the provided URL in Netlify. This should be the final result:</p>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/9-final-output.png" /></p>
<p>Here’s something fun. Open up DevTools when viewing the app in the browser and notice that the HTML contains the actual data we fetched from the JSON file. This way, we know for sure that the right data is rendered and that everything is working.</p>
<p><img src="https://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/10-html-ssr-screenshot.png" /></p>
<p><strong>Note</strong>: <em>The source code of the whole project is <a href="https://github.com/sriram15/job-listing-ssr-sveltekit">available on GitHub</a>. All the steps we covered in this article are divided as separate commits in the <code>main</code> branch for your reference.</em></p>
Conclusion
<p>In this article, we have learned about the basics of server-side rendered apps and the steps to create and deploy a real-life app using SvelteKit as the framework. Feel free to share your comments and perspective on this topic, especially if you are considering picking SvelteKit for your next project.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2020/07/differences-static-generated-sites-server-side-rendered-apps/?_ga=2.58526638.50654286.1684748099-1129770734.1684748099">Differences Between Static Generated Sites And Server-Side Rendered Apps</a>, Timi Omoyeni</li>
<li><a href="https://deploy-preview-9126--smashing-prod.netlify.app/2022/05/google-crux-analysis-comparison-performance-javascript-frameworks/">How To Use Google CrUX To Analyze And Compare The Performance Of JS Frameworks</a>, Dan Shappir</li>
<li><a href="https://deploy-preview-9126--smashing-prod.netlify.app/2022/07/look-remix-differences-next/">A Look At Remix And The Differences With Next.js</a>, Facundo Giuliani</li>
<li><a href="https://www.smashingmagazine.com/2016/08/getting-started-koa-2-async-functions/">Building A Server-Side Application With Async Functions and Koa 2</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Sriram Thiagarajan)</author>
      <enclosure url="http://files.smashing.media/articles/build-server-side-rendered-svelte-apps-sveltekit/build-server-side-rendered-svelte-apps-sveltekit.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Smashing Podcast Episode 62 With Slava Shestopalov: What Is Design Management?]]></title>
      <link>https://smashingmagazine.com/2023/06/smashing-podcast-episode-62/</link>
      <guid>https://smashingmagazine.com/2023/06/smashing-podcast-episode-62/</guid>
      <pubDate>Tue, 13 Jun 2023 14:00:00 GMT</pubDate>
      <description><![CDATA[In this episode of The Smashing Podcast, we ask what is a design manager? What does it take and how does it relate to the role of Designer? Vitaly talks to Slava Shestopalov to find out.]]></description>
      <content:encoded><![CDATA[<p>In this episode of The Smashing Podcast, we ask what is a design manager? What does it take and how does it relate to the role of Designer? Vitaly talks to Slava Shestopalov to find out.</p>


<h3>Show Notes</h3>
<ul>
<li>Connect with Slava <a href="https://www.linkedin.com/in/shestopalov/">on LinkedIn</a></li>
<li>Read Slava’s posts <a href="https://medium.com/design-bridges">on Medium</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2023/06/enable-collaboration-multiparty-setting/">How To Enable Collaboration In A Multiparty Setting</a> <em>written by Hannah Kühne &amp; Madlaina Kalunder</em></li>
<li><a href="https://www.smashingmagazine.com/2023/06/primitive-objects-javascript-part-2/">Primitive Objects In JavaScript: When To Use Them</a> <em>written by Kirill Myshkin</em></li>
<li><a href="https://www.smashingmagazine.com/2023/06/universal-cognitive-friendly-ux-design-tables-grids/">Exploring Universal And Cognitive-Friendly UX Design Through Pivot Tables And Grids</a> <em>written by Yuliia Nikitina</em></li>
<li><a href="https://www.smashingmagazine.com/2023/06/testing-sites-apps-blind-users-cheat-sheet/">Testing Sites And Apps With Blind Users: A Cheat Sheet</a> <em>written by Slava Shestopalov &amp; Eugene Shykiriavyi</em></li>
<li><a href="https://www.smashingmagazine.com/2023/06/design-constraints-challenges-opportunities-practical-strategies/">Design Under Constraints: Challenges, Opportunities, And Practical Strategies</a> <em>written by Paul Boag</em></li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://www.linkedin.com/in/shestopalov/"><img src="https://files.smashing.media/authors/slava-shestopalov.jpg" /></a> Vitaly: He’s a design leader, lecturer and design educator. He has seen it all working as a graphic designer in his early years and then, moving to digital products, UX, accessibility and design management. Most recently, he has worked as a lead designer and design manager in a software development company, Alex, and then, later, Bolt, the all-in-one mobility app. Now, he’s very keen on building bridges between various areas of knowledge rather than specializing in one single thing, and we’ll talk about that as well. He also loves to write, he has a passion for medieval style UX design myths. Who doesn’t? And is passionate about street and architecture photos. Originally from Cherkasy, Ukraine, he now lives in Berlin with his wonderful wife, Aksano. So we know that he’s an experienced designer and design manager, but did you know that he also loves biking, waking up at 5:00 AM to explore cities and can probably talk for hours about every single water tower in your city. My Smashing friends, please welcome Slava Shestopalov. Hello Slava. How are you doing today?</p>
<p>Slava: I am Smashing.</p>
<p>Vitaly: Oh yes, always.</p>
<p>Slava: Or at least I was told to say that.</p>
<p>Vitaly: Okay, so that’s a fair assessment in this case. It’s always a pleasure to meet you and to see you. I know so many things about you. I know that you’re very pragmatic. I know that you always stay true to your words. I know that you care about the quality of your work. But it’s always a pleasure to hear a personal story from somebody who’s kind of explaining where they’re coming from, how they ended up where they are today. So maybe I could ask you first to kind of share your story. How did you arrive kind of where you are today? Where you coming from or where you’re going? That’s very philosophical, but let’s start there.</p>
<p>Slava: That’s quite weird. I mean, my story is quite weird because I’m a journalist by education and I never thought of being a designer at school or the university. During my study years, I dreamt about something else. Maybe I didn’t really have a good idea of my future profession rather about the feeling that it should bring, that it should be something interesting, adventurous, something connected with helping other people. I dreamt about being a historian, geographer, maybe traveling in the pursuit of new adventures or inventions, but ended up being a journalist.</p>
<p>Slava: My parents recommended me choose this path because they thought I was quite talkative person and it would’ve been a great application for such a skill. And since I didn’t have any better ideas, I started studying at the university, studying journalism. And then, on the third year studying, during our practice, and by the way, I met my wife there, under the university, we are together since the first day of studying, we were in the same academic group, not only on the same faculty, and we were passing our journalistic practice at the Press Department of the local section of the Ministry of Emergencies, meaning that we were writing articles about various accidents happening in the Cherkasy region, taking photos of, sometimes, not very funny things. And accidentally, there I tried CorelDRAW, there is the whole generation of designers who don’t even know what those words mean.</p>
<p>Vitaly: Well, you don’t use CorelDRAW anymore, do you?</p>
<p>Slava: Not anymore. I don’t even know whether this software is still available. So I accidentally tried that in our editorial office where, as our practices, was not even real work. And somehow, it was more or less okay. I created the first layout. Of course, now I am scared to look at it. I don’t even have it saved somewhere on my computer. That’s an abomination, not design. But back then, it worked out and I started developing this skill as a secondary skill. I’m a self-taught designer, so never had any systematic way of learning design, rather learning based on my own mistakes, trying something new, producing a lot of work that I’m not proud of.</p>
<p>Vitaly: But also, I’m sure work that you are proud of.</p>
<p>Slava: Yeah. But then, later, I joined first small design studios and I’m forever thankful to my, back then, art director who once came to my desk, looked at the layout on my screen and told me, "Slava, please don’t get offense, but there is a book that you have to read." And he handed me the book Design for Non-Designers. That’s an amazing book, I learned a lot from it, the basics of composition, contrast, alignment, the visual basics. And I started applying it to my work, it got better. Then of course, I read many more books for designers, but also, books on design, on business and management and other topics. And gradually, by participating in more and more complex projects, I got to the position where I am right now.</p>
<p>Vitaly: So it’s interesting for me because actually I remember my days coming also without any formal education as a designer, I actually ended up just playing with boxes on page. And I actually came to design through the lens of HTML, CSS back in the day, really, through frontend development. And then, this is why I exclusive design accessibility lies way, it’s close to my heart. And it’s the thing that many people actually really like that kind of moving into design and then, starting just getting better at design.</p>
<p>Vitaly: But you decided to go even further than that. I think in 2019, you transitioned from the role of a lead designer, if I’m not mistaken, to design manager. Was it something that you envisioned, that you just felt like this is a time to do that? Because again, there are two kinds of people that I encounter. Some people really go into management thinking that this is just a natural progression of their career, you cannot be just a designer, and this is in quotation marks, "forever," so you’re going to go into the managerial role. And some people feel like, let me try that and see if it’s for me and if not, I can always go back to design or maybe to another company product team and whatnot. What was it like for you? Why did you decide to take this route?</p>
<p>Slava: The reason was curiosity. I wouldn’t say that I was the real manager because design management is slightly different, probably even other types of management like product management, engineering management; it’s not completely management because what is required there, if you look at the reconsis, you will notice that the domain knowledge, the hard skills are essential and you’ll be checked whether you have those skills as well apart from the managerial competence. So I wouldn’t say that this kind of management is 100% true, complete management as we can imagine it in the classical meaning, it’s the combination of what you’ve been doing before with management and the higher the percentage of management is, the higher in the hierarchy you go.</p>
<p>Slava: In my situation, switching from the lead designer to design manager was not that crucial. I would say more critical thing that I experienced was switching from a senior designer to lead designer because this is the point where I got my first team whom I had to lead. And that was the turning point when you realize that the area of your responsibility is not only yourself and your project, but also someone else. And in modern world, we don’t have feudalism and we cannot directly tell people what to do, we are not influencing their choices directly. That’s why it’s getting harder to manage without having the real power. And we are in the civilized world, authoritarian style is not working anymore, and that’s great, but we should get inventive to work with people using gentle, mild methods, taking into account what they want as personalities, but at the same time reaching the business goals of the company and KPIs of the team.</p>
<p>Vitaly: Right. But then also, speaking about the gentle way of managing, I remember the talk that you have given about the thing that you have learned and some of the important things that you consider to be important in a design manager position. So I’m curious if you could share some bits of knowledge of things that you discovered maybe the hard way, which were a little bit surprising to you as you were in that role, for example, also in Bolt. What were some things that you feel many designers maybe who might be listening at this point and thinking, "Oh, actually, I was always thinking about design manager, maybe I should go there," what was some things that were surprising to you and something that were really difficult?</p>
<p>Slava: Something that was surprising both for me and for other people with whom I talk about design management is that we perceive management in the wrong way. We have expectations pretty far from reality. There are some managerial activities that are quite typical for designers, for the design community in general, something that we encounter so often that we tend to think that this is actually management. Maybe there is something else but not much else that we don’t see at the moment, not much is hidden of that management. And that’s why when we jump into management, we discover a lot of unknown things that this type of work includes.</p>
<p>Slava: For example, as a Ukrainian, I know that, in our country, many designers are self-taught designers because the profession develops much faster than the higher education. And that’s why people organize themselves into communities and pass knowledge to each other much faster and easier. And there are so many private schools and private initiatives that spread the knowledge and do that more efficiently so that after couple of months of studying, you get something. Of course, there might be many complaints about the quality of that education, but the sooner you get to the first project, the sooner you make your first mistakes, the better you learn the profession and then, you won’t repeat them again. That’s why I know the power of this community. And mentorship, knowledge-sharing is something extremely familiar to Ukrainian designers.</p>
<p>Slava: And then, generally, I observe the same tendency in the Western Europe that knowledge-sharing, mentorship is the usual thing that many designers do, that many designers practice. And we think that when we switch to management, we will simply scale this kind of activity. In reality, it’s just not even the largest part of management. And when people are officially promoted to managers, to leaders, they discover a lot of other areas like hiring people then being responsible for the hires because it’s not enough just to participate in a technical interview and check the hard skills of a candidate, but also then live with this decision because you cannot easily fire a person, and sometimes, it’s even wrong because as a manager you are supposed to work with this person and develop them and help them grow or help them onboard better and pass this period of adaptation. By the way, adaptation and onboarding, another thing than retention cases, resolving problems when your employees are not satisfied with what they have right now, including you as a manager and many other things like salary, compensation, bonuses, team building trust and relationship in the team, performance management, knowledge assessments.</p>
<p>Vitaly: Right. But then, is there even at all any time then to be designing as you’re a design manager? I know that in some teams, in some companies you have this kind of roles where, well, you’re a design manager, sometimes it would be called just... Yeah, well, hmm — sometimes design leads are actually also managers, depending if it’s like a small company or a larger company. And then, would you say that given the scope that is really changing when you’re kind of moving to management, should you have hopes that you will still have time to play with designs in Figma?</p>
<p>Slava: It depends on how far you go and on the org structure of the particular company. In some cases, you still have plenty of time to design because management doesn’t occupy that much time, you don’t have many subordinates or the company so small that the processes are not very formalized. In that case, yep, you can still design maybe 50% of your time, maybe even 70% of your time and manage during the rest of the time. But there are large companies where management occupies more and more time and then, yeah, probably you won’t be designing or at least designing the same way as it used to be before.</p>
<p>Slava: There are multiple levels of design, multiple levels of obstruction. For example, when you’re moving pixels in Figma in order to create a well-balanced button, that’s design. But when you’re creating a customer journey map or mapping a service blueprint together with stakeholders from other departments of your company, that’s design as well, but on the higher level of obstruction. You are building a bit larger picture of the product service or the whole experience throughout products and multiple services of the company. So I would say that there is always space for design, but this design might get less digital and more connected with organizational design, interaction between different departments and other stuff like that.</p>
<p>Vitaly: Right. So maybe if we go back a little bit into team building or specifically the culture and the way teams are built, obviously, we kind of moved, I don’t know when it was, but we kind of moved to this idea that T-shaped employees is a good thing. So you basically specialize in one thing and then, you have a pretty general understanding about what’s going on in the rest of the organization, the rest of the product and so on. It’s quite shallow, but then, in one thing, you specialize. At the same time, you see a lot of people who call themselves generalists, they kind of know a lot about different things but never really specialized deeply into one thing. And so, you also have this, this is probably considered to be not necessarily just the I shape, where you kind of get very deep in one thing, but really, this is it, you just specialized so deep that you have pretty much no solid understanding about what’s happening around.</p>
<p>Vitaly: And then, one thing that has been kind of discussed recently, I’ve seen at least a few articles about that is a V-shape, where you kind of have a lot of depth in one thing. You also have a pretty okay, solid, general understanding about what’s going on. But then, you also have enough skills or enough information about the adjacent knowledge within the product that you’re working on. So I’m wondering at this point, let’s say if you build a team of designers, what kind of skills or what kind of shape if you like, do we need to still remain quite, I would say, interesting to companies small and large? What kind of shape would that be? If that makes sense.</p>
<p>Slava: Yeah, so you want me to give you a silver bullet, right, for-</p>
<p>Vitaly: Yes.</p>
<p>Slava: ... a company?</p>
<p>Vitaly: Ideally, yes.</p>
<p>Slava: Doesn’t exist. It doesn’t exist. On the one hand, I think that’s a good discussion, discussions about the skill sets of designers, but on the other hand, we are talking a lot about ourselves, maybe, more than representatives of all the other professions about what we should call our profession, what shapes, skillset should we have, what frameworks and tools should we use? It’s extremely designer-centered. And here, of course, I can talk for hours and participate in holy wars about what’s the best name for this, all that, but essentially, at the end of the day, I realize that it doesn’t matter, it doesn’t make sense at all. Okay, whatever we decide, if you are whatever shape designer, but you are not useful in this world, you cannot reach the goal and you cannot find your niche and make users happy and business happy, then it doesn’t matter what’s written on your resume.</p>
<p>Vitaly: Right. So-</p>
<p>Slava: But then, the one hand, yeah, of course, logically, when I think about it, I do support the T-shaped concept. But again, depends on how you understand it, whether those horizontal bar of the T is about shallow knowledge or good enough knowledge or decent knowledge. You see how thick it is? And that’s why we have another concept with this We shape designer, which is essentially another representation of the T-shaped format. The idea is the same that as a human being, of course, you want to specialize in something that’s passion, that you maybe love design for and maybe that’s why you came into the profession. But at the same time, you are obliged to know to a certain minimally required extent, the whole entirety of your profession.</p>
<p>Slava: Ask any other professional, a surgeon, police person, whoever, financial expert, of course, they have their favorite topics, but at the same time, there is a certain requirement to you as a specialist to obtain certain amount of knowledge and skills.</p>
<p>Slava: The same about designers, I don’t see how we are different from other professions. It’s why it’s quite fair to have this expectation that the person would know something about UX research. They are not obliged to be as professional and advanced as specialized UX researchers, but that’s fine for a designer to know about UX research, to do some UX research. The same about UX researchers, it never hurts to know the basics of design in order to understand what your colleagues are doing and then, you collaborate better together.</p>
<p>Vitaly: Which brings me, of course, to the question that I think you brought up in an article, I think maybe five or six years ago. You had a lot of comments on that article. I remember that article very vividly because you argued about all the different ways of how we define design, UX, CX and all the different wordings and abbreviations, service designer, CX designer, UX designer, and so many other things.</p>
<p>Vitaly: I mean, it’s really interesting to me because when I look back, I realize now that we’ve been working very professionally in this industry, in whatever you want to call design industry, UX industry, digital design industry for like... What? ... three decades now, maybe even more than that, really trying to be very professional. But when we look around, actually, and this is just a funny story because just as we started trying to record this session, we spent 14 minutes trying to figure out how to do that in the application here. So what went wrong, Slava? I mean, 30 years is a long time to get some things right and I think that we have done a lot of things. But frankly, too often, when you think about general experience that people would get, be it working with public services, working with insurance companies, working with something that’s maybe less exciting than the landing page or a fancy product or SaaS, very often it’s just not good. What went wrong, Slava? Tell us.</p>
<p>Slava: Nothing went wrong. Everything is fine. The world is getting more and more complex over time, but something never changed, and it’s people, or we didn’t change. Our brain is more or less the same as it was thousand years ago, maybe a couple of thousand years ago and that’s the reason. We are people, we are not perfect. Technology might be amazing, it even feels magical, but we are the same. We are not perfect. We’re not always driven by rational intention to do something well. There are many people who are not very excited about their jobs, that’s why they provide not so good service. There are periods when a good person does bad job and they will improve later, but the task that they deliver today because of many reasons will be at this lower quality.</p>
<p>Slava: Then decision making, we are emotional beings and even if you use a hundred of frameworks about decision making and prioritizing, it doesn’t deny our nature. There are even people who learned to manipulate all the modern techniques, who learned about design thinking and workshops and try to use it to their own advantage. Like, "Oh, okay, I cannot persuade my team, so let’s do this fancy exercise with colored sticky notes and try to-</p>
<p>Vitaly: Well, who doesn’t like colored sticky notes, Slava, come on.</p>
<p>Slava: Digital colored sticky note, they’re still colored and look like sticky notes, right? And those people just want to push their own ideas through workshops. But workshops were designed for something else. The same with business, there are unethical business models still flourishing, there are dark patterns just because some people don’t care. So the reason is that we are the same, we are not perfect.</p>
<p>Vitaly: Right. Well-</p>
<p>Slava: We create design for humans, but we are humans as well.</p>
<p>Vitaly: But sometimes I feel like we are designing for humans, but then, at the same time, I feel that we are spending more and more time designing with AI sometimes for AI, this is how it feels to me. I don’t know about you, every now and again I still get a feeling that, okay, this message that was written by somebody and sent to me, it has a little bit of sense or feel or I don’t know, taste of ChatGPT on it. Just I can tell sometimes that this is kind of for humans, but it’s in a way appears to me as if it was written for AI. So do you have this feeling sometimes that you get that email or you get that message, it’s a little bit too AI-ish? Do you have this experience?</p>
<p>Slava: Sometimes I have this experience, but the reason is that it’s a hot topic right now. You may have already forgotten about another trendy topic, NFT, blockchain, everything was in blockchain, everything was NFT. But over time, people realize where the use cases are really strong and deserve our efforts and where it just doesn’t fit. It’s like with every new technology, it passes the same stages. There is even a nice diagram, the cycle of adoption of any new technology when there is a peak of excitement first when we are trying to apply it everywhere. But then, there is this drop in excitement and disillusionment after which we finally get onto the plateau of enlightenment, finding the best application for this technology.</p>
<p>Slava: I remember the same in the area of design methodology when design sprint just appeared, people tried applying it everywhere, even in many places where it just didn’t fit or the problem was too large or the team culture wasn’t consistent with the trust and openness implied by such a methodology as a design sprint. But over time, it found its application and now, used not that often, but only by those people who need it.</p>
<p>Vitaly: Right. Talking actually about team culture, maybe just to switch the topic a little bit, maybe you could bring a few red flags that you always try to watch out for. Because of course, when you are working with a diverse team and you have people who have very different backgrounds and also have very different expectations and very different skill sets, inevitably, you will face situations where team culture clashes. So I’m wondering, what do you think would be the early warning signs that the manager needs to watch out for to prevent things from exploding down the line?</p>
<p>Slava: That’s a good question. I would turn it into slightly different direction because I think of that kind of paradigm. I would try to prevent this from happening. The best way to deal with it is not to deal with it, to avoid dealing with it. So embracing the culture, understanding it and building it is important because then you won’t need to face the consequence. I wouldn’t say that there are real red flags because culture is like user experience, it’s like gravity, like any other physical force, it just exists. And whether you want it or not, if it’s described in a fancy culture brand guideline or not, it exists anyway. The thing is to be sincere about culture, to embrace the existing culture and to broadcast it to the outside honestly.</p>
<p>Slava: The problem is when the communication about the culture is different from the actual culture. There are various cultures, there are even harsh cultures that someone would find extremely uncomfortable, but for example, for other people it can be a great environment for growth, for rapid growth. Maybe they will change their environment later, but during a certain period of life, it might be important.</p>
<p>Slava: I remember some of my previous companies with pretty harsh cultures, but they helped me to grow and to get where I am right now. Yeah, I wasn’t stressed, but I knew about it. I expected it to happen and I had my inner readiness to resist and to learn my lessons out of that. But the problem is when the company communicates its culture externally as the paradise of wellbeing and mindfulness, but in reality they have deadlines for tomorrow and never ending flow of tasks and crazy stakeholders who demand it from you immediately and give you contradicting requirements. So that’s the problem.</p>
<p>Slava: Of course, yeah, there are some extreme cases when the culture is really toxic, when these are insane, inhuman conditions, I don’t deny that. But in many cases, something that we simply perceive as uncomfortable for ourselves is not necessarily evil, sometimes it is, but not always. And my message is that cultures should be honest. And for that purpose, people should be honest with themselves.</p>
<p>Slava: Manager should look at their company and try to formulate in simple way what type of a community this is. For example, in, again, one of my previous jobs, we realized that our team is like a university for people come to us and are hired because they want to grow rapidly, they want to grow faster than anywhere else, that’s why they join our company. They don’t get many perks and bonuses, the office is not very fancy and we are not those hipster designers who are always using trendy things. But at the same time, you get a lot of practice and you can earn the trust of a client, you can take things you want to be responsible for yourself. You are not given task, but you can take the task you find important.</p>
<p>Slava: And when we realized that, we included it into our value proposition because as a company you’re not even interested in attracting people who will feel unsatisfied here. If you are working this way, but your external messaging is different and you attract those people who are searching for something different and then, when they come in they’re highly disappointed and you have to separate with them in a month or a year or they will bring the elements of this culture to your culture and there is a clash of cultures.</p>
<p>Slava: So the point here, I’m just trying to formulate the same idea but in different ways, it’s to be honest about the culture, it’s extremely important. But also, awareness about your culture. It’s not written, it exists. And sometimes, the company principles are quite misleading, they’re not often true because the real culture is seen at the office, it’s in the Slack chat, it’s in the way how people interact, what they discuss at the coffee machine.</p>
<p>Vitaly: Yeah. And there are, of course, also, I think I read this really nice article maybe a couple of years ago, the idea of different subcultures and how they evolve over time and how they can actually mingle and even merge with, as you might have very different teams working on different side of the world, which then find each other and bring and merge culture. So you kind of have this moving bits and moving parts.</p>
<p>Vitaly: Kind of on the way to one of the conference, I went to Iceland. And there was a really nice friendly guy there who was guiding us through Iceland. And he was telling all this story about nothing ever stops, everything is moving, everything is changing, glaciers are changing, the earth’s changing, everything is changing, everything is moving. And people are pretty much like that. People always find... I mean, maybe people don’t change that much, but they’re still finding ways of collaborating better and finding ways to create something that hopefully works better within the organization. How do you encourage that though?</p>
<p>Vitaly: Very often I encounter situations where it feels like there are people just looking at the clock to finish on time and then, go home. And then, there are people who just want to do everything and they’re very vocal and they will have this incredible amount of enthusiasm everywhere and they will have all the GIFs in Slack and so on and so forth. But then, sometimes I feel like, again, talking about culture, their enthusiasm is clashed against this coldness that is coming from some people. And then, you have camps building. How do you deal with situations like that?
You cannot just make people more similar, you just have to deal with very different people who just happen to have very different interests and priorities. How would you manage that?</p>
<p>Slava: That’s an amazing question, and you know why? Because there is no definite answer to it.</p>
<p>Vitaly: I like those kind of questions.</p>
<p>Slava: Yeah. It’s not easy and I struggled a lot with that. I know perfectly, based on my experience, what you’re asking about. One of the solutions might be to hire people who have similar culture or at least consistent with the existing culture. Because if your whole team or the core team, the majority in the team who set this spirit and this atmosphere, they are proactive, you shouldn’t hire people who are highly inconsistent with this kind of culture. Yeah, they might be more passive, more attentive to their schedule, but they should not be resisted at least. They can support it maybe in a more calm way, but you don’t need someone critically opposing that state of things, and vice the versa. Over time, I understood that.</p>
<p>Slava: Sometime ago, I thought that all designers should be proactive, rock stars, super skilled, taking responsibility about everything. But you know what? That’s quite one-sided point of view. Even if I belong to this kind of designers, it’s important to embrace other types of professionals because the downside of being such a designer is that you are driven forward by your passion, but only when you have this passion and motivation. But if it disappears, you can hardly make yourself do the simplest task. And that’s the problem because this fuel doesn’t feed you anymore.</p>
<p>Slava: On the other hand, those people who are more attentive to their balance between work and relaxation, people who are more attentive to their schedule and are less energetic at work and may be less passionate about what they do, they are more persistent and they can much easier survive such a situation when everything around is falling apart and many people lose motivation just because motivation is not such a strong driver for them.
So over time, I understood that there are multiple types of designers and they’re all fine. The thing is to find your niche and to be in the place where you belong.</p>
<p>Vitaly: Right. Interesting. Because on top of that, I do have to ask a question. We could do this forever, we could keep this conversation going forever. I want to be respectful of your time as well. Just from your experience... There are so many people, the people who I’ve been speaking to over this last couple of years, but also here on the podcast, everybody has different opinions about how teams should be led and how the culture should be defined in terms of how people are working, specifically all-remote, a hundred percent remote or all on site, a hundred percent on site or hybrid with one day overlap, two days overlap, three days overlap, four days overlap.</p>
<p>Vitaly: What do you think works? I mean, of course, it’s a matter of the company where people allocated. And obviously, if everybody is from different parts of the world, being on site all the time, moving from, let’s say, fully remote to fully on site is just really difficult. So what would you say is really critical in any of those environments? Can hybrid work really well? Can remote work really well? Can onsite work really well? And there’s truly no best option, but I’m just wondering what should we keep in mind for each of those?</p>
<p>Slava: The culture. So look, culture is everything and it influences the way how people work efficiently. If is networking is really active in the team, if people communicate a lot apart from their work and tasks and everything, and if it’s normal for the team, if it’s part of the reasons why people are here in this company, then offline work is preferable. If people are more autonomous and they like it and everyone works like that in the company, then there is nothing bad in being hybrid or remote. So you see, it depends on the attitude to work and general culture, the spirit, how people feel comfortable.</p>
<p>Vitaly: All right. But are you saying that if you have, let’s say, a mix of people who really prefer on site and then, really prefer remote, then you kind of get an issue because how do you merge both of those intentions?</p>
<p>Slava: But how do you get into that situation in the first place?</p>
<p>Vitaly: Well, good question.</p>
<p>Slava: Why have you attracted so different people to your company?</p>
<p>Vitaly: But for the rest — with HR?</p>
<p>Slava: Yes, I read processes.</p>
<p>Vitaly: But there might be different teams and then, eventually those teams get merged and then, eventually, some people come, some people leave and people are rotating from one team to another. And then, eventually, before you know it, you end up in a situation where you’re working on a new product with a new team and then, part are remote, part are on site and part don’t even want to be there.</p>
<p>Slava: That’s why large companies have processes. The thing that you are describing is quite typical for huge companies because you cannot keep similar work culture forever. As you scale, it’s becoming more awake and hard to match all the time. There is an amazing diagram that I saw in LinkedIn, it was created by Julie Zhuo, who also wrote a great book on management. And this diagram shows how people are hiring, like this, A hires, B hires, C hires, D, and there is a slight difference in their cultures. And if you imagine it as the line of overlapping circles, when A hires B, B hires C, C hires D and so on, then you notice how far A is from let’s say H or G, they’re very far away because this line of hiring brought certain distortion, certain mutation into the culture understanding with each step.</p>
<p>Slava: It’s like evolution is working. With every century or thousands of years, certain species changes one tiny trait, but in a million of years, you won’t even recognize that. The same with huge companies, you cannot control everything and micromanage it. So naturally, they’re extremely diverse. And many companies even are proud of being diverse and inclusive, which is another aspect, which is great, but in order to manage it all, they have to introduce processes and be more strictly regulated just to keep it working.</p>
<p>Vitaly: Right. Right. Well, I mean, we could speak about this for hours, I think. But maybe just two more questions before we wrap up. One thing that’s really important to me and really dear to me is that I know that you’ve been mentoring and you’ve been participating in kind of educating about design also specifically for designers who are in Ukraine. And I mean, at this point, we probably have many more connections and many more insights about how design is actually working from Ukraine right now when the war is going on. I’m just wondering, do you see... Because we had a Smashing meet a couple of months ago now. And there was an incredible talk by one of the people from set up team in Ukraine, in Kyiv, and they were speaking about just incredible way of how they changed the way the company works, how they adapted in any way to accommodate for everything. Like some people working from bomb shelters. This is just incredible.</p>
<p>Vitaly: Those kind of stories really make me cry. So this is just unbelievable. And I always have this very, I don’t even know how to describe it, like incredible sense of the strength that everybody who I’m interacting with who is coming through after all this time. It’s been now, what? It’s like one and a half years, right, well, much more than that, actually looking at 2014.</p>
<p>Vitaly: So the question, I guess, that I’m trying to ask here is that strength and that kind of obsession with quality, with good work, with learning, with educating, how did it come to be and how is it now? I don’t know if it makes sense the question, but just maybe your general feelings about what designers are feeling and how are they working at this point in May 2023?</p>
<p>Slava: That’s a good question. Unfortunately, I might not be the best person to answer because I’ve been living in Berlin for three years and fortunately, I never experienced working from a bomb shelter, although, many of my friends and acquaintances did. But what I know for sure is that Ukrainian design community is quite peculiar and it’s an insurance trait. It’s not something that we are taught, but something that just our characteristic. I know that unlike many other people from other countries, Ukrainian designers are really hungry for knowledge and new skills. And the level of self-organization is quite high because we are not used to getting it off the shelf, we are not used to receiving it, I don’t know, from educational institutions, from the government, from whoever else.</p>
<p>Slava: In Ukraine, or at least definitely my generation, millennials, we understand that if we don’t do anything, we will fail in life, that’s why we try to build our career early, we think about our future work during the last years of school and at the university, already planning where we going to work, how much we going to earn and how to find your niche, your place in life.</p>
<p>Slava: And the same in design, we are not waiting until our universities update their programs in order to teach us digital design, we are doing it ourselves, partnering with universities, participating in different courses, contributing to those programs. And I think that this feature, this trait of Ukrainian designers is extremely helpful right now in crisis times. Maybe it didn’t get us that much by surprise, it was still unexpected. But Ukrainian designers and other professionals in other professions, they just try to always have plan B and plan C and maybe even plan D.</p>
<p>Vitaly: Yeah, that’s probably also explains... I mean, I have to ask this question, I really do. Why medieval themes in your UX memes? Oh, even rhymes, it must be true.</p>
<p>Slava: First of all, it’s beautiful and funny. The first time I used medieval art-based memes was several years ago when I worked at EPAM Systems and prepared an internal presentation for one of our internal team meetups. And it was hilarious, everyone was laughing. And since then, I just started doing it all the time. It’s not like-</p>
<p>Vitaly: And you have like 50 of them now or even more?</p>
<p>Slava: More. Many more. It’s just something original. I haven’t seen many medieval memes, especially in the educational and other materials about design and UX. So it’s just, I like to bring positive emotions to my audience. So if it’s hilarious and makes them laugh and if it’s something new that others are not doing or at least that intensively, then why not? And I simply enjoy medieval art, including architecture, gothic style, Romanesque architecture, it’s something from fairy tales or legends, but then, you realize, it was real.</p>
<p>Vitaly: Yeah, so I guess, dear friends listening to this, if you ever want to give or find a nice gift for Slava, lookout for medieval art and any books related to that, I think that Slava will sincerely appreciated.
Now, as we’re wrapping up, and I think that you mentioned already the future at this point, I’m curious, this is a question I like asking at the end of every episode. Slava, do you have a dream project that you’d love to work on one day, a magical brand or a particularly interesting project of any industry, of any scope of any sites with any team? Do you have something in mind, what you would love to do one day? Maybe somebody from that team, from that project, from that company, from that brand is now listening.</p>
<p>Slava: Great question, and maybe I don’t have an amazing answer to it because it doesn’t matter. I’m dreaming about bringing value, creating something significant, but I never limited myself to a particular area or a particular company or brand, it just doesn’t matter. If it’s valuable, then it’s a success.</p>
<p>Vitaly: All right, well, if you, dear listener would like to hear more from Slava, you can find him on LinkedIn where he’s... Guess what? ... Slava Shestopalov, but also on Medium where he writes a lot of stuff around UX, and of course, don’t forget medieval-themed UX memes, and also, on his 5:00 AM travel blog. Slava will also be speaking in Freiburg at SmashingConf, I’m very looking forward to see you there, and maybe even tomorrow, we’ll see about that. So please, dear friends, if you have the time, please drop in at SmashingConf, Freiburg, September 2023.
All right, well, thank you so much for joining us today, Slava. Do you have any parting words of wisdom that you would like to send out to the people who might be listening to this 20 years from now? Who knows?</p>
<p>Slava: Oh, wisdom, I’m not that wise yet, but something that I discovered recently is that we should more care about people. Technology is advancing so fast, so the thing which is left is the human factor. Maybe AI will take part of our job and that’s great because there are many routine tasks no one is fond of doing, but people, we are extremely complex and understanding who we are and how we designers as humans can serve other humans is essential. So that’s where I personally put my effort into recently, and I think that’s a great direction of research for everyone working in design, UX and related areas.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Drew McLellan)</author>
      <enclosure url="http://files.smashing.media/articles/smashing-podcast-episode-62/smashing-podcast-episode-62.png" length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Gatsby Headaches And How To Cure Them: i18n (Part 1)]]></title>
      <link>https://smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/</link>
      <guid>https://smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-1/</guid>
      <pubDate>Mon, 12 Jun 2023 16:00:00 GMT</pubDate>
      <description><![CDATA[In this first part of a two-part hands-on guide, Juan Rodriguez explains how to use several i18n plugins for Gatsby and reviews some others.]]></description>
      <content:encoded><![CDATA[<p>Internationalization, or i18n, is making your content understandable in other languages, regions, and cultures to reach a wider array of people. However, a more interesting question would be, “Why is i18n important?”. The answer is that we live in an era where hundreds of cultures interact with each other every day, i.e., we live in a globalized world. However, our current internet doesn’t satisfy its globalized needs.</p>
<blockquote>Did you know that 60.4% of the internet is in English, but only 16.2% percent of the world speaks English?<br /><br />Source: <a href="https://www.visualcapitalist.com/the-most-used-languages-on-the-internet/">Visual Capitalist</a></blockquote>

<p>Yes, it’s an enormous gap, and until perfect AI translators are created, the internet community must close it.</p>
<p>As developers, we must adapt our sites’ to support translations and formats for other countries, languages, and dialects, i.e., <strong>localize</strong> our pages. There are two main problems when implementing i18n on our sites.</p>
<ol>
<li><strong>Storing and retrieving content.</strong><br />We will need files to store all our translations while not bloating our page’s bundle size and a way to retrieve and display the correct translation on each page.</li>
<li><strong>Routing content.</strong><br />Users must be redirected to a localized route with their desired language, like <code>my-site.com/es</code> or <code>en.my-site.com</code>. How are we going to create pages for each locale?</li>
</ol>
<p>Fortunately, in the case of <strong>Gatsby</strong> and other static site generators, translations don’t bloat up the page bundle size since they are delivered as part of the static page. The rest of the problems are widely known, and there are a lot of plugins and libraries available to address them, but it can be difficult to choose one if you don’t know their purpose, what they can do, and if they are compatible with your existing codebase. That’s why in the following hands-on guide, we will see how to use several i18n plugins for Gatsby and review some others.</p>
The Starter
<p>Before showing what each plugin can do and how to use them, we first have to start with a base example. (You can skip this and <a href="https://github.com/Monknow/starter-gatsby-headaches-and-how-to-cure-them-i18n">download the starter here</a>). For this tutorial, we will work with a site with multiple pages created from an array of data, like a blog or wiki. In my case, I choose a cooking blog that will initially have support only for English.</p>
<h3>Start A New Project</h3>
<p>To get started, let’s start a plain JavaScript Gatsby project without any plugins at first.</p>
<pre><code>npm init gatsby
</code></pre>

<pre><code>cd my-new-site
</code></pre>

<p>For this project, we will create pages dynamically from markdown files. To be able to read and parse them to Gatsby’s data layer, we will need to use the <code>gatsby-source-filesystem</code> and <code>gatsby-transformer-remark</code> plugins. Here you can see a more <a href="https://www.gatsbyjs.com/docs/how-to/routing/adding-markdown-pages">in-depth tutorial</a>.</p>
<pre><code>npm i gatsby-source-filesystem gatsby-transformer-remark
</code></pre>

<p>Inside our <code>gatsby-config.js</code> file, we will add and configure our plugins to read all the files in a specified directory.</p>
<pre><code>// ./gatsby-config.js

module.exports = {
  //...
  plugins: [
    {
      resolve: `gatsby-source-filesystem`,
      options: {
        name: `content`,
        path: `${__dirname}/src/content`,
      },
    },
    `gatsby-transformer-remark`,
  ],
};
</code></pre>

<h3>Add Your Content</h3>
<p>As you can see, we will use a new <code>./src/content/</code> directory where we will save our posts. We will create a couple of folders with each recipe’s content in markdown files, like the following:</p>
<pre><code>├── src
│ ├── content
| | ├── mac-and-cheese
| | | ├── cover.jpg
| | | ├── index.en.md
| | ├── burritos
| | | ├── cover.jpg
| | | ├── index.en.md
| | ├── pizza
| | | ├── cover.jpg
| | | ├── index.en.md
│ ├── pages
│ ├── images
</code></pre>

<p>Each markdown file will have the following structure:</p>
<pre><code>---
slug: "mac-and-cheese"
date: "2023-01-20"
title: "How to make mac and cheese"
cover_image:
    image: "./cover.jpg"
    alt: "Macaroni and cheese"
locale: "en"
---

Step 1
Lorem ipsum...
</code></pre>

<p>You can see that the first part of the markdown file has a distinct structure and is surrounded by <code>---</code> on both ends. This is called the <a href="https://daily-dev-tips.com/posts/what-exactly-is-frontmatter/">frontmatter</a> and is used to save the file’s metadata. In this case, the post’s title, date, locale, etc.</p>
<p>As you can see, we will be using a <code>cover.jpg</code> file for each post, so to parse and use the images, we will need to install the <code>gatsby-plugin-image</code> <code>gatsby-plugin-sharp</code> and <code>gatsby-transformer-sharp</code> plugins (I know there are a lot 😅).</p>
<pre><code>npm i gatsby-plugin-image gatsby-plugin-sharp gatsby-transformer-sharp
</code></pre>

<p>We will also need to add them to the <code>gatsby-config.js</code> file.</p>
<pre><code>// ./gatsby-config.js

module.exports = {
  //...
  plugins: [
    {
      resolve: `gatsby-source-filesystem`,
      options: {
        name: `content`,
        path: `${__dirname}/src/content`,
      },
    },
    `gatsby-plugin-sharp`,
    `gatsby-transformer-sharp`,
    `gatsby-transformer-remark`,
    `gatsby-plugin-image`,
  ],
};
</code></pre>

<h3>Querying Your Content</h3>
<p>We can finally start our development server:</p>
<pre><code>npm run develop
</code></pre>

<p>And go to <code>http://localhost:8000/___graphql</code>, where we can make the following query:</p>
<pre><code>query Query {
  allMarkdownRemark {
    nodes {
      frontmatter {
        slug
        title
        date
        cover_image {
          image {
            childImageSharp {
              gatsbyImageData
            }
          }
          alt
        }
      }
    }
  }
}
</code></pre>

<p>And get the following result:</p>
<pre><code>{
  "data": {
    "allMarkdownRemark": {
      "nodes": [
        {
          "frontmatter": {
            "slug": "/mac-and-cheese",
            "title": "How to make mac and cheese",
            "date": "2023-01-20",
            "cover_image": {
              /* ... */
            }
          }
        },
        {
          "frontmatter": {
            "slug": "/burritos",
            "title": "How to make burritos",
            "date": "2023-01-20",
            "cover_image": {
              /* ... */
            }
          }
        },
        {
          "frontmatter": {
            "slug": "/pizza",
            "title": "How to make Pizza",
            "date": "2023-01-20",
            "cover_image": {
              /* ... */
            }
          }
        }
      ]
    }
  }
}
</code></pre>

<p>Now the data is accessible through Gatsby’s data layer, but to access it, we will need to <a href="https://www.gatsbyjs.com/docs/how-to/querying-data/page-query/">run a query</a> from the <code>./src/pages/index.js</code> page.</p>
<p>Go ahead and delete all the boilerplate on the <code>index</code> page. Let’s add a short header for our blog and create the page query:</p>
<pre><code>// src/pages/index.js

import * as React from "react";
import {graphql} from "gatsby";

const IndexPage = () =&gt; {
  return (
    &lt;main&gt;
      &lt;h1&gt;Welcome to my English cooking blog!&lt;/h1&gt;
      &lt;h2&gt;Written by Juan Diego Rodríguez&lt;/h2&gt;
    &lt;/main&gt;
  );
};

export const indexQuery = graphql`
  query IndexQuery {
    allMarkdownRemark {
      nodes {
        frontmatter {
          slug
          title
          date
          cover_image {
            image {
              childImageSharp {
                gatsbyImageData
              }
            }
            alt
          }
        }
      }
    }
  }
`;

export default IndexPage;
</code></pre>

<h3>Displaying Your Content</h3>
<p>The result from the query is injected into the <code>IndexPage</code> component as a <code>props</code> property called <code>data</code>. From there, we can render all the recipes’ information.</p>
<pre><code>// src/pages/index.js

// ...
import {RecipePreview} from "../components/RecipePreview";

const IndexPage = ({data}) =&gt; {
  const recipes = data.allMarkdownRemark.nodes;

  return (
    &lt;main&gt;
      &lt;h1&gt;Welcome to my English cooking blog!&lt;/h1&gt;
      &lt;h2&gt;Written by Juan Diego Rodríguez&lt;/h2&gt;
      {recipes.map(({frontmatter}) =&gt; {
        return &lt;RecipePreview key={frontmatter.slug} data={frontmatter} /&gt;;
      })}
    &lt;/main&gt;
  );
};

// ...
</code></pre>

<p>The <code>RecipePreview</code> component will be the following in a new directory: <code>./src/components/</code>:</p>
<div>
<pre><code>// ./src/components/RecipePreview.js

import * as React from "react";
import {Link} from "gatsby";
import {GatsbyImage, getImage} from "gatsby-plugin-image";

export const RecipePreview = ({data}) =&gt; {
  const {cover_image, title, slug} = data;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;Link to={<code>/recipes/${slug}</code>}&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
    &lt;/Link&gt;
  );
};
</code></pre>
</div>

<h3>Creating Pages From Your Content</h3>
<p>If we go to <code>http://localhost:8000/</code>, we will see all our recipes listed, but now we have to create a custom page for each recipe. We can do it using Gatsby’s <a href="https://www.gatsbyjs.com/docs/reference/routing/file-system-route-api/">File System Route API</a>. It works by writing a GraphQL query inside the page’s filename, generating a page for each query result. In this case, we will make a new directory <code>./src/pages/recipes/</code> and create a file called <code>{markdownRemark.frontmatter__slug}.js</code>. This filename translates to the following query:</p>
<pre><code>query MyQuery {
  allMarkdownRemark {
    nodes {
      frontmatter {
        slug
      }
    }
  }
}
</code></pre>

<p>And it will create a page for each recipe using its <code>slug</code> as the route.</p>
<p>Now we just have to create the post’s component to render all its data. First, we will use the following query:</p>
<pre><code>query RecipeQuery {
  markdownRemark {
    frontmatter {
      slug
      title
      date
      cover_image {
        image {
          childImageSharp {
            gatsbyImageData
          }
        }
        alt
      }
    }
    html
  }
}
</code></pre>

<p>This will query the first markdown file available in our data layer, but to specify the markdown file needed for each page, we will need to use <a href="https://www.gatsbyjs.com/docs/graphql-reference/#query-variables">variables in our query</a>. The File System Route API injects the <code>slug</code> in the page’s context in a property called <code>frontmatter__slug</code>. When a property is in the page’s context, it can be used as a query variable under a <code>$</code> followed by the property name, so the slug will be available as <code>$frontmatter__slug</code>.</p>
<pre><code>query RecipeQuery {
  query RecipeQuery($frontmatter__slug: String) {
    markdownRemark(frontmatter: {slug: {eq: $frontmatter__slug}}) {
      frontmatter {
        slug
        title
        date
        cover_image {
          image {
            childImageSharp {
              gatsbyImageData
            }
          }
          alt
        }
      }
      html
    }
  }
}
</code></pre>

<p>The page’s component is pretty simple. We just get the query data from the component’s <code>props</code>. Displaying the title and date is straightforward, and the <code>html</code> can be injected into a <code>p</code> tag. For the image, we just have to use the <code>GatsbyImage</code> component exposed by the <a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-image"><code>gatsby-plugin-image</code></a>.</p>
<div>
<pre><code>// src/pages/recipes/{markdownRemark.frontmatter__slug}.js

const RecipePage = ({data}) =&gt; {
  const {html, frontmatter} = data.markdownRemark;
  const {title, cover_image, date} = frontmatter;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;main&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;p&gt;{date}&lt;/p&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
      &lt;p dangerouslySetInnerHTML={{__html: html}}&gt;&lt;/p&gt;
    &lt;/main&gt;
  );
};

//...
</code></pre>
</div>

<p>The last thing is to use the <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/">Gatsby Head API</a> to change the page’s title to the recipe’s title. This can be easily done since the query’s <code>data</code> is also available in the <code>Head</code> component.</p>
<div>
<pre><code>// src/pages/recipes/{markdownRemark.frontmatter__slug}.js

//...

export const Head = ({data}) =&gt; &lt;title&gt;{data.markdownRemark.frontmatter.title}&lt;/title&gt;;
</code></pre>
</div>

<p>Summing all up results in the following code:</p>
<div>
<pre><code>// src/pages/recipes/{markdownRemark.frontmatter__slug}.js

import * as React from "react";
import {GatsbyImage, getImage} from "gatsby-plugin-image";
import {graphql} from "gatsby";

const RecipePage = ({data}) =&gt; {
  const {html, frontmatter} = data.markdownRemark;
  const {title, cover_image, date} = frontmatter;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;main&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;p&gt;{date}&lt;/p&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
      &lt;p dangerouslySetInnerHTML={{__html: html}}&gt;&lt;/p&gt;
    &lt;/main&gt;
  );
};

export const recipeQuery = graphql<code>query RecipeQuery($frontmatter&amp;#95;&amp;#95;slug: String) {
    markdownRemark(frontmatter: {slug: {eq: $frontmatter&amp;#95;&amp;#95;slug}}) {
      frontmatter {
        slug
        title
        date
        cover&amp;#95;image {
          image {
            childImageSharp {
              gatsbyImageData
            }
          }
          alt
        }
      }
      html
    }
  }</code>;

export default RecipePage;

export const Head = ({data}) =&gt; &lt;title&gt;{data.markdownRemark.frontmatter.title}&lt;/title&gt;;
</code></pre>
</div>

<h3>Creating Localized Content</h3>
<p>With all this finished, we have a functioning recipe blog in English. Now we will use each plugin to add i18n features and localize the site (for this tutorial) for Spanish speakers. But first, we will make a Spanish version for each markdown file in <code>./src/content/</code>. Leaving a structure like the following:</p>
<pre><code>├── src
│ ├── content
| | ├── mac-and-cheese
| | | ├── cover.jpg
| | | ├── index.en.md
| | | ├── index.es.md
| | ├── burritos
| | | ├── cover.jpg
| | | ├── index.en.md
| | | ├── index.es.md
| | ├── pizza
| | | ├── cover.jpg
| | | ├── index.en.md
| | | ├── index.es.md
│ ├── pages
│ ├── images
</code></pre>

<p>Inside our new Spanish markdown files, we will have the same structure in our frontmatter but translated to our new language and change the <code>locale</code> property in the frontmatter to <code>es</code>. However, it’s important to note that the <code>slug</code> field must be the same in each locale.</p>
<code>gatsby-plugin-i18n</code>
<p>This plugin is displayed in Gatsby’s <a href="https://www.gatsbyjs.com/docs/how-to/adding-common-features/localization-i18n/">Internationalization Guide</a> as its first option when implementing i18n routes. The purpose of this plugin is to create localized routes by adding a language code in each page filename, so, for example, a <code>./src/pages/index.en.js</code> file would result in a <code>my-site.com/en/</code> route.</p>
<p>I strongly recommend not using this plugin. It is outdated and hasn’t been updated since 2019, so it is kind of a disappointment to see it promoted as one of the main solutions for i18n in Gatsby’s official documentation. It also <a href="https://github.com/angeloocana/gatsby-plugin-i18n/issues/163">breaks the File System API</a>, so you must use another method for creating pages, like the <code>createPages</code> function in the <a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#createPages">Gatsby Node API</a>. Its only real use would be to create localized routes for certain pages, but considering that you must create a file for each page and each locale, it would be impossible to manage them on even medium sites. A 20 pages site with support for five languages would need 100 files!</p>
<code>gatsby-theme-i18n</code>
<p>Another plugin for implementing localized routes is <code>gatsby-theme-i18n</code>, which will be pretty easy to use in our prior example.</p>
<p>We will first need to install the <code>gatsby-theme-i18n</code> plugin and the <code>gatsby-plugin-react-helmet</code> and <code>react-helmet</code> plugins to help add useful language metadata in our <code>&lt;head&gt;</code> tag.</p>
<pre><code>npm install gatsby-theme-i18n gatsby-plugin-react-helmet react-helmet
</code></pre>

<p>Next, we can add it to the <code>gatsby-config.js</code>:</p>
<pre><code>// ./gatsby-config.js

module.exports = {
  //...
  plugins: [
    //other plugins ...
    {
      resolve: `gatsby-theme-i18n`,
      options: {
        defaultLang: `en`,
        prefixDefault: true,
        configPath: require.resolve(`./i18n/config.json`),
      },
    },
  ],
};
</code></pre>

<p>As you can see, the plugin <code>configPath</code> points to a JSON file. This file will have all the information necessary to add each locale. We will create it in a new <code>./i18n/</code> directory at the root of our project:</p>
<pre><code>[
  {
    "code": "en",
    "hrefLang": "en-US",
    "name": "English",
    "localName": "English",
    "langDir": "ltr",
    "dateFormat": "MM/DD/YYYY"
  },

  {
    "code": "es",
    "hrefLang": "es-ES",
    "name": "Spanish",
    "localName": "Español",
    "langDir": "ltr",
    "dateFormat": "DD.MM.YYYY"
  }
]
</code></pre>

<p><strong>Note:</strong> <em>To see changes in the <code>gatsby-config.js</code> file, we will need to restart the development server.</em></p>
<p>And just as simple as that, we added i18n routes to all our pages. Let’s head to <code>http://localhost:8000/es/</code> or <code>http://localhost:8000/en/</code> to see the result.</p>
<h3>Querying Localized Content</h3>
<p>At first glance, you will see a big problem: the Spanish and English pages have all the posts from both locales because we aren’t filtering the recipes for a specific locale, so we get all the available recipes. We can solve this by once again adding variables to our GraphQL queries. The <code>gatsby-theme-i18n</code> injects the current locale into the page’s context, making it available to use as a query variable under the <code>$locale</code> name.</p>
<p><code>index</code> page query:</p>
<pre><code>query IndexQuery($locale: String) {
  allMarkdownRemark(filter: {frontmatter: {locale: {eq: $locale}}}) {
    nodes {
      frontmatter {
        slug
        title
        date
        cover_image {
          image {
            childImageSharp {
              gatsbyImageData
            }
          }
          alt
        }
      }
    }
  }
}
</code></pre>

<p><code>{markdownRemark.frontmatter__slug}.js</code> page query:</p>
<div>
<pre><code>query RecipeQuery($frontmatter__slug: String, $locale: String) {
  markdownRemark(frontmatter: {slug: {eq: $frontmatter__slug}, locale: {eq: $locale}}) {
    frontmatter {
      slug
      title
      date
      cover_image {
        image {
          childImageSharp {
            gatsbyImageData
          }
        }
        alt
      }
    }
    html
  }
}
</code></pre>
</div>

<h3>Localizing Links</h3>
<p>You will also notice that all Gatsby links are broken since they point to the non-localized routes instead of the new routes, so they will direct the user to a 404 page. To solve this, <code>gatsby-theme-i18n</code> exposes a <code>LocalizedLink</code> component that works exactly like Gatsby’s <code>Link</code> but points to the current locale. We just have to switch each <code>Link</code> component for a <code>LocalizedLink</code>.</p>
<pre><code>// ./src/components/RecipePreview.js

+ import {LocalizedLink as Link} from "gatsby-theme-i18n";
- import {Link} from "gatsby";

//...
</code></pre>

<h3>Changing Locales</h3>
<p>Another vital feature to add will be a component to change from one locale to another. However, making a language selector isn’t completely straightforward. First, we will need to know the current page’s path, like <code>/en/recipes/pizza</code>, to extract the <code>recipes/pizza</code> part and add the desired locale, getting <code>/es/recipes/pizza</code>.</p>
<p>To access the page’s location information (URL, HREF, path, and so on) in all our components, we will need to use the <code>wrapPageElement</code> function available in the <a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapPageElement"><code>gatsby-browser.js</code></a> and <a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/#wrapPageElement"><code>gatsby-ssr.js</code></a> files. In short, this function lets you access the <code>props</code> used on each page, including a <code>location</code> object. We can set up a context provider with the location information and pass it down to all components.</p>
<p>First, we will create the location context in a new directory: <code>./src/context/</code>.</p>
<div>
<pre><code>// ./src/context/LocationContext.js

import * as React from "react";
import {createContext} from "react";

export const LocationContext = createContext();

export const LocationProvider = ({location, children}) =&gt; {
  return &lt;LocationContext.Provider value={location}&gt;{children}&lt;/LocationContext.Provider&gt;;
};
</code></pre>
</div>

<p>As you can imagine, we will pass the page’s <code>location</code> object to the provider’s <code>location</code> attribute on each Gatsby file:</p>
<pre><code>// ./gatsby-ssr.js &amp; ./gatsby-browser.js

import * as React from "react";
import {LocationProvider} from "./src/context/LocationContext";

export const wrapPageElement = ({element, props}) =&gt; {
  const {location} = props;

  return &lt;LocationProvider location={location}&gt;{element}&lt;/LocationProvider&gt;;
};
</code></pre>

<p><strong>Note</strong>: <em>Since we just created the <code>gatsby-ssr.js</code> and <code>gatsby-browser.js</code> files, we will need to restart the development server.</em></p>
<p>Now the page’s location is available in all components through context, and we can use it in our language selector. We have also to pass down the current locale to all components, and the <code>gatsby-theme-i18n</code> exposes a useful <code>useLocalization</code> hook that let you access the current locale and the i18n config. However, a caveat is that it can’t get the current locale on Gatsby files like <code>gatsby-browser.js</code> and <code>gatsby-ssr.js</code>, only the i18n config.</p>
<p>Ideally, we would want to render our language selector using <code>wrapPageElement</code> so it is available on all pages, but we can’t use the <code>useLocazication</code> hook. Fortunately, the <code>wrapPageElement</code> <code>props</code> argument also exposes the page’s context and, inside, its current locale.</p>
<p>Let’s create another context to pass down the locale:</p>
<div>
<pre><code>// ./src/context/LocaleContext.js

import * as React from "react";
import {createContext} from "react";

export const LocaleContext = createContext();

export const LocaleProvider = ({locale, children}) =&gt; {
  return &lt;LocaleContext.Provider value={locale}&gt;{children}&lt;/LocaleContext.Provider&gt;;
};
</code></pre>
</div>

<p>And use it in our <code>wrapPageElement</code> function:</p>
<pre><code>// ./gatsby-ssr.js &amp; ./gatsby-browser.js

import * as React from "react";
import {LocationProvider} from "./src/context/LocationContext";
import {LocaleProvider} from "./src/context/LocaleContext";

export const wrapPageElement = ({element, props}) =&gt; {
  const {location} = props;
  const {locale} = element.props.pageContext;

  return (
    &lt;LocationProvider location={location}&gt;
      &lt;LocaleProvider locale={locale}&gt;{element}&lt;/LocaleProvider&gt;
    &lt;/LocationProvider&gt;
  );
};
</code></pre>

<p>The last thing is how to remove the locale (<code>es</code> or <code>en</code>) from the path (<code>/es/recipes/pizza</code>). Using the following simple but ugly regex, we can remove all the <code>/en/</code> and <code>/es/</code> at the beginning of the path:</p>
<pre><code>/(\/e(s|n)|)(\/*|)/
</code></pre>

<p>It’s important to note that the regex pattern only works for the <code>en</code> and <code>es</code> combination of locales.</p>
<p>Now we have to create our <code>LanguageSelector.js</code>:</p>
<pre><code>// ./src/components/LanguageSelector

import * as React from "react";
import {useContext} from "react";
import {useLocalization} from "gatsby-theme-i18n";
import {Link} from "gatsby";
import {LocationContext} from "../context/LocationContext";
import {LocaleContext} from "../context/LocaleContext";

export const LanguageSelector = () =&gt; {
  const {config} = useLocalization();
  const locale = useContext(LocaleContext);
  const {pathname} = useContext(LocationContext);

  const removeLocalePath = /(\/e(s|n)|)(\/*|)/;
  const pathnameWithoutLocale = pathname.replace(removeLocalePath, "");

  return (
    &lt;div&gt;
      {config.map(({code, localName}) =&gt; {
        return (
          code !== locale &amp;&amp; (
            &lt;Link key={code} to={`/${code}/${pathnameWithoutLocale}`}&gt;
              {localName}
            &lt;/Link&gt;
          )
        );
      })}
    &lt;/div&gt;
  );
};
</code></pre>

<p>Let’s break down what is happening:</p>
<ol>
<li>Get our i18n config through the <code>useLocalization</code> hook.</li>
<li>Get the current locale through context.</li>
<li>Get the page’s current pathname through context, which is the part that comes after the domain (like <code>/en/recipes/pizza</code>).</li>
<li>We remove the locale part of the pathname using a regex pattern (leaving just <code>recipes/pizza</code>).</li>
<li>We want to render a link for each available locale except the current one, so we will check if the locale is the same as the page before rendering a common Gatsby <code>Link</code> to the desired locale.</li>
</ol>
<p>Now inside our <code>gatsby-ssr.js</code> and <code>gatsby-browser.js</code> files, we can add our <code>LanguageSelector</code>:</p>
<pre><code>// ./gatsby-ssr.js &amp; ./gatsby-browser.js

import * as React from "react";
import {LocationProvider} from "./src/context/LocationContext";
import {LocaleProvider} from "./src/context/LocaleContext";
import {LanguageSelector} from "./src/components/LanguageSelector";

export const wrapPageElement = ({element, props}) =&gt; {
  const {location} = props;
  const {locale} = element.props.pageContext;

  return (
    &lt;LocationProvider location={location}&gt;
      &lt;LocaleProvider locale={locale}&gt;
        &lt;LanguageSelector /&gt;
        {element}
      &lt;/LocaleProvider&gt;
    &lt;/LocationProvider&gt;
  );
};
</code></pre>

<h3>Redirecting Users</h3>
<p>The last detail to address is that now the non-i18n routes like <code>http://localhost:8000/</code> or <code>http://localhost:8000/recipes/pizza</code> are empty. To solve this, we can redirect the user to their desired locale using Gatsby’s redirect in <code>gatsby-node.js</code>.</p>
<pre><code>// ./gatsby-node.js

exports.createPages = async ({actions}) =&gt; {
  const {createRedirect} = actions;

  createRedirect({
    fromPath: `/*`,
    toPath: `/en/*`,
    isPermanent: true,
  });

  createRedirect({
    fromPath: `/*`,
    toPath: `/es/*`,
    isPermanent: true,
    conditions: {
      language: [`es`],
    },
  });
};
</code></pre>

<p><strong>Note</strong>: <em>Redirects only work in production! Not in the local development server.</em></p>
<p>With this, each page that doesn’t start with the English or Spanish locale will be redirected to a localized route. The wildcard <code>*</code> at the end of each route says it will redirect them to the same path, e.g., it will redirect <code>/recipes/mac-and-cheese/</code> to <code>/en/recipes/mac-and-cheese/</code>. Also, it will check for the specified language in the request’s origin and redirect to the locale if available; else, it will default to English.</p>
<code>react-intl</code>
<p><code>react-intl</code> is an internationalization library for any React app that can be used with Gatsby without any extra configuration. It provides a component to handle translations and many more to format numbers, dates, times, etc. Like the following:</p>
<ul>
<li><code>FormattedNumber</code>,</li>
<li><code>FormattedDate</code>,</li>
<li><code>FormattedTime</code>.</li>
</ul>
<p>It works by adding a provider called <code>IntlProvider</code> to pass down the current locale to all the <code>react-intl</code> components. Among others, the provider takes three main attributes:</p>
<ul>
<li><code>message</code><br />An object with all your translations.</li>
<li><code>locale</code><br />The current page’s locale.</li>
<li><code>defaultLocale</code><br />The default page’s locale.</li>
</ul>
<p>So, for example:</p>
<pre><code>  &lt;IntlProvider messages={{}} locale="es" defaultLocale="en" &gt;
      &lt;FormattedNumber value={15000} /&gt;
      &lt;br /&gt;
      &lt;FormattedDate value={Date.now()} /&gt;
      &lt;br /&gt;
      &lt;FormattedTime value={Date.now()} /&gt;
      &lt;br /&gt;
  &lt;/IntlProvider&gt;,
</code></pre>

<p>Will format the given values to Spanish and render:</p>
<pre><code>15.000

23/1/2023

19:40
</code></pre>

<p>But if the <code>locale</code> attribute in <code>IntlProvider</code> was <code>en</code>, it would format the values to English and render:</p>
<pre><code>15,000

1/23/2023

7:42 PM
</code></pre>

<p>Pretty cool and simple!</p>
<h3>Using <code>react-intl</code> With Gatsby</h3>
<p>To showcase how the <code>react-intl</code> works with Gatsby, we will continue from our prior example using <code>gatsby-theme-i18n</code>.</p>
<p>We first will need to install the <code>react-intl</code> package:</p>
<pre><code>npm i react-intl
</code></pre>

<p>Secondly, we have to write our translations, and in this case, we just have to translate the title and subtitle on the <code>index.js</code> page. To do so, we will create a file called <code>messajes.js</code> in the <code>./i18n/</code> directory:</p>
<div>
<pre><code>// ./i18n/messages.js

export const messages = {
  en: {
    index_page_title: "Welcome to my English cooking blog!",
    index_page_subtitle: "Written by Juan Diego Rodríguez",
  },
  es: {
    index_page_title: "¡Bienvenidos a mi blog de cocina en español!",
    index_page_subtitle: "Escrito por Juan Diego Rodríguez",
  },
};
</code></pre>
</div>

<p>Next, we have to set up the <code>IntlProvider</code> in the <code>gatsby-ssr.js</code> and <code>gatsby-browser.js</code> files:</p>
<div>
<pre><code>// ./gatsby-ssr.js &amp; ./gatsby-browser.js

import * as React from "react";
import {LocationProvider} from "./src/context/LocationContext";
import {LocaleProvider} from "./src/context/LocaleContext";
import {IntlProvider} from "react-intl";
import {LanguageSelector} from "./src/components/LanguageSelector";
import {messages} from "./i18n/messages";

export const wrapPageElement = ({element, props}) =&gt; {
  const {location} = props;
  const {locale} = element.props.pageContext;

  return (
    &lt;LocationProvider location={location}&gt;
      &lt;LocaleProvider locale={locale}&gt;
        &lt;IntlProvider messages={messages[locale]} locale={locale} defaultLocale="en"&gt;
          &lt;LanguageSelector /&gt;
          {element}
        &lt;/IntlProvider&gt;
      &lt;/LocaleProvider&gt;
    &lt;/LocationProvider&gt;
  );
};
</code></pre>
</div>

<p>And use the <code>FormattedMessage</code> component with an <code>id</code> attribute holding the desired translation key name.</p>
<pre><code>// ./src/pages/index.js

// ...
import {FormattedMessage} from "react-intl";

const IndexPage = ({data}) =&gt; {
  const recipes = data.allMarkdownRemark.nodes;

  return (
    &lt;main&gt;
      &lt;h1&gt;
        &lt;FormattedMessage id="index_page_title" /&gt;
      &lt;/h1&gt;
      &lt;h2&gt;
        &lt;FormattedMessage id="index_page_subtitle" /&gt;
      &lt;/h2&gt;
      {recipes.map(({frontmatter}) =&gt; {
        return &lt;RecipePreview key={frontmatter.slug} data={frontmatter} /&gt;;
      })}
    &lt;/main&gt;
  );
};

// ...
</code></pre>

<p>And as simple as that, our translations will be applied depending on the current user’s locale. However, i18n isn’t only translating all the text to other languages but also adapting to the way numbers, dates, currency, and so on are formatted in the user’s regions. In our example, we can format the date on each recipe page to be formatted according to the current locale using the <code>FormattedDate</code> component.</p>
<div>
<pre><code>// ./src/pages/recipes/{markdownRemark.frontmatter__slug}.js

//...
import {FormattedDate} from "react-intl";

const RecipePage = ({data}) =&gt; {
  const {html, frontmatter} = data.markdownRemark;
  const {title, cover_image, date} = frontmatter;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;main&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;FormattedDate value={date} year="numeric" month="long" day="2-digit" /&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
      &lt;p dangerouslySetInnerHTML={{__html: html}}&gt;&lt;/p&gt;
    &lt;/main&gt;
  );
};

//...
</code></pre>
</div>

<p>As you can see, we feed the component the raw date and specify how we want to display it. Then the component will automatically format it to the correct locale. And with the <code>year</code>, <code>month</code>, and <code>day</code> attributes, we can further customize how to display our date. In our example, the date <code>19-01-2023</code> will be formatted the following way:</p>
<pre><code>English: January 19, 2023

Spanish: 19 de enero de 2023
</code></pre>

<p>If we want to add a localized string around the date, we can use <a href="https://formatjs.io/docs/getting-started/message-declaration#using-react-api-formattedmessage"><code>react-intl</code> arguments</a>. Arguments are a way to add dynamic data inside our <code>react-intl</code> messages. It works by adding curly braces <code>{}</code> inside a message.</p>
<p>The arguments follow this pattern <code>{ key, type, format }</code>, in which</p>
<ul>
<li><code>key</code> is the data to be formatted;</li>
<li><code>type</code> specifies if the <code>key</code> is going to be a number, date, time, and so on;</li>
<li><code>format</code> further specifies the format, e.g., if a date is going to be written like <code>10/05/2023</code> or <code>October 5, 2023</code>.</li>
</ul>
<p>In our case, we will name our key <code>postedOn</code>, and it will be a <code>date</code> type in a <code>long</code> format:</p>
<pre><code>// ./i18n/messages.js

export const messages = {
  en: {
    // ...
    recipe_post_date: "Written on {postedOn, date, long}",
  },
  es: {
    // ...
    recipe_post_date: "Escrito el {postedOn, date, long}",
  },
};
</code></pre>

<div>
<pre><code>// ./src/pages/recipes/{markdownRemark.frontmatter__slug}.js

//...
import {FormattedMessage} from "react-intl";

const RecipePage = ({data}) =&gt; {
  const {html, frontmatter} = data.markdownRemark;
  const {title, cover_image, date} = frontmatter;
  const cover_image_data = getImage(cover_image.image.childImageSharp.gatsbyImageData);

  return (
    &lt;main&gt;
      &lt;h1&gt;{title}&lt;/h1&gt;
      &lt;FormattedMessage id="recipe_post_date" values={{postedOn: new Date(date)}} /&gt;
      &lt;GatsbyImage image={cover_image_data} alt={cover_image.alt} /&gt;
      &lt;p dangerouslySetInnerHTML={{__html: html}}&gt;&lt;/p&gt;
    &lt;/main&gt;
  );
};
//...
</code></pre>
</div>

<p><strong>Note</strong>: <em>For the date to work, we will need to create a new <code>Date</code> object with our <code>date</code> as its only argument.</em></p>
<h3>Localizing The Page’s Title</h3>
<p>The last thing you may have noticed is that the index page’s title isn’t localized. In the recipes pages’ case, this isn’t a problem since it queries the already localized title for each post, but the <code>index</code> page title doesn’t. Solving this can be tricky for two reasons:</p>
<ol>
<li>You can’t use <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/">Gatsby Head API</a> directly with <code>react-intl</code> since the <code>IntlProvider</code> doesn’t exist for components created inside the Head API.</li>
<li>You can’t use the <code>FormattedMessage</code> component inside the <code>title</code> tag since it only allows a simple string value, not a component.</li>
</ol>
<p>However, there is a workaround for both problems:</p>
<ol>
<li>We can use <code>react-helmet</code> (which we installed with <code>gatsby-theme-i18n</code>) inside the page component where the <code>IntlProvider</code> is available.</li>
<li>We can use <a href="https://formatjs.io/docs/react-intl/api/"><code>react-intl</code> imperative API</a> to get the messages as strings instead of the <code>FormmatedMessage</code> component. In this case, the imperative API exposes a <code>useIntl</code> hook which returns an <code>intl</code> object, and the <code>intl.messages</code> property holds all our messages too.</li>
</ol>
<p>So the <code>index</code> component would end up like this:</p>
<pre><code>// ./src/pages/index.js

// ...
import {FormattedMessage, useIntl} from "react-intl";
import {Helmet} from "react-helmet";

const IndexPage = ({data}) =&gt; {
  const intl = useIntl();

  const recipes = data.allMarkdownRemark.nodes;

  return (
    &lt;main&gt;
      &lt;Helmet&gt;
        &lt;title&gt;{intl.messages.index_page_title}&lt;/title&gt;
      &lt;/Helmet&gt;
      &lt;h1&gt;
        &lt;FormattedMessage id="index_page_title" /&gt;
      &lt;/h1&gt;
      &lt;h2&gt;
        &lt;FormattedMessage id="index_page_subtitle" /&gt;
      &lt;/h2&gt;
      {recipes.map(({frontmatter}) =&gt; {
        return &lt;RecipePreview key={frontmatter.slug} data={frontmatter} /&gt;;
      })}
    &lt;/main&gt;
  );
};

// ...
</code></pre>

<code>react-i18next</code>
<p><code>react-i18next</code> is a well-established library for adding i18n to our react sites, and it brings the same and more features, hooks, and utils of <code>react-intl</code>. However, a crucial difference is that to set up <code>react-i18next</code>, we will need to create a wrapper plugin in <code>gatsby-node.js</code> while you can use <code>react-intl</code> as soon as you install it, so I believe it’s a better option to use with Gatsby. However, there already are plugins to set up faster the <code>react-i18next</code> library like <a href="https://www.npmjs.com/package/gatsby-plugin-react-i18next"><code>gatsby-plugin-react-i18next</code></a> and <a href="https://www.npmjs.com/package/gatsby-theme-i18n-react-i18next"><code>gatsby-theme-i18n-react-i18next</code></a>.</p>
Conclusion
<p>The current state of Gatsby and especially its plugin is precarious, and each year its <a href="https://2022.stateofjs.com/en-US/libraries/#tier_list">popularity goes lower</a>, so it’s important to know how to handle it and which plugins to use if you want to work with Gatsby. Despite all, I still believe Gatsby is a powerful tool and is still worth starting a new project with <code>npm init gatsby</code>.</p>
<p>I hope you found this guide useful and leave with a better grasp of i18n in Gatsby and with less of a headache. In the next article, we will explore an in-depth solution to i18n by creating your own i18n plugin!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Juan Diego Rodríguez)</author>
      <enclosure url="http://files.smashing.media/articles/gatsby-headaches-i18n-part-1/gatsby-headaches-i18n-part-1.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Design Under Constraints: Challenges, Opportunities, And Practical Strategies]]></title>
      <link>https://smashingmagazine.com/2023/06/design-constraints-challenges-opportunities-practical-strategies/</link>
      <guid>https://smashingmagazine.com/2023/06/design-constraints-challenges-opportunities-practical-strategies/</guid>
      <pubDate>Fri, 09 Jun 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[Unleash the power of creative limitation! Learn how constraints aren’t barriers but instead stepping stones to innovative design. Find out how to challenge unproductive restrictions and leverage the rest to your advantage.]]></description>
      <content:encoded><![CDATA[<p><em>“If you don’t want to work within constraints, become an artist.”</em> That is what one of my design lecturers told me when I was at university back when the web wasn’t even a thing.</p>
<p>That has turned out to be one of the most useful pieces of advice I ever received in my career and has led me to embrace and even enjoy working within constraints, which probably explains why I tend to specialize in highly regulated sectors with enormous amounts of stakeholders and legacy.</p>
<p>So, if you find working within constraints challenging, this is the post for you. In it, I hope to change your attitude towards constraints and provide practical ways of dealing with even the most frustrating barriers.</p>
<p>But let’s begin by looking at the kind of constraints you could find yourself facing.</p>
Constraints On Every Side
<p>The constraints we face come in all shapes and sizes, from technical constraints due to legacy technology or backwards compatibility to legal constraints relating to compliance requirements or accessibility.</p>
<p>Then there can be inadequate availability of images, video, and text or simply a lack of access to stakeholders.</p>
<p>However, the biggest two, without a doubt, are a <strong>lack of time</strong> and a <strong>lack of resources</strong> (either money or people). In fact, it is rare to encounter a project where somebody is not in a hurry, and you have enough resources to do the job properly!</p>
<p>It is easy to let all of these obstacles demoralize you, but I would encourage you to embrace, rather than resist, their constraints.</p>
Why You Should Embrace Your Constraints
<p>Constraints are not a set of necessary evils we have to endure. Instead, they are the core of what shapes the work we do.</p>
<ul>
<li>Constraints <strong>provide a clear set of guidelines and limitations</strong>, which can help focus the design process and prevent scope creep.</li>
<li>Constraints <strong>help to build trust with clients or stakeholders</strong>, as they can see that the designer is able to work within their limitations and still deliver a high-quality product.</li>
<li>But most importantly of all, constraints can <strong>lead to more creative and innovative solutions</strong>, as designers are forced to think creatively within the given limitations.</li>
</ul>
<p>I have done some of my best work over the years precisely because of the constraints placed upon me, not despite them.</p>
<p>Also, some constraints are a good idea. <a href="https://boagworld.com/emails/case-for-accessibility/">Ensuring a site is accessible just makes sense</a>, as does limiting the time and money an organization is willing to invest.</p>
<p>Not that you should blindly accept every constraint placed upon you.</p>
Know When To Push Back Against Constraints
<p>Unsurprisingly, I would encourage you to challenge constraints that are based on incorrect assumptions or outdated information. However, you won’t come across those that frequently.</p>
<p>More common are constraints that make sense from “a certain point of view.” However, these kinds of constraints are not always right within the context of the project and its long-term objectives.</p>
<p>For example, attempting to deliver a project within a strict budget and on an aggressive schedule may reduce the cost to the organization. But it will substantially increase the risk of the project failing, and so ultimately, the money and time that were spent will be wasted.</p>
<p>Another common example is <strong>compliance constraints</strong>. These constraints exist to protect the organization from possible risk, but many larger organizations become so risk-averse that they undermine their competitiveness in the market. They swap one type of risk for another.</p>
<p>The key in these situations is to demonstrate the cost of any constraint placed upon you.</p>
Demonstrating The Cost Of An Unhealthy Constraint
<p>Often, those who impose constraints upon you do not see the problems these constraints create. This is usually because they are only thinking in terms of their own area of responsibility. For example, a compliance officer is only going to be thinking about compliance and not the broader user experience. Equally, the IT department is going to be more focused on security and privacy than conversion or usability.</p>
<p>Ultimately the decision of whether to enforce a constraint or not comes down to balancing multiple factors. Therefore, what you need to do is </p>
<p>Demonstrate the cost associated with a constraint so that senior management (who take a more holistic view) has all of the facts to make a final decision.</p>
<p>You can demonstrate the cost in one of three ways. You can either focus on the damage that a constraint causes, the cost of not taking an action the constraint prevents, or the lost opportunities imposed by the constraint.</p>
<p>Let’s look at each to help you see more clearly how this can work.</p>
<h3>Highlight The Hidden Damage Of A Constraint</h3>
<p>I once worked for a consumer electronics company. One of their biggest sellers was a kettle that included a water filter which prevented limescale build-up (I know, I work on the most exciting projects!)</p>
<p>The company insisted that when somebody added the kettle to their shopping cart, we should automatically add a set of water filters as well.</p>
<p>This is a <a href="https://www.interaction-design.org/literature/article/sneaking-products-into-users-shopping-baskets">well-known dark pattern</a> that damages the user experience, but I also knew that it was increasing the average order value, a key metric the e-commerce team tracked.</p>
<p>To combat this constraint, I knew I had to demonstrate that it was causing damage that the e-commerce team and leadership were unaware of. So, I took the following steps:</p>
<ul>
<li>I gathered evidence on social media of users complaining about this issue.</li>
<li>I contacted the customer support team to get some metrics about the number of complaints.</li>
<li>I contacted the returns team to find out how many people returned the filters.</li>
<li>I looked on review sites to see the number of negative reviews relating to filters.</li>
</ul>
<p>Sure enough, I found substantial evidence that this was a major issue among consumers. But I didn’t stop there. I wanted to associate a financial cost with the decision, so I made some estimates:</p>
<ul>
<li>I made my best guess at the cost of combating the negative reviews, <a href="https://www.reviewcontrolcenter.com/how-much-can-a-bad-review-cost-you/">referencing various sources I found online</a>.</li>
<li>I researched the average cost of dealing with a complaint and combined it with the data from the customer services team to guess the overall cost of dealing with filter complaints.</li>
<li>I used a similar approach to work out an approximate cost of processing returned filters.</li>
</ul>
<p>Now, let me be clear, these were nothing more than guesses on my part. My figures were not accurate, and people in the company were quick to challenge them. But associating a dollar value with the problem got their attention!</p>
<p>I agreed that my figures were probably wildly off and suggested we did some proper research to find out the real cost.</p>
<p>You don’t need hard data to demonstrate there is a problem. An educated guess is good enough to start a discussion.</p>
<p>Of course, not all constraints are actively causing damage. Some are merely preventing some better action from being taken. In these cases, you need a different approach.</p>
<h3>Focus On The Cost Of Inaction</h3>
<p>Over time, an organization establishes processes and procedures that have been proven to work for them. The bigger the organization, the more standard operating procedures they have, and the more constraints you encounter.</p>
<p>Well-established companies become so afraid of losing their position that they become extremely risk-averse, and so place considerable constraints on any project.</p>
<p>People succeed in organizations like this by doing what has been done before. This can be problematic for those of us who work in digital because most of what we are trying to do is new.</p>
<p>To combat this bias towards the status quo, we need to demonstrate the cost of inaction. Put another way, we need to show management that if they do not do things differently, it will threaten the market position the organization has established.</p>
<p>In most cases, the best approach is to <strong>focus on the competition</strong>. Do a bit of research and show that the competition is less risk-averse and gaining market share as a result. Keep mentioning how they are doing things differently and how that threatens your organization’s market position.</p>
<p>Another tactic is to <strong>demonstrate how customer expectations have changed</strong> and that if the company does not act, they will begin to lose market share.</p>
<p>This is particularly easy to do because users’ expectations regarding digital have skyrocketed in recent years.</p>
<blockquote> “The last best experience that anyone has anywhere becomes the minimum expectation for the experiences they want everywhere.”<br />— Bridget van Kranlingen, Senior Vice President of IBM Global Markets</blockquote>

<p>Put another way, users are comparing your organization’s subpar digital experience to the very best of what they are interacting with online, even when that comparison is not fair.</p>
<p>A bit of user research goes a long way in this regard. For example, consider running a <a href="https://measuringu.com/sus/">system usability scale survey</a> to compare your digital platforms to this industry benchmark. Alternatively, run a survey asking how important the digital experience is to customers.</p>
<p>While fear of losing market share is a big motivator to well-established businesses, younger, hungrier businesses tend to be more motivated by lost opportunities.</p>
<h3>Demonstrate Lost Opportunities</h3>
<p>Your management, stakeholders, and colleagues often do not realize what they are missing out on because of the constraints they place upon you. It, therefore, falls to you to demonstrate those opportunities.</p>
<p>Sometimes, you can make this case with analytics. For example, recently, I was working with a client who insisted on having a pricing page on their website, despite the fact the page showed no pricing! Instead, the page had a request pricing form.</p>
<p>They wanted to keep the page because they were afraid to lose the handful of leads that came via the page. However, I was able to convince them otherwise by pointing out that the page was actively alienating the majority of users who visited it, effectively losing them leads.</p>
<p>I did this by demonstrating the page had a higher bounce rate than any other page on the site, was the most common exit page, and had the lowest dwell time.</p>
<p>But analytics is not my favorite approach for demonstrating lost opportunities. Instead, I typically turn to prototyping.</p>
<p>Prototyping is a great way of demonstrating exactly what an organization will miss out on if they insist on unreasonable constraints, presuming, that is, that you create a prototype that is free from those constraints.</p>
<p>I use this approach all the time. Imagine, for example, that you have been told that a particular technology stack imposes a set of restrictive constraints on how an interface is designed. By prototyping what the interface could be if you were free from those constraints, you can make a powerful case for changing the technology stack.</p>
<p>Having a prototype gives you something to test against. You can use <strong>usability testing</strong> to provide hard evidence of how much it improves the user experience, findability, and even conversion.</p>
<p>Even more significantly, a prototype will excite internal stakeholders. If your prototype is compelling enough, they will want that solution, and that changes the conversation.</p>
<p>Instead of you having to justify why the IT stack needs to be changed, now the IT team has to justify why their IT stack cannot accommodate your solution. Stakeholders and management will want to know why they cannot have what they have fallen in love with.</p>
<p>Of course, people will not always fall in love with your prototype, and ultimately, many of your attempts to overcome constraints will fail despite your best efforts, and you need to accept that.</p>
Conceding Defeat With Grace
<p>Let’s be clear. It is your job to demonstrate to management or clients that a constraint placed upon you is unhealthy. They cannot be expected to know instinctively. They do not have your perspective on the project and so cannot see what you see.</p>
<p>This means that if they fail to remove the constraint you consider unhealthy, it is your failing to demonstrate the problem, not their fault.</p>
<p>Sure, you might consider them shortsighted or naive. But ultimately, you failed to make your case.</p>
<p>Also, it is important to note that <strong>you don’t always have the whole picture</strong>. A decision may be bad from a user experience perspective, for example, but it may be the right thing for the business. There will always be other factors at play that you are unaware of.</p>
<p>So when you fail to make your case, accept that with grace and do your best to work within the constraints given to you.</p>
<p>Ultimately your working relationship with management, colleagues, and clients is more important than your professional pride and getting your way.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Paul Boag)</author>
      <enclosure url="http://files.smashing.media/articles/design-constraints-challenges-opportunities-practical-strategies/design-constraints-challenges-opportunities-practical-strategies.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Testing Sites And Apps With Blind Users: A Cheat Sheet]]></title>
      <link>https://smashingmagazine.com/2023/06/testing-sites-apps-blind-users-cheat-sheet/</link>
      <guid>https://smashingmagazine.com/2023/06/testing-sites-apps-blind-users-cheat-sheet/</guid>
      <pubDate>Wed, 07 Jun 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[While compliance with accessibility checklists is essential, it doesn’t necessarily mean a pleasant experience. That’s why live sessions can give you lots of priceless insights.]]></description>
      <content:encoded><![CDATA[<p>This article focuses on the users of <strong>screen readers</strong> — special software that converts the source code of a site or app into speech. Usually, these are people with low vision and blindness but not only. They’ll help you discover most accessibility issues. Of course, the topic is too vast for a single article, but this might help to get started.</p>
Table Of Contents
<ul>
  <li><a href="#part-1-what-is-accessibility-testing?">What is accessibility testing?</a></li><br />  <li><a href="#part-2-recruiting-users">Recruiting users</a></li>
  <li><a href="#part-3-preparing-for-the-session">Preparation: tools, tasks, wording</a></li>
  <li><a href="#part-4-session-facilitation">Facilitation: screen readers, navigation</a></li>
</ul>

Part 1. What Is Accessibility Testing?
<h3>1.1. Testing vs. Audit</h3>
<p>There are many ways of evaluating the accessibility of a digital product, but let’s start with distinguishing two major approaches.</p>
<p><strong>Auditing</strong> is an element-by-element comparison of a site or app against a list of accessibility requirements, be it a universal standard (<a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</a>) or a country-specific law (like <a href="https://www.ada.gov/">ADA</a> in the U.S. or <a href="https://www.ontario.ca/laws/statute/05a11">AODA</a> in Ontario, Canada). There are two ways to do an audit:</p>
<ol>
<li><strong>Automated audit</strong><br />Checking accessibility by means of web apps, plugins for design and coding software, or browser extensions (for example, <a href="https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd">axe DevTools</a>, <a href="https://chrome.google.com/webstore/detail/arc-toolkit/chdkkkccnlfncngelccgbgfmjebmkmce?hl=en">ARC Toolkit</a>, <a href="https://wave.webaim.org/">WAVE</a>, <a href="https://www.figma.com/@stark">Stark</a>, and others). These tools generate a report with issues and recommendations.</li>
<li><strong>Expert audit</strong><br />Evaluation of web accessibility by a professional who knows the requirements. This person can employ assistive technology and have a disability, but this is anyway an expert with advanced knowledge, not a “common user.” As a result, you get a report too, but it’s more contextual and sensible.</li>
</ol>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/1-accessibility-testing-session.jpg" /></p>
<p><strong>Testing</strong>, unlike auditing, cannot be done by one person. It involves users of assistive technologies and comprises a set of one-on-one sessions facilitated by a designer, UX researcher, or another professional.</p>
<p>Today we’ll focus on testing as an undervalued yet powerful method.</p>
<h3>1.2. Usability vs. Accessibility Testing</h3>
<p>You might have already heard about <em>usability</em> testing or even tried it. No wonder it’s the top research method among designers. So how is it different from its <em>accessibility</em> counterpart?</p>
<p><strong>Common features:</strong></p>
<ul>
<li><strong>Script</strong><br />In both cases, a facilitator prepares a full written script with an introduction, questions, and tasks based on a realistic scenario (for example, buying a ticket or ordering a taxi). By the way, here are handy<a href="https://uxdesign.cc/usability-testing-templates-9b79b40eb481"> testing script templates</a>.</li>
<li><strong>Insights gathering</strong><br />Despite accessibility testing’s main focus, it also reveals lots of usability issues, simply said, whether a site or app is easy to use. In both cases, a facilitator should ask follow-up questions to get an insight into people’s way of thinking, pain points, and needs.</li>
<li><strong>Format</strong><br />Both testing types can be organized online or offline. Usually, one session takes from 30 minutes to 1 hour.</li>
</ul>
<p><strong>Key differences:</strong></p>
<ul>
<li><strong>Participants selection</strong><br />People for usability testing are recruited mainly by demographic characteristics: job title, gender, country, professional experience, etc. When you test accessibility, you take into account the senses and assistive technologies involved in using a product.</li>
<li><strong>What you can test</strong><br />In usability testing, you can test a live product, an interactive prototype (made in Figma, Protopie, Framer, etc.), or even a static mockup. Accessibility testing, in most cases, requires a live product; prototyping tools cannot deliver a source code compatible with assistive technology. <a href="https://help.figma.com/hc/en-us/articles/7810391964695-Accessible-prototypes-in-Figma">Figma attempted to make prototypes accessible</a>, but it’s still far from perfect.</li>
<li><strong>Giving hints</strong><br />When participants get stuck in the flow, you help them find the way out. But when you involve people with disabilities, you have to understand how their assistive gear works. Just to give you an example, a phrase like <em>“Click on the red cross icon in the corner”</em> will sound silly to a blind user.</li>
</ul>
<h3>1.3. Why Opt For Testing?</h3>
<p>Now that you know the difference between an audit and testing and the distinction between usability and accessibility testing, let’s clarify why testing is so powerful. There are two reasons:</p>
<ol>
<li><strong>Get valuable insights.</strong><br />The idea of testing is to learn how you can improve the product. While you won’t check all interface elements and edge cases, such sessions show if the whole flow works and if people can reach the goal. Unlike even the most comprehensive audits, testing is much closer to reality and based on the usage of real assistive technology by a person with a disability.</li>
<li><strong>Build empathy through storytelling.</strong><br />A good story is more compelling than bare numbers. Besides, it can serve as a helpful addition to such popular pro-accessibility arguments as legal risks, winning new customers, or brand impact. Even 1–2 thorough sessions can give you enough material for a vivid story to excite the team about accessibility. An audit report alone may not be as thrilling to read.</li>
</ol>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/2-accessibility-workshop.jpg" /></p>
<p>Testing gives you more realistic insights into common scenarios. Laws and standards aren’t perfect, and formal compliance might not cover all the user challenges. Sometimes people take not the “designed” path to the goal but the one that seems safer or more intuitive, and testing reveals it.</p>
<p>Of course, auditing is still a powerful method; however, its combination with testing will show much more accurate results. Now, let’s talk about accessibility testing in detail.</p>
Part 2. Recruiting Users
<p>There are many types of disabilities and, consequently, various assistive technologies that help people browse the web. Without a deep dive into theory, let’s just recap the variety of disabilities:</p>
<ul>
<li>Depending on the senses involved or the affected area of life: <strong>visual</strong> (blindness, color deficiency, low vision), <strong>physical</strong> (cerebral palsy, amputation, arthritis), <strong>cognitive</strong> (dyslexia, Down syndrome, autism), <strong>auditory</strong> (deafness, hearing loss), and so on.</li>
<li>By severity: <strong>permanent</strong> (for example, an amputated leg or some innate condition), <strong>temporary</strong> (a broken arm or, let’s say, blurred vision right after using eye drops), and <strong>situational</strong> (for instance, a noisy room or carrying a child).</li>
</ul>
<p><strong>Note</strong>: <em>You can find more information on various types of disabilities on the <a href="https://inclusive.microsoft.design/">Microsoft Inclusive Design</a> hub.</em></p>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/3-accessibility-workshop-students.jpg" /></p>
<p>For the sake of simplicity, we’ll focus on the case applicable to most digital products: when a site or app mostly relies on vision. In this case, <em>visual</em> assistive technologies offer users an alternative way to work with content online. The most common technologies are:</p>
<ul>
<li><strong>Screen readers</strong>: software that converts text into speech and has numerous handy shortcuts to navigate efficiently. (We’ll talk about it in detail in the next chapters.)</li>
<li><strong>Refreshable Braille displays</strong>: devices able to show a line of tactile Braile-script text. Round-tipped pins are raised through holes in a surface and refresh as a user moves their cursor on the screen. Such displays are vital for blind-deaf people.</li>
<li><strong>Virtual assistants</strong> (Amazon Alexa, Apple Siri, Google Assistant, and others): an excellent example of universal design that serves the needs of both people with disabilities and non-disabled people. Assistants interpret human speech and respond via synthesized voices.</li>
<li><strong>High-contrast displays</strong> or special modes: for people with low vision. Some users combine a high-contrast mode with a screen reader.</li>
</ul>
<h3>2.1. Who To Involve</h3>
<p>Debates around an optimal number of testing participants are never-ending. But we are talking here about a particular case — organizing accessibility testing for the first time, hence the recommendation is the following:</p>
<ul>
<li><strong>Invite 3–6 users with blindness and low vision</strong> who either browse the web by means of screen readers or use a special mode (for example, extra zoom or increased contrast).</li>
<li>If your product has rich data visualization (charts, graphs, dashboards, or maps), involve several <strong>people with color blindness.</strong></li>
</ul>
<p>In any case, it’s better to conduct even one or two high-quality sessions than a dozen of poorly prepared ones.</p>
<h3>2.2. Where To Find People</h3>
<p>It is not as hard to find people for testing as it seems at first glance. If you are working on a mass product for thousands of users, participants won’t need any special knowledge apart from proficiency with their assistive technology. Here are three sources we recommend checking:</p>
<ul>
<li><strong>Specialized platforms</strong> for recruiting users according to your parameters (for example, <a href="https://access-works.com">Access Works</a> or <a href="https://www.usertesting.com/">UserTesting</a>). This method is the fastest but not the cheapest one because platforms take their commission on top of user compensation.</li>
<li><strong>Social media communities</strong> of people with disabilities. Try searching by the keywords like “people with disabilities,” “PWD,” “support group,” “visually impaired,” “partially sighted,” or “blind people.” Ask the admin’s permission to post your research announcement, and it won’t be rejected.</li>
<li><strong>Social enterprises and non-profits</strong> that work in the area of inclusion, employment, and support for people with disabilities (for example, <a href="https://inclusive-it.com/">Inclusive IT</a> in Ukraine or <a href="https://www.dbsv.org/dbsv-in-english.html">The Federation of the Blind and Partially Sighted</a> in Germany). Drop them an email with your request.</li>
</ul>
<p>We noticed that the last two points might sound like getting participants for free, but not everyone has an opportunity to volunteer.</p>
<p>When we organized accessibility testing sessions last year, three persons agreed to take part pro bono because it was a university course, and we didn’t get any profits. Otherwise, be ready to compensate for the participant’s time (in my experience, around €15–30). It can be an Amazon gift card or coupon for something useful in a particular country (only ensure it’s accessible).</p>
<p>Digital product companies that test accessibility regularly hire people with disabilities so that they have access to in-progress software and can check it iteratively before the official launch.</p>
Part 3. Preparing For The Session
<p>Now that you’ve recruited participants, it’s time to discuss things to prepare before the sessions. And the first question is:</p>
<h3>3.1. Online Or offline?</h3>
<p>There are basically two ways to conduct testing sessions: remotely or face-to-face. While we usually prefer the first one, both techniques have pros and cons, so let’s talk about them.</p>
<p><strong>Benefits of online:</strong></p>
<ul>
<li><strong>Native environment.</strong><br />Participants can use familiar home equipment, like a desktop computer or laptop, with nicely tuned assistive technology (plugins, modes, settings).</li>
<li><strong>Cost and time efficiency.</strong><br />No need to reimburse expenses for traveling to your office. It might be quite costly if a participant arrives with an accompanying person or needs special accessible transport.</li>
<li><strong>Easier recruitment.</strong><br />It’s more likely you’ll find a participant that meets your criteria around the world instead of searching in your city (and again, zero travel expenses).</li>
</ul>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/4-online-educational-accessibility-testing-sessions.png" /></p>
<p><strong>Benefits of offline:</strong></p>
<ul>
<li><strong>Testing products in development.</strong><br />If you have a product that isn’t public yet, participants won’t be able to easily install it or open it in a browser. So, you’ll have to invite participants to your office, but they should probably bring the portable version of their assistive technology (for example, on a USB drive).</li>
<li><strong>Testing mobile apps.</strong><br />If a person brings a personal phone, you’ll see not only the interaction with your product but also how the device is set up and what gestures and shortcuts a person uses.</li>
<li><strong>Helping inexperienced users.</strong><br />Using assistive technology is a skill, and you may involve someone who is not yet proficient with it. So, the offline setting is more convenient when participants get stuck and you help them find the way out.</li>
</ul>
<p>As you can see, online testing has more universal advantages, whereas the offline format rather suits niche cases.</p>
<h3>3.2. Communication Tools</h3>
<p>Once you decide to test online, a logical question is what tool to choose for the session. Basically, there are two options:</p>
<p><strong>Specialized testing tools</strong> (for instance, UserTesting, Lookback, UserZoom, Hotjar, Useberry):</p>
<ul>
<li>Apart from basic conferencing functionality, they support advanced note-taking, automatic transcription, click heatmaps, dashboards with testing results, and other features.</li>
<li>They are quite costly. Besides, trial versions may be too limited for even a single real session.</li>
<li>Participants may get stuck with an unfamiliar tool that they’ve never used before.</li>
</ul>
<p><strong>Popular video conferencing tools</strong> (for example, Google Meet, Zoom, Microsoft Teams, Skype, Webex):</p>
<ul>
<li>Support all the minimally required functionality, such as video calls, screen-sharing, and call recording.</li>
<li>They are usually free.</li>
<li>There is a high chance that participants know how to use them. (Note: even in this case, people may still experience trouble launching screen-sharing).</li>
</ul>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/5-online-accessibility-testing-session.png" /></p>
<p>Since we are talking about your first accessibility testing, it’s much safer and easier to utilize an old good video conferencing tool, namely the one that your participants have experience with. For example, when we organized educational testing sessions for the Ukrainian Catholic University, we used Skype, and at the HTW University in Berlin, we chose Zoom.</p>
<p>Regardless of the tool choice, learn in advance how <strong>screen-sharing</strong> works in it. You’ll likely need to explain it to some of the participants using suitable (non-visual) language. As a result, the intro to accessibility testing sessions may take longer compared to usability testing.</p>
<h3>3.3. Tasks</h3>
<p>As we figured out before, accessibility testing requires a working piece of software (let’s say, an alpha or beta version); it’s harder to build, but it opens vast research opportunities. Instead of asking a participant to imagine something, you can actually observe them ordering a pizza, booking a ticket, or filling in a web form.</p>
<p>Recommendations for accessibility testing tasks aren’t much different from the ones in usability testing. Tasks should be real-life and formulated in a way people naturally think. Instead of referring to an interface (what button a person is supposed to click), you should describe a situation that could happen in reality.</p>
<p>Start a session with a <strong>mini-interview</strong> to learn about participants’ relevant experiences. For example, if you are going to test an air travel service, ask people if they travel frequently and what their desired destinations are. Based on these details, customize the tasks — booking a ticket to the place of the participant’s choice, not a generic location suggested by you.</p>
<p><strong>Examples of realistic, broad tasks:</strong></p>
<ul>
<li>Testing a consumer product: bicycle online store.<br /><em>You want to buy a gift card for your colleague George who enjoys bikepacking. Choose the card value, customize other preferences, and select how George will receive the gift.</em> (This task implies that you learned about a real George who likes cycling during a mini-interview.)</li>
<li>Testing a professional product: customer support tool.<br /><em>Your manager asked you to take a look at several critical issues that haven’t been answered for a week. Find those tickets and find out how to react to them.</em> (This task implies that you invited a participant who worked as a customer support agent or in a similar role.)</li>
</ul>
<p><strong>Examples of leading UI-based tasks:</strong></p>
<ul>
<li>Consumer product<br /><em>“Open the main menu and find the ‘Other’ category. Choose a €50 gift card. In the ‘For whom’ input field enter ‘John Doe’… Select ‘Visa/Mastercard’ as a paying method…”</em></li>
<li>Professional product<br /><em>“Navigate to the dashboard. Choose the ‘Last week’ option in the ‘Status’ filter and look at the list of tickets. Apply the filter ‘Sort by date’ and tell me what the top-most item is…”</em></li>
</ul>
<p>A testing session is 50% preparation and 50% human conversation. It’s not enough to give even a well-formulated task and silently wait.</p>
<p>An initial task reveals which of the ways to accomplish a task a participant will choose as the most intuitive one. When a person gets stuck, you can give hints, but they shouldn’t sound like “click XYZ button”; instead, let them explore further. Something like the following:</p>
<blockquote>— No worries. So, the search doesn’t give the expected result. What else can you do here?<br />— Hmm, I don’t know. Maybe filtering it somehow…<br />— OK, please try that.</blockquote>

<h3>3.4. Wording</h3>
<p>Your communication style impacts participants’ way of thinking and the level of bias. Even a huge article won’t cover all the nitty-gritty, but here are several frequent mistakes.</p>
<p><strong>Beware of the following:</strong></p>
<ul>
<li><strong>Leading tasks</strong>: <em>“Go to the ‘Dashboard’ section and find the frequency chart”</em> or <em>“Scroll to the bottom to see advanced options.”</em><br />Such hints totally ruin the session, and you will never know how a person would act in reality.</li>
<li><strong>Selling language</strong>: <em>“Check our purchase in one click”</em> or <em>“Try the ‘Smart filtering’ feature.”</em><br />It makes people feel as if they have to praise your product, not share what they really think.</li>
<li><strong>Humorous tasks</strong>: <em>“Create a profile for Johnny Cash”</em> or, for example, <em>“Request Christmas tree delivery to Lapland.”</em><br />Jokes distract participants and decrease session realism.</li>
<li><strong>IT terminology</strong>: <em>“On the dashboard, find toggle switch”</em> or <em>“Go to the block with dropdowns and radio buttons.”</em><br />It’s bad for two reasons: you may confuse people with words they don’t understand; it can be a sign that you give leading tasks and excessive UI hints.</li>
</ul>
<p>Here is recommended further reading by Nielsen Norman Group:</p>
<ul>
<li>“<a href="https://www.nngroup.com/articles/user-testing-stepped-tasks/">How to Maximize Insights in User Testing: Stepped User Tasks</a>”, Kara Pernice</li>
<li>“<a href="https://www.nngroup.com/articles/better-usability-tasks/">Write Better Qualitative Usability Tasks: Top 10 Mistakes to Avoid</a>”, Amy Schade</li>
<li>“<a href="https://www.nngroup.com/articles/leading-questions/">Avoid Leading Questions to Get Better Insights from Participants</a>”, Amy Schade</li>
</ul>
Part 4. Session Facilitation
<p>As agreed before, your first accessibility testing session will probably involve a blind person or a person with low vision who uses a screen reader to browse the web. So, let’s cover the two main aspects you have to know before starting a session.</p>
<h3>4.1. Screen Readers</h3>
<p>A screen reader is an assistive software that transforms <strong>visual</strong> information (text and images) into <strong>speech</strong>. When a visually impaired person navigates through a site or app using a keyboard or touchscreen, the software “reads” the text and other elements out loud.</p>
<p>Screen readers rely on the source code but interpret it in a special way. They skip code accountable for visual effects (like colors or fonts) and take into account meaningful parts, such as heading tags, text descriptions for pictures, and labels of interactive elements (whether it’s a button, input field, or checkbox). The better a code is written, the easier it will be for users to comprehend the content.</p>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/6-screen-reader-demonstration.png" /></p>
<p>Now that you know how screen readers function, it’s time to experience them firsthand. Depending on the operating system, you’ll have a standard embedded screen reader already available on your device:</p>
<ul>
<li><strong>VoiceOver</strong>: Mac and iOS;</li>
<li><strong>Narrator</strong>: Windows;</li>
<li><strong>TalkBack</strong>: Android.</li>
</ul>
<p>During one of our training courses, we learned from blind users that the screen reader on iPhone is more comfortable and flexible than the Android one. Interestingly, people don’t like standard desktop screen readers either on Mac or on Windows and usually install one of the advanced third-party readers, for instance:</p>
<ul>
<li><strong>JAWS</strong> <em>(Job Access With Speech)</em>: Windows, paid, the most popular screen reader worldwide;</li>
<li><strong>NVDA</strong> <em>(Non-Visual Desktop Access)</em>: Windows, free of charge.</li>
</ul>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/7-example-interface-inaccessible-screen-reader-users.png" /></p>
4.2. Navigation
<p>Visually impaired people usually navigate apps and sites using a keyboard or touchscreen. And while sighted people scan a page and jump from one part to another, screen reader users can keep only one element in focus at a time, be it a paragraph of text or, let’s say, an input field.</p>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/8-invisible-prompts-screen-readers.png" /></p>
<p>Participants of your accessibility testing will likely run into an unpassable obstacle at some point in the session, and you’ll give them hints on how to find the way out and proceed with the next task. In this case, you’ll need a special non-visual language that makes sense.</p>
<p><strong>Not helpful hints:</strong></p>
<ul>
<li><em>“Click the cross icon in the upper right corner.”</em></li>
<li><em>“Scroll to the bottom of the modal window and find the button there.”</em></li>
<li><em>“Look at the table in the center of the page.”</em></li>
</ul>
<p><strong>Helpful hints:</strong></p>
<ul>
<li><em>“Please, navigate to the next/previous item.”</em></li>
<li><em>“Go to the second element in the list.”</em></li>
<li><em>“Select the last heading/link/button.”</em></li>
</ul>
<p><strong>Note</strong>: <em>UI hints above are suggested for cases when a user is completely stuck in the flow and cannot proceed, for example, when an element is not navigable via a keyboard or, let’s say, an interactive element doesn’t have a proper label or name.</em></p>
Summary
<p>Once all the testing sessions have been completed, you can analyze the collected feedback, determine priorities, and develop an action plan. This process could be the subject of a separate guideline, but let’s cover the three key principles right away:</p>
<ul>
<li><strong>Catching information</strong><br />Testing produces tons of data, so you should be prepared to capture it; otherwise, it will be lost or obscured by your imperfect human memory. Don’t rely on a recording. Make notes in the process or ask an assistant to do that. Notes are easier to analyze and find repeating observations across sessions. Besides, they ensure you’ll have data if the recording fails.</li>
<li><strong>Raw data</strong> ≠ <strong>insights</strong><br />Not everything you observe in testing sessions should be perceived as a call to action. Raw data shows what happened, while insights explain reasons, motivations, and ways of thinking. For example, you see that people use search instead of filters, but the insight may be that typing a search request needs less effort than going through the filter menu.</li>
<li><strong>Criticality and impact</strong><br />Not all observations are significant. If five users struggle to proceed because the shopping cart isn’t keyboard-navigable, it’s a major barrier both for them and the business. But if one out of five participants didn’t like the button name, it isn’t critical. Take into account the following: <ul>
<li>How many participants encountered a problem;</li>
<li>How much a problem impacts reaching the goal: booking a ticket, ordering pizza, or sending a document.</li>
</ul>
</li>
</ul>
<p><img src="https://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/9-miro-board-accessibility-testing-findings.png" /></p>
<p>Once the information has been collected and processed, it is essential to share it with the team: designers, engineers, product managers, quality assurance folks, and so on. The more interactive it will be, the better. Let people participate in the discussion, ask questions, and see what it means for their area of responsibility.</p>
<p>As you gain more experience in conducting testing sessions, invite team members to <strong>watch the live stream</strong> (for instance, via Google Meet) or broadcast the session to a meeting room with observers, but make sure they stay silent and don’t intrude.</p>
<h3>Further Reading</h3>
<ul>
<li>“<a href="https://www.nngroup.com/reports/how-to-conduct-usability-studies-accessibility/">How to Conduct Usability Studies for Accessibility</a>,” a comprehensive report by Nielsen Norman Group</li>
<li>“<a href="https://www.deque.com/blog/incorporate-users-disabilities-ux-testing/">How to Incorporate Users with Disabilities in UX Testing</a>,” an article by Deque Systems</li>
<li>“<a href="https://www.smashingmagazine.com/2018/03/tips-conducting-usability-studies-participants-disabilities/">Tips for Conducting Usability Studies with Participants with Disabilities</a>,” an article by Peter McNally for Smashing Magazine</li>
<li>“<a href="http://www.uiaccess.com/accessucd/ut_plan.html#recruiting">Accessibility in User-Centered Design: Planning Usability Testing</a>,” an excerpt from the book “Just Ask: Integrating Accessibility Throughout Design” by Shawn Lawton Henry</li>
<li>“<a href="https://www.nngroup.com/articles/mobile-accessibility-research/">Conducting Mobile Accessibility Research with Screen-Reader Users</a>,” an article by Tanner Kohler for Nielsen Norman Group</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Slava Shestopalov &amp; Eugene Shykiriavyi)</author>
      <enclosure url="http://files.smashing.media/articles/testing-sites-apps-blind-users-cheat-sheet/testing-sites-apps-blind-users-cheat-sheet.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Exploring Universal And Cognitive-Friendly UX Design Through Pivot Tables And Grids]]></title>
      <link>https://smashingmagazine.com/2023/06/universal-cognitive-friendly-ux-design-tables-grids/</link>
      <guid>https://smashingmagazine.com/2023/06/universal-cognitive-friendly-ux-design-tables-grids/</guid>
      <pubDate>Tue, 06 Jun 2023 16:30:00 GMT</pubDate>
      <description><![CDATA[This article covers the best tips and recommendations on the elements to pay attention to, the rules to follow, and life hacks to get around certain difficulties in table design.]]></description>
      <content:encoded><![CDATA[<p>Tables are one of the most popular ways to visualize data. Presenting data in tables is so ubiquitous — and <a href="https://css-tricks.com/in-defense-of-tables-and-floats-in-modern-day-development/">core to the web itself</a> — that I doubt many of you reading this have any trouble with the basics of the <code>&lt;table&gt;</code> element in HTML. But <a href="https://www.smashingmagazine.com/2019/02/complex-web-tables/">building a good complex table</a> isn’t an easy task.</p>
<p>Though, I’d even go so far as to say that <em>tables are an integral part of our daily life</em>.</p>
<p>That’s why we need to start thinking about making tables more inclusive. <a href="https://webfoundation.org/2012/07/sir-tim-berners-lee-closes-out-2012-olympic-opening-ceremony-this-is-for-everyone-one-web/">The web is supposed to be designed for everybody.</a> That includes those with impairments that may prevent access to the information in the tables we make and rely on assistive technology to “read” them.</p>
<p>For the last several months, I’ve been working on this scientific project around inclusive design for people with cognitive disorders for my university degree. I’ve mostly focused on developing guidelines to help educational platforms adapt to such users. </p>
<p>I also work for a company that has developed a JavaScript library for creating pivot tables used for business analysis and data visualizations. At one point in my research, I found that tables are a type of popular data representation that can simultaneously be a lifesaver and a troublemaker, yes, for people with learning and cognitive problems, but for everyone else as well. Remember, we are all temporarily “abled” and prone to lose abilities like eyesight and hearing over time.</p>
<p>Plus, a well-executed inclusive table design is a pathway to improving everyone’s productivity and overall experience, regardless of impairment.</p>
Table Of Contents
<ul>
  <li><a href="#what-we-mean-by-conitive-disorders">What We Mean By Cognitive Disorders</a></li><br />  <li><a href="#considering-cognitive-disorders-in-ux-design">Considering Cognitive Disorders In UX Design</a></li>
  <li><a href="#color-palettes-and-usage">Color Palettes And Usage</a></li>
  <li><a href="#typographical-considerations">Typographical Considerations</a></li>
  <li><a href="#table-layout-considerations">Table Layout Considerations</a></li>
  <li><a href="#feature-enhancements">Feature Enhancements</a></li>
</ul>

What We Mean By Cognitive Disorders
<p><a href="https://www.ncbi.nlm.nih.gov/books/NBK559052/">Cognitive disorders</a> are defined as any kind of disorder that significantly impairs an individual’s conscious intellectual activity, such as thinking, reasoning, or remembering.</p>
<p><a href="https://www.cdc.gov/ncbddd/adhd/facts.html">ADHD</a> is one example that prevents a person from remaining focused or paying attention. There’s also <a href="https://dyslexiaida.org/dyslexia-basics/">dyslexia </a>, which makes it tough to recognize and comprehend written words. <a href="https://www.dyscalculia.org/">Dyscalculia</a> is specific to working with numbers and arithmetic. </p>
<p>For those without this condition, it is difficult to understand what exactly can be wrong with the perception of written information. But based on the descriptions of people with the relevant deviations, simulators were created that imitate <a href="https://tll.gse.harvard.edu/dyslexia-simulator">what people with dyslexia see</a>.</p>
<p>Currently, you can even install a <a href="https://chrome.google.com/webstore/detail/dyslexia-simulator/kdgccolojenjijefmdmclodecaeiimkl?hl=uk&amp;gl=001">special browser extension</a> to estimate how difficult your site will be to perceive by people with this deviation. It is much more difficult to understand the condition of people with ADHD, but certain <a href="https://www.youtube.com/watch?v=xfo1tZ95Ypk">videos with ADHD simulations</a> do exist, which can also allow you to evaluate the level of difficulty in the perception of any information by such people.</p>
<p>These are all things that can make it difficult for people to use tables on the web. Tables are capable of containing <em>lots</em> of information that requires a high level of cognitive work.</p>
<ul>
<li>The first stage toward helping users with such deviations is to understand their condition and feel its details on themselves — in other words, practicing <em>empathy</em>. </li>
<li>The second stage is to systematize the details and identify specific usability problems to solve.</li>
</ul>
<p>Please indulge me as we dive a bit into some psychological theory that is important to understand when designing web pages.</p>
<h3>Cognitive Load</h3>
<p><a href="https://education.nsw.gov.au/about-us/educational-data/cese/publications/literature-reviews/cognitive-load-theory"><strong>Cognitive load</strong></a> relates to the amount of information that working memory can hold at one time. Our memory has a limited capacity, and instructional methods should avoid overloading it with unnecessary activities and information that competes with what the individual needs to complete their task.</p>
<p>UX professionals often say complex tasks that require the use of external resources may result in an <strong>increased cognitive load</strong>. But the amount of the load can be affected by any additional information, unusual design, or wrong type of data visualization. When a person is accustomed to a particular representation of certain types of data — like preferred date format or where form input labels are positioned — even a seemingly minor change increases the processing time of our brain.</p>
<p>Here’s an example: If a particular student is from a region where content is presented in a right-to-left direction and the software they are provided by their university only supports a left-to-right direction, the amount of mental work it takes to comprehend the information will be greater compared to other students.</p>
<p>If you still want another example, Anne Gibson explains this exceptionally well in a <a href="https://theinterconnected.net/kirabug/cognitive-load-explained-using-ducks/">blog post that uses ducks to illustrate the idea</a>.</p>
<h3>Cognitive Biases</h3>
<p>I also want to call special attention to <a href="https://en.wikipedia.org/wiki/Cognitive_bias"><strong>cognitive biases</strong></a>, which are systematic errors in thinking that become patterns of deviation from rationality in judgment. When people are processing and interpreting information around them, it often can influence the decisions a person makes without even noticing.</p>
<p>For example, the <a href="https://en.wikipedia.org/wiki/Peak%E2%80%93end_rule">peak-end rule</a> says that people judge an experience by its "peak” and last interactions. It’s easy to prove. Try to reflect on a game you used to play as a kid, whether it’s from an arcade, a computer console, or something you played online. What do you remember about it? Probably the level that was hardest for you and the ending. That’s the“peak” of your experience and the last, most “fresh” one, and they create your overall opinion of the game. For more examples, there is a fantastic <a href="https://growth.design/psychology">resource that outlines 106 different types of cognitive biases</a> and how they affect UX.</p>
<h3>Signal-to-noise Ratio</h3>
<p>Last but not least, I’d like to touch on the concept of a signal-to-noise ratio briefly. It is similar to the <a href="https://en.wikipedia.org/wiki/Signal-to-noise_ratio">engineering term</a> but relates to the concept that most of the information we encounter is noise that has nothing to do with a user’s task.</p>
<ul>
<li>Relevant and necessary information is a <strong>signal</strong>.</li>
<li>The <strong>ratio</strong> is the proportion of relevant information to irrelevant information.</li>
</ul>
<p>A designer’s goal is to achieve a <a href="https://www.nngroup.com/articles/signal-noise-ratio/">high signal-to-noise ratio</a> because it increases the efficiency of how information is transmitted. The information applied to this ratio can be anything: text, illustrations, cards, tables, and more.</p>
<p>The main idea about cognitive disabilities I want you to take away is that they make individuals very sensitive to the way the information is presented. <a href="https://www.w3.org/TR/WCAG21/#distinguishable">A font that’s too small or too bright will make content unperceivable.</a> Adding gratuitous sound or animation may result in awful distractions (or <a href="https://www.w3.org/TR/WCAG21/#seizures-and-physical-reactions">worse</a>) instead of nice enhancements. </p>
<p>I’ll repeat it: </p>
<p>A good user experience will prevent cognitive overload for everyone. It’s just that we have to remember that many out there are more sensitive to such noises and loads.</p>
<p>Focusing on individuals with specific considerations only gives you a more detailed view of what you need to solve for everybody to live a simpler life.</p>
Considering Cognitive Disorders In UX Design
<p>Now that we have defined the main problems that can arise in a design, I can sum up our goals for effective UX:</p>
<ul>
<li>Reduce the cognitive load.</li>
<li>Maximize the signal-to-noise ratio.</li>
<li>Use correct cognitive biases to boost the user experience.</li>
</ul>
<p>“Design” is a loaded term meaning lots of different things, from colors and fonts to animations and sounds and everything in between. All of that impacts the way an individual understands the information that is presented to them. This does not mean all design elements should be excluded when designing table elements. <strong>A good table design is invisible.</strong> The design should serve content, not the other way around.</p>
<p>With the help of lots of academic, professional, and personal research, I’ve developed a set of recommendations that I believe will result in cognitive-friendly and easy-to-perceive table designs.</p>
Color Palettes And Usage
<p>We should start by talking about the <strong>color</strong> because if the colors used in a table are improperly implemented, subsequent decisions do not really matter.</p>
<p>Many people consider colors to have their meanings, which differ from culture to culture. That’s certainly true in a sociological sense, but as far as UX is concerned, the outcome is the same — colors carry information and emotions and are often unnecessary to mean something in a design.</p>
<h3>Rule 1: Aim For A Minimalist Color Palette</h3>
<p>When you see a generous use of color in a table, it isn’t to make the table more functional but to make a design stand out. I won’t say that using fewer colors guarantees a more functional table, but more color tends to result in individuals losing attention from the right things.</p>
<p>Accordingly, bright colors and accents should highlight information that has established meaning. This isn’t to say that interesting color schemes and advanced color palettes are off-limits. This means using colors wisely. They are a means to an end rather than a splash of paint for attention.</p>
<p><a href="https://medium.com/@refactoringui?source=user_profile-------------------------------------">Adam Wathan &amp; Steve Schoger</a> offer a perfect example of color usage in a design study of customized Slack themes. Consider the two following interfaces. It may not seem like it at first, but the second UI actually has a more extensive color palette than the first.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/poor-color-choice-design.png" /></p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/good-color-choice-design.png" /></p>
<p>The difference is that the second interface applies <strong>shades of the core color</strong> defined in the palette and that brighter and more vibrant shades are only used to highlight the important stuff.</p>
<p>You can explore this phenomenon by yourself and test your perception of the colors in the design by changing the look of your messenger. For example, <a href="https://telegram.org/">Telegram</a> has some interface customization options, and while playing with that, I noticed I read and navigate between my chats in the “Night Accent” mode rather than the plain “System” mode. </p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/telegram-night-accent-mode.png" /></p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/telegram-system-mode.png" /></p>
<p>Of course, both designs were designed for people with different preferences and characteristics, but such a personal experiment led me to the following thought. Even though the second option uses fewer colors, the uniformity of information is a bit confusing. From this, I concluded that <strong>too few colors and too minimal a design is also a bad choice</strong>. It is necessary to find a balance between the color palette and its usage.</p>
<p>The best option is to pick from one to three primary colors and then play with their shades, tints, and tones. To combine the colors wisely, you can use <a href="https://www.canva.com/colors/color-wheel/">complementary, split complementary, or analogous approaches</a>.</p>
<p>That said, I suggest using a “shading” monochromatic approach for tables. It means defining a base color in a palette, then expanding it with different shades in dark and light directions. In other words:</p>
<ol>
<li>Choose a primary color.</li>
<li>Define an evenly darker and lighter shade of that primary color.</li>
</ol>
<p>This produces two more colors to which you can apply the previous technic to create colors that are a perfect compromise between the shades on either side. Repeat this process until you reach the number of colors you need (generally, 7–9 shades will do).</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/shading-palette.png" /></p>
<h3>Rule 2: Embrace The Power Of Whitespace</h3>
<p>I find that it’s good to offer a fair amount of “breathing room” around elements rather than trying to crowd everything in as close as possible. For example, finding a balance of space between the table rows and columns enhances the legibility of the contents as it helps distinguish the UI from the information.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/table-with-not-enough-free-space.png" /></p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/table-with-free-design.png" /></p>
<p>I’ll qualify this by noting that “breathing room” often depends on the type of data that’s being presented, as well as the size of the device on which it’s being viewed. As such, it sometimes makes sense to enhance a table’s functionality by allowing the user to adjust the height and width of rows and columns for the most optimal experience.</p>
<p>If you are worried about using too few or too many colors, apply the <strong>60/30/10 rule</strong>. It’s a basic pattern for any distribution selection. People use this strategy when budgeting assets like content and media, and it’s applicable to design. The rule says the color usage should be distributed as follows:</p>
<ul>
<li><strong>60%</strong> for neutral colors,</li>
<li><strong>30%</strong> for primary colors,</li>
<li><strong>10%</strong> for secondary colors (e.g., highlights, CTAs, and alerts).</li>
</ul>
<h3>Rule 3: Avoid Grays</h3>
<p>Talking about neutral colors, in color theory, gray represents neutrality and balance. Its color meaning likely comes from being the shade between white and black and often is also perceived as the absence of color. You can not overdo it; its light shades do not oppress, so gray is just “okay.”</p>
<p>However, gray does carry some negative connotations, particularly when it comes to depression and loss. Its absence of color makes it dull. For this reason, designers often resort to it to de-emphasize an element or certain bits of data.</p>
<p>But maintaining such a philosophy of gray color will only work in black and white designs, such as on the Apple website. Though, as I mentioned before, it actually works really well as grey is the tone of black or a shade of white.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/apple-website-screeshot.png" /></p>
<p>The problem, however, comes up when other colors are added to the color palette, which leads to a change in a color’s roles and functions. In the case of gray, putting it next to brighter colors makes the design pale and dull. </p>
<p>Having no color of its own, gray seems to eat away the brightness of neighboring elements. Instead of maintaining balance, <strong>gray makes the design cloudy and unclear</strong>. After all, against the background of already illuminated elements, gray makes the elements not just less significant but unnecessary for our perception.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/toolbar-with-gray.png" /></p>
<p>That does not mean you should totally give up gray. But highlighting some information inherently de-emphasizes other information, negating the need for gray in the first place. </p>
<p>The easy way out is to <strong>replace gray with lighter shades of a palette’s base color on a table cell’s background</strong>. The effect is the same, but the overall appearance will pop more without adding more noise or cognitive load.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/toolbar-without-gray.png" /></p>
<h3>Rule 4: Know What’s Worthy Of Highlighting</h3>
<p>Designers are always looking for a way to make their work stand out. I get the temptation because bold and bright colors are definitely exciting and interesting. </p>
<p>Blogs can be considered a good example of this problem as their variety is wide and growing, and a lot of platforms prioritize exclusive design over inclusive design. </p>
<p>For example, Medium uses only black and shades of it for a color palette, which significantly facilitates even simple tasks like reading titles. Hackernoon, although looking interesting and drawing attention, requires more concentration and does not allow you to “breathe” as freely as on Medium.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/medium-main-page-design.png" /></p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/hackernoon-main-page-design.png" /></p>
<p>In analytical software, that only leads to a table design that emphasizes a designer’s needs ahead of the user’s needs.</p>
<p>Don’t get me wrong — a palette that focuses on shades rather than a large array of exciting colors can still be exciting and interesting. That provides a discussion about which grid elements benefit from color. Here are my criteria for helping decide what those are and the colors that add the most benefit for the given situation.</p>
<p><strong>Active cells:</strong> If the user clicks on a specific table cell or selects a group of cells, we can add focus to it to indicate the user’s place in the data. The color needs to call attention to the selection without becoming a distraction, perhaps by changing the border color with a base color and using a light shade of it for the background so as to maintain <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">WCAG-compliant contrast with the text color</a>.</p>
<p><strong>Tip!</strong> <em>It’s also good to highlight the row and column that a focused cell belongs to, as this information is a common thing to check when deciphering the cell’s meaning. You can highlight the entire row and column it belongs to or, even better, just the first cell of the row and column.</em></p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/active-cell-highlighting.png" /></p>
<p><strong>Error messaging:</strong> Error messages definitely benefit from color because, in general, errors contain critical feedback for the user to take corrective action.</p>
<p>A good example might be an injected alert that informs the user that the table’s functionality is disabled until an invalid data point is fixed. Reds, oranges, and yellows are commonly used in these situations but bear in mind that overly emphasizing an error can lead to panic and stress. (Speaking of error messaging, Vitaly Friedman has an <a href="https://www.smashingmagazine.com/2022/08/error-messages-ux-design/">extensive piece on designing effective error messages</a>, including the pitfalls of relying too heavily on color.)</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/alert-flexmonster-desktop.png" /></p>
<p><strong>Outstanding data:</strong> I’m referring to any data in the table that is an outlier. For example, in a table that compares data points over time, we might want to highlight the high and low points for the sake of comparison. I suggest avoiding reds and greens, as they are commonly used to indicate success and failure. Perhaps styling the text color with a darker shade of a palette’s base color is all you need to call enough attention to these points without the user losing track of them.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/table-conditional-formatting.png" /></p>
<p>The key takeaway: </p>
<p>Data-heavy tables are already overwhelming, and we don’t want any additional noise. Try to remove all unnecessary colors that add to a user’s cognitive load.</p>
<p><strong>Tip!</strong> <em>Remember the main goal when designing a table: reliability, not beauty. Always check your final decisions, ideally with a variety of target users. I really recommend using <a href="https://webaim.org/resources/contrastchecker/">contrast checkers</a> to spot mistakes quickly and efficiently correct them.</em></p>
Typographical Considerations
<p>The fonts we use to represent tabular data are another aspect of a table’s look and feel that we need to address when it comes to implementing an inclusive design. We want the data to be as legible and scannable as possible, and I’ve found that the best advice boils down to the <strong>typography</strong> of the content — especially for numerics — as well as how it is <strong>aligned</strong>.</p>
<h3>Rule 1: The Best Font Is A “Simple” Font</h3>
<p>The trick with fonts is the same as with colors: simplicity. The most effective font is one that takes less brainpower to interpret rather than one that tries to stand out.</p>
<p>No, you don’t need to ditch your Google Fonts or any other font library you already use, but choose a font from it that meets these recommendations:</p>
<ol>
<li><a href="https://designshack.net/articles/typography/serif-vs-sans-serif-fonts-is-one-really-better-than-the-other/"><strong>Sans-serif fonts</strong></a> (e.g., Helvetica, Arial, and Verdana) are more effective because they tend to take up less space in a dense area — perfect for promoting more “breathing room” in a crowded table of data.</li>
<li>A large <strong>x-height</strong> is always easier to read. The <a href="https://en.wikipedia.org/wiki/X-height">X-height</a> is the height of the body of a lowercase letter minus any ascenders or descenders. In other words, the height of the lowercase “x” in the font.</li>
<li><strong>Monospace fonts</strong> make it easier to compare cells because the width of each character is consistent, resulting in evenly-spaced lines and cells.</li>
<li><strong>Regular font weights</strong> are preferable to bolder weights because the boldfacing text is another form of highlighting or emphasizing content, which can lead to confusion.</li>
<li>A <strong>stable, open counter</strong>. The counter is a space in the letter “o” or the letter “b.” Fonts with distorted counters render poorly in small sizes and are hard to read.</li>
</ol>
<p>Fonts that fulfill these criteria are more legible and versatile than others and should help whittle down the number of fonts you have to choose from when choosing your table design.</p>
<h3>Rule 2: Number Formatting Matters</h3>
<p>When choosing a font, designers often focus on good legible letters and forget about numbers. Needless to say, numbers often are what we’re displaying in tables. They deserve first-class consideration when it comes to choosing an effective font for a good table experience.</p>
<p>As I mentioned earlier, monospace fonts are an effective option when numbers are a table’s primary content. The characters take up the same width per character for consistent spacing to help align values between rows and columns. In my experience, finding a proportional font that doesn’t produce a narrow “1” is difficult.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/numerical-data-representation-different-fonts.png" /></p>
<p>If you compare the two fonts in the figure above, it’s pretty clear that data is easier to read and compare when the content is aligned and the characters use the same amount of space. There’s less distance for the eye to travel between data points and less of a difference in appearance to consider whether one value is greater than the other.</p>
<p>If you are dealing with fractions, you will want to consider a font that supports that format or go with a variable font that supports <a href="https://css-tricks.com/almanac/properties/f/font-variant-numeric/">font-variant-numeric</a> features for more control over the spacing.</p>
<h3>Rule 3: There Are Only Two Table Alignments: Left And Right</h3>
<p>Technically there are four alignments: left, right, center, and justify. We know that because the CSS <a href="https://css-tricks.com/almanac/properties/t/text-align/">text-alignment</a> property supports all four of them.</p>
<p>My personal advice is <strong>to avoid using center alignment</strong>, except in less-common situations where unambiguous data is presented with consistently-sized icons. But that’s a significant and rare exception to the rule, and it is best to use caution and good judgment if you have to go there.</p>
<p><strong>Justified content</strong> alters the spacing between characters to achieve a consistent line length, but that’s another one to avoid, as the goal is less about line lengths than it is about maintaining a consistent amount of space between characters for a quick scan. That is what monospaced fonts are effective for.</p>
<p>Data should instead be aligned toward the <strong>left</strong> or <strong>right</strong>, and which one is based on the user’s language preference.  </p>
<p>Then again, at school, we’re taught to compare numbers in a right-to-left direction by looking first at single units, then tens, followed by hundreds, then thousands, and so forth. Accordingly, the <strong>right alignment</strong> could be a better choice that’s universally easier to read regardless of a person’s language preference. You may notice that spreadsheet apps like Excel, Sheets, and Notion align numeric values to the right by default.</p>
<p>There are exceptions to that rule, of course, because not all numbers are measurements. There are <strong>qualitative numbers</strong> that probably make more sense with left alignment since that is often the context in which they are used. They aren’t used for comparison and are perceived as a piece of text information written in numbers. Examples include:</p>
<ul>
<li>Dates (e.g., 12/28/2050),</li>
<li>Zip/Postal code (e.g., 90815),</li>
<li>Phone number (e.g., 555-544-4349).</li>
</ul>
<p>Table headings should be aligned <strong>to the same edge as the data</strong> presented in the column. I know there could be disagreement here, as the default UA styling for modern browsers centers table headings.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/table-bad-headers.png" /></p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/table-good-headers.png" /></p>
<p>The screenshots above are examples of bad and good headers. When looking at the first screenshot, your initial focus is likely drawn to the column headers, which is good! That allows you to understand what the table is about quickly. But after that initial focus, the bold text is distracting and tricks your brain into thinking the header is the most important content.</p>
<p>The header in the second screenshot also uses bold text. However, notice how changing the color from black to white emphasizes the headers at the same time. That negates the impact bolding has, preventing potential cognitive load.</p>
<p>At this point, I should include a reminder to avoid gray when de-emphasizing table elements. For example, notice the numbers in the far left column and very top row. They get lost against the background color of the cells and even further obscured by the intense background color of surrounding cells. There’s no need to de-emphasize what is already de-emphasized.</p>
<p>I also suggest using <strong>short labels</strong> to prevent them from competing with the data. For example, instead of a heading that reads “Grand Total of Annual Revenue,” try something like “Total Revenue” or “Grand Total” instead.</p>
Table Layout Considerations
<p><a href="https://css-tricks.com/w3conf-eric-meyer-the-era-of-intentional-layout/">There once was a time</a> when tables were used to create webpage layouts because, again, it was a simple and understandable way to present the information in the absence of standardized CSS layout features. That’s not the case today, thankfully, but that period taught us a lot about best practices when working with table design that we can use today.</p>
<h3>Rule 1: Fewer Borders = More White Space</h3>
<p>Borders are commonly used to distinguish one element from one another. In tables, specifically, they might be used to form outlines around rows and columns. That distinction is great but faces the same challenge that we’ve covered with using color: <strong>too much of a layout can steal focus from the data</strong>, making the design busy and cluttered. With the proper design and text alignment, however, borders can become unnecessary.</p>
<p>Borders help us navigate the table and delimit individual records. At the same time, if there are many of them in a grid, it becomes a problem in large tables with a lot of rows and columns. To prevent the cells from being too densely connected, try adding more space between them with padding. As I have mentioned before, <strong>negative space is not an enemy but a design saver</strong>.</p>
<p>That said, the law of <a href="https://en.wikipedia.org/wiki/Diminishing_returns">diminishing returns</a> applies to how much space there should be, particularly when considering a table’s width. For example, a table might not need to flex to the full width of its parent container by default. It depends on the content, of course. Avoiding large spacing between columns will help prevent a reader’s eyes from having to travel far distances when scanning data and making mistakes. </p>
<p>I know that many front-enders struggle with column widths. Should they be even? Should they only be as wide as the content that’s in them? It’s a juggling act that, in my mind, is not worth the effort. Some cells will always be either too wide or too narrow when table cells contain data points that result in varying line lengths. Embrace that unevenness, allowing columns to take up a reasonable amount of space they need to present the data and scale down to as little as they need without being so narrow that words and numbers start breaking lines.</p>
<p>Lines should be kept to a minimum. Add them if adjusting the alignment, joining cells, and increased spacing is not enough to indicate the direction — or keep them as light as possible.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/flexmonster-macos-theme-grid.png" /></p>
<p>Allow multi-line wrapping when you really need it, such as when working with longer data points with just enough room around them to indicate the alignment direction. But if you caught yourself thinking of using multi-line wrapping in a grid, then first of all, analyze whether there is a more practical way to visualize the data.</p>
<h3>Rule 2: Stylish rows, stylish columns</h3>
<p>When deciding how to style a table’s rows, it’s important to understand the purpose of the table you are developing. Reducing visual noise will help to present a clear picture of the data on smaller datasets but not for large datasets.</p>
<p>It’s easy for a user to lose their place when scrolling through a table that contains hundreds or thousands of rows. This is where borders can help a great deal, as well as <a href="https://css-tricks.com/snippets/css/css3-zebra-striping-a-table/">zebra striping</a>, for a visual cue that helps anchor a user’s eyes enough to hold focus on a spot while scanning.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/striped-blue-css-theme-flexmonster.png" /></p>
<p>Speaking of zebra striping, it’s often used as a stylistic treatment rather than a functional enhancement. Being mindful of which colors are used for the striping and how they interact with other colors and shades used for highlighting information will go a long way toward maintaining a good user experience that avoids overwhelming color combinations. I often use a slightly darker shade of the table’s default background color on alternating rows (or columns) when establishing stripes. If that’s white, then I will go with the lightest shade of my palette’s base color. The same choice should be made while maintaining the borders — they should be marked but remain invisible.</p>
<p>Typically, row density gravitates around 40px-56px with a minimum padding of 16px on both the right and left edges of each column.</p>
Feature Enhancements
<p>Tables are often thought of as static containers for holding data, but we’ve all interacted with tables that do lots of other things, like filtering and reordering.</p>
<p>Whatever features are added to a table, it’s important to <strong>let users customize the table themselves based on their preferences</strong>. Then the user experience you create can become even better by conforming to the user’s comfort level. As with everything else, there is a line. Smaller datasets may not need the same enhancements for filtering data that large datasets do, for example, because they may wind up causing more confusion than convenience and raise the threshold for understanding the data.</p>
<p>In addition to the ability to customize a table’s elements, such as colors, fonts, conditional formatting, value formatting, and cell sizing, there are a few questions you can ask to help determine the enhancements a table might need for a better experience.</p>
<h3>Could A User Lose Context When Scrolling?</h3>
<p>We’ve already discussed how a table with hundreds of rows or columns can lead to many user scrolling and cognitive errors. Striping is one way to help users remain focused on a particular spot, but what if there’s so much scrolling that the table’s headers are no longer available?</p>
<p>If that’s a possibility, and the headers are important for establishing the context of the presented data, then you might consider <a href="https://css-tricks.com/video-screencasts/205-sticky-positioning-how-it-works-what-can-break-it-and-dumb-tricks/">sticky positioning</a> on the headers so they are always available for reference. <a href="https://css-tricks.com/a-table-with-both-a-sticky-header-and-a-sticky-first-column/">Chris Coyier has a nice demo</a> that implements sticky headers and a sticky first column.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/gmail-interface-menu.png" /></p>
<h3>Who Can Have Problems Using My Design? (Accessibility Support)</h3>
<p>Of all the points, this is the most difficult to implement, but at the same time, in our context, it is the most important. People with diagnosed abnormalities and disorders have a much stronger impact on their work process due to their condition. Therefore, supporting an additional — and optional — accessibility mode is necessary. Each element must be adapted for screen readers, navigable via keyboard, and contain the most semantic markup possible. This will help people who use assistive technology without a loss in performance.</p>
<p><img src="https://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/accessible-table-flexmonster.png" /></p>
Conclusion
<p>Thanks for letting me share my best practices for presenting tabular data on the web. It’s amazing how something as seemingly simple as a table element can quickly grow in scope when we start considering user needs and enhancements to include as many of those needs as possible.</p>
<p>We discussed a great number of things that get in the way of an inclusive table design, including our own cognitive biases and design choices. At the same time, we covered strategies for tackling those obstacles from a wide range of considerations, from design choices all the way to determining possible features for enhancing a user’s experience when interacting with the table and the data it contains.</p>
<p>There can be a lot of headwork that goes into a table implementation, but not everything in this article has to be considered for every situation. A lot of the advice I’ve shared — like so many other things on the web — simply depends on the specific case. That’s why we spent a good amount of time defining the goals for an effective table experience:</p>
<ul>
<li>Reduce the cognitive load.</li>
<li>Maximize the signal-to-noise ratio.</li>
<li>Use correct cognitive biases to boost the user experience.</li>
</ul>
<p>But if you only take one thing away from this, I’d say it is this: in data analytics <strong>data &gt; than everything else</strong>. Keeping that idea in mind throughout the development process prevents spoiling your design with frivolous designs and features that work against our goals.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2019/01/table-design-patterns-web/">Table Design Patterns On The Web</a>,” Chen Hui Jing</li>
<li>“<a href="https://www.smashingmagazine.com/2019/12/quantitative-data-tools-uxdesigners/">Quantitative Data Tools For UX Designers</a>,” Adonis Raduca</li>
<li>“<a href="https://www.smashingmagazine.com/2022/06/easy-build-support-tables-figma/">How To Easily Build And Support Tables In Figma</a>,” Andrii Zhdan</li>
<li>“<a href="https://www.smashingmagazine.com/2022/12/accessible-front-end-patterns-responsive-tables-part1/">Accessible Front-End Patterns For Responsive Tables</a>,” Adrian Bece</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Yuliia Nikitina)</author>
      <enclosure url="http://files.smashing.media/articles/universal-cognitive-friendly-ux-design-tables-grids/universal-cognitive-friendly-ux-design-tables-grids.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Primitive Objects In JavaScript: When To Use Them (Part 2)]]></title>
      <link>https://smashingmagazine.com/2023/06/primitive-objects-javascript-part-2/</link>
      <guid>https://smashingmagazine.com/2023/06/primitive-objects-javascript-part-2/</guid>
      <pubDate>Mon, 05 Jun 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[In the second part of the series, Kirill looks at the usefulness of primitive objects, exploring how reducing capabilities could be a benefit for your project.]]></description>
      <content:encoded><![CDATA[<p>Writing programs in JavaScript is approachable at the beginning. The language is forgiving, and you get accustomed to its affordances. With time and experience working on complex projects, you start to appreciate things like control and precision in the development flow.</p>
<p>Another thing you might start to appreciate is predictability, but that’s way less of a guarantee in JavaScript. While primitive values are predictive enough, objects aren’t. When you get an object as an input, you need to check for everything:</p>
<ul>
<li>Is it an object? </li>
<li>Does it have that property you’re looking for? </li>
<li>When a property holds <code>undefined</code>, is that its value, or is the property itself missing?</li>
</ul>
<p>It’s understandable if this level of uncertainty leaves you slightly paranoid in the sense that you start to question all of your choices. Subsequently, your code becomes defensive. You think more about whether you’ve handled all the faulty cases or not (chances are you have not). And in the end, your program is mostly a collection of checks rather than bringing real value to the project.</p>
<p>By making objects <em>primitive</em>, many of the potential failure points are moved to a single place — the one where objects are initialized. If you can make sure that your objects are initialized with a certain set of properties and those properties hold certain values, you don’t have to check for things like the existence of properties anywhere else in your program. You could guarantee that <code>undefined</code> is a value if you need to.</p>
<p>Let’s look at one of the ways we can make primitive objects. It’s not the only way or even the most interesting one. Rather, its purpose is to demonstrate that working with read-only objects doesn’t have to be cumbersome or difficult.</p>
<p><strong>Note</strong>: <em>I also recommend you to check <a href="https://www.smashingmagazine.com/2023/02/discovering-primitive-objects-javascript-part1/">the first part of the series</a>, where I covered some aspects of JavaScript that help bring objects closer to primitive values, which in return allows us to benefit from common language features that aren’t usually associated with an object, like comparisons and arithmetic operators.</em></p>
Making Primitive Objects In Bulk
<p>The most simple, most <em>primitive</em> (pun intended) way to create a primitive object is the following:</p>
<pre><code>const my_object = Object.freeze({});
</code></pre>

<p>This single line results in an object that can represent anything. For instance, you could implement a tabbed interface using an empty object for each tab.</p>
<div>
<pre><code>import React, { useState } from "react";

const summary_tab = Object.freeze({});
const details_tab = Object.freeze({});

function TabbedContainer({ summary_children, details_children }) {
    const [ active, setActive ] = useState(summary_tab);

    return (
        &lt;div className="tabbed-container"&gt;
            &lt;div className="tabs"&gt;
                &lt;label
                    className={active === summary_tab ? "active" : ""}
                    onClick={() =&gt; {
                        setActive(summary_tab);
                    }}
                &gt;
                    Summary
                &lt;/label&gt;
                &lt;label
                    className={active === details_tab ? "active": ""}
                    onClick={() =&gt; {
                        setActive(details_tab);
                    }}
                &gt;
                    Details
                &lt;/label&gt;
            &lt;/div&gt;
            &lt;div className="tabbed-content"&gt;
                {active === summary_tab &amp;&amp; summary_children}
                {active === details_tab &amp;&amp; details_children}
            &lt;/div&gt;
        &lt;/div&gt;
    );
}

export default TabbedContainer;
</code></pre>
</div>

<p>If you’re like me, that <code>tabs</code> element just screams to be reworked. Looking closely, you’ll notice that tab elements are similar and need two things, such as an <strong>object reference</strong> and a <strong>label string</strong>. Let’s include the <code>label</code> property in the <code>tabs</code> objects and move the objects themselves into an array. And since we’re not planning to change <code>tabs</code> in any way, let’s also make that array read-only while we’re at it.</p>
<pre><code>const tab_kinds = Object.freeze([
    Object.freeze({ label: "Summary" }),
    Object.freeze({ label: "Details" })
]);
</code></pre>

<p>That does what we need, but it is verbose. The approach we’ll look at now is often used to hide repeating operations to reduce the code to just the data. That way, it is more apparent when the data is incorrect. What we also want is to <code>freeze</code> objects (including the array) by default rather than it being something we have to remember to type out. For the same reason, the fact that we have to specify a property name every time leaves room for errors, like typos.</p>
<p>To easily and consistently initialize arrays of primitive objects, I use a <code>populate</code> function. I don’t actually have a single function that does the job. I usually create one every time based on what I need at the moment. In the particular case of this article, this is one of the simpler ones. Here’s how we’ll do it:</p>
<pre><code>function populate(...names) {
    return function(...elements) {
        return Object.freeze(
            elements.map(function (values) {
                return Object.freeze(names.reduce(
                    function (result, name, index) {
                        result[name] = values[index];
                        return result;
                    },
                    Object.create(null)
                ));
            })
        );
    };
}
</code></pre>

<p>If that one feels dense, here’s one that’s more readable:</p>
<pre><code>function populate(...names) {
    return function(...elements) {
        const objects = [];

        elements.forEach(function (values) {
            const object = Object.create(null);

            names.forEach(function (name, index) {
                object[name] = values[index];
            });

            objects.push(Object.freeze(object));
        });

        return Object.freeze(objects);
    };
}
</code></pre>

<p>With that kind of function at hand, we can create the same array of tabbed objects like so:</p>
<pre><code>const tab_kinds = populate(
    "label"
)(
    [ "Summary" ],
    [ "Details" ]
);
</code></pre>

<p>Each array in the second call represents the values of resulting objects. Now let’s say we want to add more properties. We’d need to add a new name to the first call and a value to each array in the second call.</p>
<pre><code>const tab_kinds = populate(
    "label",
    "color",
    "icon"
)(                                          
    [ "Summary", colors.midnight_pink, "💡" ],
    [ "Details", colors.navi_white, "🔬" ]
);
</code></pre>

<p>Given some whitespace, you could make it look like a table. That way, it’s much easier to spot an error in huge definitions.</p>
<p>You may have noticed that <code>populate</code> returns another function. There are a couple of reasons to keep it in two function calls. First, I like how two contiguous calls create an empty line that separates keys and values. Secondly, I like to be able to create these sorts of generators for similar objects. For example, say we need to create those label objects for different components and want to store them in different arrays.</p>
<p>Let’s get back to the example and see what we gained with the <code>populate</code> function:</p>
<div>
<pre><code>import React, { useState } from "react";
import populate_label from "./populate_label";

const tabs = populate_label(
    [ "Summary" ],
    [ "Details" ]
);

const [ summary_tab, details_tab ] = tabs;

function TabbedContainer({ summary_children, details_children }) {
    const [ active, setActive ] = useState(summary_tab);

    return (
        &lt;div className="tabbed-container"&gt;
            &lt;div className="tabs"&gt;
                {tabs.map((tab) =&gt; (
                    &lt;label
                        key={tab.label}
                        className={tab === active ? "active" : ""}
                        onClick={() =&gt; {
                            setActive(tab);
                        }}
                    &gt;
                        {tab.label}
                    &lt;/label&gt;
                )}
            &lt;/div&gt;
            &lt;div className="tabbed-content"&gt;
                {summary_tab === active &amp;&amp; summary_children}
                {details_tab === active &amp;&amp; details_children}
            &lt;/div&gt;
        &lt;/div&gt;
    );
}

export default TabbedContainer;
</code></pre>
</div>


<p>Using primitive objects makes writing UI logic straightforward.</p>
<p>Using functions like <code>populate</code> is less cumbersome for creating these objects and seeing what the data looks like.</p>
Check That Radio
<p>One of the alternatives to the approach above that I’ve encountered is to retain the <code>active</code> state — whether the tab is selected or not — stored as a property of the <code>tabs</code> object:</p>
<pre><code>const tabs = [
    {
        label: "Summary",
        selected: true
    },
    {
        label: "Details",
        selected: false
    },
];
</code></pre>

<p>This way, we replace <code>tab === active</code> with <code>tab.selected</code>. That might seem like an improvement, but look at how we would have to change the selected tab:</p>
<pre><code>function select_tab(tab, tabs) {
    tabs.forEach((tab) =&gt; tab.selected = false);
    tab.selected = true;
}
</code></pre>

<p>Because this is logic for a radio button, only a single element can be selected at a time. So, before setting an element to be selected, we first need to make sure that all the other elements are unselected. Yes, it’s silly to do it like that for an array with only two elements, but the real world is full of longer lists than this example.</p>
<p>With a primitive object, we need <strong>a single variable that represents the selected state</strong>. I suggest setting the variable on one of the elements to make it the currently-selected element or setting it to <code>undefined</code> if your implementation allows for no selection.</p>
<p>With multi-choice elements like checkboxes, the approach is almost the same. We replace the selection variable with an array. Each time an element is selected, we push it to that array, or in the case of <a href="https://redux.js.org">Redux</a>, we create a new array with that element present. To unselect it, we either splice it or filter out the element.</p>
<pre><code>let selected = []; // Nothing is selected.

// Select.
selected = selected.concat([ to_be_selected ]);

// Unselect.
selected = selected.filter((element) =&gt; element !== to_be_unselected);

// Check if an element is selected.
selected.includes(element);
</code></pre>

<p>Again, this is straightforward and concise. You don’t need to remember if the property is called <code>selected</code> or <code>active</code>; you use the object itself to determine that. When your program becomes more complex, those lines would be the least likely to be refactored.</p>
<p>In the end, <strong>it is not a list element’s job to decide whether it is selected or not</strong>. It shouldn’t hold this information in its state. For example, what if it’s simultaneously selected and not selected in several lists at a time?</p>
Alternative To Strings
<p>The last thing I’d like to touch on is an example of string usage I often encounter. </p>
<p>Text is a good trade-off for interoperability. You define something as a string and instantly get a representation of a context. It’s like getting an instant energy rush from eating sugar. As with sugar, the best case is that you get nothing in the long term. That said, it is unfulfilling, and you inevitably get hungry again.</p>
<p>The problem with strings is that they are for humans. It’s natural for us to distinguish things by giving them a name. But a program doesn’t understand the meaning of those names. </p>
<p>Most code editors and integrated development environments (IDEs) don’t understand strings. In other words, your tools won’t tell you whether or not the string is correct.</p>
<p>Your program only knows whether two strings are <em>equal</em> or not. And even then, telling whether strings are equal or unequal doesn’t necessarily provide an insight into whether or not any of those strings contain a typo.</p>
<p>Objects provide more ways to see that something is wrong before you run your program. Because you cannot have literals for primitive objects, you would have to get a reference from somewhere. For example, if it’s a variable and you make a typo, you get a <strong>reference error</strong>. There are tools that could catch that sort of thing before the file is saved.</p>
<p>If you were to get your objects from an array or another object, then JavaScript won’t give you an error when the property or an index does not exist. What you get is <code>undefined</code>, and that’s something you could check for. You have a single thing to check. With strings, you have surprises you might want to avoid, like when they’re empty.</p>
<p>Another use of strings I try to avoid is checking if we get the object we want. Usually, it’s done by storing a string in a property named <code>id</code>. Like, let’s say we have a variable. In order to check if it holds the object we want, we might need to check if a string in the <code>id</code> property matches the one we expect it to. To do that, we would first check if the variable holds an object. If the variable does hold an object, but the object lacks the <code>id</code> property, then we get <code>undefined</code>, and we’re fine. However, if we have one of the bottom values in that variable, then we are unable to ask for the property directly. Instead, we have to do something to either make sure that only objects arrive at this point or to do both checks in place.</p>
<div>
<pre><code>const myID = "Oh, it's so unique";

function magnification(value) {
    if (value &amp;&amp; typeof value === "object" &amp;&amp; value.id === myID) {
        // do magic
    }
}
</code></pre>
</div>

<p>Here’s how we can do the same with primitive objects:</p>
<pre><code>import data from "./the file where data is stored";

function magnification(value) {
    if (value === data.myObject) {
        // do magic
    }
}
</code></pre>

<p>The benefit of strings is that they are a single thing that could be used for internal identification and are immediately recognizable in logs. They sure are easy to use right out of the box, but they are not your friend as the complexity of a project increases.</p>
<p>I find <strong>there’s little benefit in relying on strings for anything other than output to the user</strong>. The lack of interoperability of strings in primitive objects could be solved gradually and without the need to change how you handle basic operations, like comparisons.</p>
Wrapping Up
<p>Working directly with objects frees us from the pitfalls that come with other methods. Our code becomes simpler because we write what your program needs to do. By organizing your code with primitive objects, we are less affected by the dynamic nature of JavaScript and some of its baggage. Primitive objects give us more guarantees and a greater degree of predictability.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/09/javascript-api-guide/">JavaScript APIs You Don’t Know About</a>, Juan Diego Rodríguez</li>
<li><a href="https://www.smashingmagazine.com/2022/09/useful-javascript-data-grid-libraries/">Useful JavaScript Data Grid Libraries</a>, Zara Cooper</li>
<li><a href="https://www.smashingmagazine.com/2021/08/interactive-gantt-chart-component-vanilla-javascript/">Creating An Interactive Gantt Chart Component With Vanilla JavaScript (Part 1)</a>, Anna Prenzel</li>
<li><a href="https://www.smashingmagazine.com/2022/07/look-remix-differences-next/">A Look At Remix And The Differences With Next.js</a>, Facundo Giuliani</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Kirill Myshkin)</author>
      <enclosure url="http://files.smashing.media/articles/primitive-objects-javascript-part-2/primitive-objects-javascript-part-2.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[How To Enable Collaboration In A Multiparty Setting]]></title>
      <link>https://smashingmagazine.com/2023/06/enable-collaboration-multiparty-setting/</link>
      <guid>https://smashingmagazine.com/2023/06/enable-collaboration-multiparty-setting/</guid>
      <pubDate>Fri, 02 Jun 2023 16:00:00 GMT</pubDate>
      <description><![CDATA[As Artificial Intelligence becomes more widespread, so too does the adoption of digital agents and voice interactions. Explore the power of mixed reality systems and multimodal communication to enhance collaboration between consultants and clients, transforming advisory services.]]></description>
      <content:encoded><![CDATA[<p>As Artificial Intelligence becomes more widespread and pervasive, the transition to a data-driven age poses a conundrum for many: Will AI replace me at my job? Can it become smarter than humans? Who is making the important decisions, and who is accountable? </p>
<p>AI is becoming more and more complex, and tools like ChatGPT, Siri, and Alexa are already a part of everyday life to an extent where even experts struggle to grasp and explain the functionality in a tangible way. How can we expect the average human to trust such a system? Trust matters not only in decision-making processes but also in order for societies to be successful. Ask yourself this question: Who would you trust with a big personal or financial decision?</p>
<p>Today’s banking counseling sessions are associated with various challenges: Besides preparation and follow-up, the consultant is also busy with many different tasks during the conversation. The cognitive load is high, and tasks are either done on paper or with a personal computer, which is why the consultant can’t engage sufficiently with the client. Clients are mostly novices who are not familiar with the subject matter. The consequent state of passivity or uncertainty often stems from a phenomenon known as information asymmetry, which occurs when the consultant has more or better information than the client.</p>
<p>In this article, we propose a new approach based on co-creation and collaboration in advisory services. An approach that enables the consultant to simply focus on the customers’ needs by leveraging the assistance of a digital agent. We explore the opportunities and limitations of integrating a digital agent into an advisory meeting in order to allow all parties to engage actively in the conversation. </p>
Rethinking Human-Machine Environments In Advisory Services
<p>Starting from the counseling session described above, we tackled the issues of <strong>information asymmetry, trust building,</strong> and <strong>cognitive overload</strong> within the context of a research project.</p>
<p>Understanding the linguistic landscape of Switzerland with its various Swiss-German dialects, the digital agent “Mo” supports consultants and clients in banking consultations by taking over time-consuming tasks, providing support during the consultation, and extracting information. By means of an interactive table, the consultation becomes a multimodal environment in which the agent acts as a third interaction partner. </p>
<p><img src="https://files.smashing.media/articles/enable-collaboration-multiparty-setting/interactive-tabletop-projection.png" /></p>
<p>The setup enables a collaborative exchange between interlocutors, as information is equally visible and accessible to all parties (shared information). Content can be placed anywhere on the table through natural, haptic interactions. Whether the agent records information in the background, actively participates in the composition of a stock portfolio, or warns against risky transactions, Mo “sits” at the table throughout the entire consultation. </p>
<p>To promote active participation from all parties during the counseling session, we have pinpointed crucial elements that facilitate collaboration in a multi-party setting:</p>
<ul>
<li><strong>Shared Device</strong><br />All information is made equally visible and interactable for all parties. </li>
<li><strong>Collaborative Digital Agent</strong><br />By using human modes of communication, social cues, and the support of local dialects, the agent becomes accessible and accepted.</li>
<li><strong>Comprehensible User Interfaces</strong><br />Multimodal communication helps to convey information in social interactions. Through the use of different output channels, we can convey information in different complexities.</li>
<li><strong>Speech Patterns for Voice User Interfaces</strong><br />Direct orders to an AI appear unnatural in a multi-party setting. The use of different speech and turn-taking patterns allows the agent to integrate naturally into the conversation.</li>
</ul>
<p>In the next sections, we will take a closer look at how collaborative experiences can be designed based on those key factors.</p>
“Hello Mo”: Designing Collaborative Voice User Interfaces
<p>Imagine yourself sitting at the table with your bank advisor in a classic banking advisory meeting. The consultant tries to explain to you a ton of banking-specific stuff, all while using a computer or tablet to display stock price developments or to take notes on your desired transactions. In this setup, it is hard for consultants to keep up a decent conversation while retrieving and entering data into a system. This is where voice-based interactions save the day. </p>
<p>When using voice as an input method during a conversation, users do not have to change context (e.g., take out a tablet, or operate a screen with a mouse or keyboard) in order to enter or retrieve data. This helps the consultant to perform a task more efficiently while being able to foster a personal relationship with the client. However, the true strength of voice interactions lies in their <strong>ability to handle complex information entry</strong>. For example, purchasing stocks requires an input of multiple parameters, such as the title or the number of shares. Where in a GUI, all of these input variables have to be tediously entered by hand, VUIs offer an option of entering everything with one sentence. </p>
<p>Nonetheless, VUIs are still uncharted territory for many users and are accordingly viewed with a huge amount of skepticism. Thus, it is important to consider how we can create voice interactions that are accessible and intuitive. To achieve this goal, it is essential to grasp the fundamental principles of voice interaction, such as the following speech patterns.</p>
<h4>Command and Control</h4>
<p>This pattern is widely used by popular voice assistants such as Siri, Alexa, and Google Assistant. As the name implies, the assistants are addressed with a direct command — often preceded by a signal “wake word.” For example,</p>
<blockquote>“Hey, Google” → Command: “Turn on the Bedroom Light”</blockquote>

<h4>Conversational</h4>
<p>The Conversational Pattern, in which the agent understands intents directly from the context of the conversation, is less common in productive systems. Nevertheless, we can find examples in science fiction, such as HAL (<em>2001: A Space Odyssey</em>) or J.A.R.V.I.S. (<em>Iron Man 3</em>). The agent can directly extract intent from natural speech without the need for a direct command to be uttered. In addition, the agent may speak up on his own initiative.</p>
<p>As the Command and Control approach is widely used in voice applications, users are more familiar with this pattern. However, utilizing the Conversational Pattern can be advantageous, as it enables users to interact with the agent effortlessly, eliminating the requirement for them to be familiar with predefined commands or keywords, which they may formulate incorrectly.</p>
<p>In our case of a multi-party setting, users perceived the Conversational Pattern in the context of transaction detection as surprising and unpredictable. For the most part, this is due to the limitations of the intent recognition system. For example, during portfolio customization, stock titles are discussed actively. Not every utterance of a stock title corresponds to a transaction, as the consultant and client are debating possibilities before execution. It is fairly difficult or nearly impossible for the agent to distinguish between option and intent. In this case, command structures offer more reliability and control at the expense of the naturalness of the conversation since the Command and Control Pattern results in unnatural interruption and pauses in the conversation flow. To get the best of both worlds (natural interactions and predictable behavior), we introduce a completely new speech pattern:</p>
<h4>Conversational Confirmation</h4>
<p>Typically, transaction intents are formulated according to the following structure:</p>
<blockquote>Interlocutor 1: We then buy 20 shares of Smashing Media Stocks (intent).<br />Interlocutor 2: Yes, let’s do that (confirmation).<br />Interlocutor 1: All right then, let’s buy Smashing Media Stocks (reconfirmation).</blockquote>

<p>In the current implementation of the Conversational Pattern, the transaction would be executed after the first utterance, which was often perceived to be irritating. In the Conversational Confirmation pattern, the system waits for both parties to confirm and executes the transaction only after the third utterance. By adhering to the natural rules of human conversation, this approach meets the users’ expectations.</p>
<h4>Conclusion</h4>
<ol>
<li>Regarding the users’ mental model of digital agents, the Command and Control Pattern provides users with more control and security.</li>
<li>The Command and Control Pattern is suitable as a fallback in case the agent does not understand an intent.</li>
<li>The Conversational Pattern is suitable when information has to be obtained passively from the conversation. (logging)</li>
<li>For collaborative counseling sessions, the Conversational Confirmation Pattern could greatly enhance the counseling experience and lead to a more natural conversation in a multi-party setting.</li>
</ol>
Sharing Is Caring: The Concept Of The Shared Device
<p>In a world where personal devices such as PCs, mobile phones, and tablets are prevalent, we have grown accustomed to interacting with technical devices in “single-player mode.” The use of private devices undoubtedly has its advantages in certain situations (as in not having to share the million cute cats we google during work with our boss). But when it comes to collaborative tasks — sharing is caring. </p>
<p>Put yourself back into the previously described scenario. At some point, the consultant is trying to show stock price trends on the computer or tablet screen. However, regardless of how the screen is positioned, at least one of the participants has limited vision. Due to the fact that the computer is a personal device of the consultant, the client is excluded from actively engaging with it — leading to the problem of unequal distribution of information.</p>
<p>By integrating an interactive tabletop projection into the consultation meeting, we aimed to overcome the limitations of  “personal devices,” improving trust, transparency, and decision empowerment. It is essential to understand that human communication relies on various channels, i.e., modalities (voice, sight, body language, and so on), which help individuals to express and comprehend complex information more effectively. The interactive table as an output system facilitates this aspect of human communication in the digital-physical realm. In a shared device, we use the physical space as an interaction modality. The content can be intuitively moved and placed in the interaction space using haptic elements and is no longer bound to a screen. These haptic tokens are equally accessible to all users, encouraging especially novice users to interact and collaborate on a regular tabletop surface. </p>
<p>The interactive tabletop projection also makes information more comprehensible for users. For example, during the consultation, the agent updates the portfolio visualization in real time. The impact of a transaction on the overall portfolio can be directly grasped and pulled closer by the client and advisor and used as a basis for discussion.</p>
<p>A result is a <strong>transparent approach to information</strong>, which increases the understanding of bank-specific and system-specific processes, consequently improving trust in the advisory service and leading to more interaction between customer and advisor.</p>
<p>Apart from the spatial modality, the proposed mixed reality system provides other input and output channels, each with its unique characteristics and strengths. If you are interested in this topic <a href="https://www.smashingmagazine.com/2017/10/combining-graphical-voice-interfaces/">this article on Smashing</a> provides a great comparison of VUIs and GUIs and when to use which.</p>
<h4>Conclusion</h4>
<p>The proposed mixed reality system fosters collaboration since:</p>
<ol>
<li>Information is equally accessible to all parties (reducing information asymmetry, fostering shared understanding, and building trust).</li>
<li>One user interface can be operated collectively by several interaction partners (engagement).</li>
<li>Multisensory human communication can be transferred to the digital space (ease of use).</li>
<li>Information can be better comprehended due to multimodal output (ease of use).</li>
</ol>
Next Stop: Collaborative AI (Or How To Make A Robot Likable)
<p>For consultation services, we need an intelligent agent to reduce the consultant’s cognitive load. Can we design an agent that is trustworthy, even likable, and accepted as a third collaboration partner?</p>
<h3>Empathy For Machines</h3>
<p>Whether it’s machines or humans, empathy is crucial for interactions, and social cues are the salt and pepper to achieve this. Social cues are verbal or nonverbal signals that guide conversations and other social interactions by influencing our perceptions of and reactions toward others. Examples of social cues include eye contact, facial expressions, tone of voice, and body language. These impressions are important communicative tools because they provide social and contextual information and facilitate social understanding. In order for the agent to appear approachable, likable, and trustworthy, we have attempted to incorporate social elements while designing the agent. As described above, social cues in human communication are transported through different channels. Transferring to the digital context once again requires the use of multimodality. </p>
<p>The visual manifestation of the agent enables the elaboration of character-defining elements, such as facial expressions and body language in digital space, analogous to the human body. Highlighting important context information, such as indicating system status. </p>
<p>In terms of voice interactions, social cues play an important role in system feedback. For example, a common human communication practice is to confirm an action by stating a short “mhm” or “ok.” Applying this practice to the agent’s behavior, we tried to create a more transparent and natural feeling VUI.</p>
<p>When designing voice interactions, it’s important to note that the <strong>agent’s perception is heavily influenced by the speech pattern utilized</strong>. Once the agent is addressed with a direct command, it is assigned a subordinate role (servant) and is no longer perceived as an equal interaction partner. Recognizing the intent of the conversation independently, the agent is perceived as more intelligent and trustworthy. </p>
<h3>Mo: Ambassador Of System Transparency</h3>
<p>Despite great progress in Swiss German speech recognition, transaction misrecognition still occurs. While dealing with an imperfect system, we have tried to take advantage of it by leveraging the agent to make system-specific processes more understandable and transparent. We implemented the well-known usability heuristic: the more comprehensible system-specific processes are, the better the understanding of a system and the more likely users feel empowered to interact with it (and the more they trust and accept the agent).</p>
<p>A core activity of every banking consultation meeting is the portfolio elaboration phase, where the consultant, client, and agent try to find the best investment solutions. In the process of adjusting the portfolio, transactions get added and removed with the helping hand of the agent. If “Mo” is not fully confident of a transaction, “Mo” checks in and asks whether the recognized transaction has been understood correctly.</p>
<p>The agent’s voice output follows the usual conventions of a conversation: as soon as an interlocutor is unsure regarding the content of a conversation, he or she speaks up, politely apologizes, and asks if the understood content corresponds to the intent of the conversation. In case the transaction was misunderstood, the system offers the possibility to correct the error by adjusting the transaction using touch and a scrolling token (Microsoft Dial). We deliberately chose these alternative input methods over repeating the intent with voice input to avoid repetitive errors and minimize frustration. By giving the user the opportunity to take action and be in control of an actual error situation, the overall acceptance of the system and the agent are strengthened, creating a nutritious soil for collaboration.</p>
<h4>Conclusion:</h4>
<ul>
<li>Social cues provide opportunities to design the agent to be more approachable, likable, and trustworthy. They are an important tool for transporting context information and enabling system feedback.</li>
<li>Making the agent part of explaining system processes helps improve the overall acceptance and trust in both the agent and the system (Explainable AI).</li>
</ul>
Towards The Future
<p>Irrespective of the specific consulting field, whether it’s legal, healthcare, insurance, or banking, two key factors significantly impact the quality of counseling. The first factor involves the advisor’s <strong>ability to devote undivided attention to the client</strong>, ensuring their needs are fully addressed. The second factor pertains to structuring the counseling session in a manner that facilitates <strong>equal access to information for all participants</strong>, presenting it in a way that even inexperienced individuals can understand. By enhancing customer experience through promoting self-determined and well-informed decision-making, businesses can boost customer retention and foster loyalty.</p>
<p>Introducing a shared device in counseling sessions offers the potential to address the problem of information asymmetry and promote collaboration and a shared understanding among participants. Does this mean that every consultation session depends on the proposed mixed reality setup? For physical consultations, the interactive tabletop projection (or an equivalent interaction space where all participants have equal access to information) does enable a democratic approach to information — personal devices just won’t do the job. </p>
<p>In the context of digital (remote) consultations, collaboration, and transparency remain crucial, but the interaction space undergoes significant changes, thereby altering the requirements. Regardless of the specific interaction space, careful consideration must be given to conveying information in an understandable manner. Utilizing different modalities can enhance the comprehensibility of user interfaces, even in traditional mobile or desktop UIs.</p>
<p>To alleviate the cognitive load on consultants, we require a system capable of managing time-consuming tasks in the background. However, it is important to acknowledge that digital agents and voice interactions remain unfamiliar territory for many users, and there are instances where voice processing falls short of users’ high expectations. Nevertheless, speech processing will certainly see great improvements in the next few years, and we need to start thinking today about what tomorrow’s interactions with voice assistants might look like.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/02/voice-user-interfaces-guide/">Everything You Want To Know About Creating Voice User Interfaces</a>, Nick Babich &amp; Gleb Kuznetsov</li>
<li><a href="https://www.smashingmagazine.com/2021/06/alternative-voice-ui-voice-assistants/">An Alternative Voice UI To Voice Assistants</a>, Ottomatias Peura</li>
<li><a href="https://www.smashingmagazine.com/2019/12/voice-skills-google-assistant-amazon-alexa/">Creating Voice Skills For Google Assistant And Amazon Alexa</a>, Tris Tolliday</li>
<li><a href="https://www.smashingmagazine.com/2020/10/face-motion-typography/">How To Use Face Motion To Interact With Typography</a>, Edoardo Cavazza</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Hannah Kühne &amp; Madlaina Kalunder)</author>
      <enclosure url="http://files.smashing.media/articles/enable-collaboration-multiparty-setting/enable-collaboration-multiparty-setting.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[iA Presenter: A Case Study On Product Pricing Considerations]]></title>
      <link>https://smashingmagazine.com/2023/06/ia-presenter-case-study-product-pricing-considerations/</link>
      <guid>https://smashingmagazine.com/2023/06/ia-presenter-case-study-product-pricing-considerations/</guid>
      <pubDate>Fri, 02 Jun 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[Pricing a product or service is one of the more challenging aspects of product development. Pricing is an inexact science, and chances are you will not get it right the first time. But where do you even begin? Let’s explore the important considerations that go into product pricing.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://ia.net/">iA</a></p>
<p>So, you’ve created a thing. That thing could be anything, say a product the world never knew it needed or maybe a stellar SaaS app that makes everyone way more productive. You had a brilliant idea and took the initiative to make it happen. It’s time to put it on the market!</p>
<p>But wait… how much money are you going to charge for this thing? That’s often a way more difficult question to answer than it might seem. I mean, slap a price on the tin, and that’s it, right?</p>
<p>The truth is that pricing a product or service is one of the more challenging aspects of product development. <strong>Pricing is an inexact science</strong>, and chances are you will not get it right the first time. But where do you even begin?</p>
<p>That’s where the team at <a href="https://ia.net/">Information Architects</a> — commonly known as iA — found itself when tasked with pricing a new product called <a href="https://ia.net/presenter">iA Presenter</a>. iA already had a hit product on its hands, the popular <a href="https://ia.net/writer">iA Writer</a> app, with its claim to fame being a minimal, distraction-free writing interface. iA Writer is already a mature offering, having been available for many years and having undergone several significant iterations since its initial release. How does a new offering like iA Presenter fit into the picture?</p>
<p><img src="https://files.smashing.media/articles/ia-presenter-case-study-product-pricing-considerations/iA-Presenter-Boxed.jpg" /></p>
<p>Let’s use iA Presenter to study the considerations that go into product pricing. Its status as a brand-new product that sits alongside an existing product with an established history makes iA Presenter an interesting case study on pricing. Plus, the iA team was generous enough to share a bunch of the research and work that went into their pricing for iA Presenter.</p>
Finding Pricing Parallels
<p>The first step to pricing might be looking at what others are doing. Chances are that you are not the only player in the market, and you can certainly <strong>learn by observing what others are doing</strong>. I know that’s what I did when getting into the pricing of a SaaS-based app. There were plenty of competitors in that particular market, and mapping them out in a spreadsheet was a nice way to compare the similarities and differences — not only in the prices themselves but the <strong>pricing models</strong> as well. Some were one-time purchases, but many were recurring subscriptions. Some offered free trials, while others relied on a generous return policy. Some required a credit card upfront, and others allowed you to jump right into the app. You get the idea. There’s more to pricing than meets the eye.</p>
<p>The key is to <strong>find parallels</strong> between what others are doing and what aligns with what you’re doing. If everyone else is selling subscriptions, then maybe that’s clear enough for you to do the same. Or perhaps it’s more of an <strong>opportunity to differentiate your product</strong>, offering a pricing model that might appeal to an overlooked segment of the market.</p>
<p>The purpose of finding parallels is to prevent sticker shock by setting a price that is far outlier from what the rest of the market has already set.</p>
<p>iA says it extremely well in a <a href="https://ia.net/topics/how-much-would-you-charge-for-ia-presenter">blog post that’s incredibly transparent with their findings</a>:</p>
<blockquote>“As you can see, the pricing ranges from $5 to $25 per user. There are outliers on the upper scale. Some of them offer a free model for individuals or low-usage cases. As you already know, they can do that because they have venture capital or run on an ad-based model (Google). Google and PowerPoint come as part of a suite.”<br />—iA, “<a href="https://ia.net/topics/how-much-would-you-charge-for-ia-presenter">Presenter Pricing (I)</a>”</blockquote>

<p>Ah! There’s always a story lurking in the details. Outliers can exist, and they might actually be on the low end of the spectrum. Competing on price alone always feels like a risky call; just ask any company that’s had to play along with <a href="https://www.cips.org/supply-management/news/2017/march/wal-mart-to-squeeze-suppliers-to-win-discount-chain-price-war-/">Walmart’s aggressive tactics to be a low-price leader</a>.</p>
Identifying Opportunities
<p>Perhaps the most important lesson from my own pricing research is that finding parallels in the market will also provide <strong>a clearer picture of what value your product provides</strong>. Does your product do something that the others don’t? Is it so much easier to use than the rest that the user experience is where the value comes from?</p>
<p>Add those things to the spreadsheet! The spreadsheet becomes more of a matrix than a competitor list. You can use it to surface what’s unique about your product and lean into it when determining the overall value your product offers compared to everyone else.</p>
<p>Again, the iA team throws a bit of a curveball based on its recent experience:</p>
<blockquote>“Whether a price is low, high, or right depends on what [customers] compare it to. Customers will compare apples and oranges”.<br />—iA, “<a href="https://ia.net/topics/how-much-would-you-charge-for-ia-presenter">Presenter Pricing (I)</a>”</blockquote>

<p>Did you catch that last point? You may need to <strong>find pricing parallels with products that are tangentially related to your market</strong> because you can’t control what you might be compared to. My own pricing journey was on a hosted calendar, and while it has way less in common with something like Google Calendar, customers would inevitably compare our offering to it because Google Calendar is such a common point of reference when talking about anything related to online calendars.</p>
Starting The Conversation
<p>The topic of pricing usually comes up during product development but could certainly come much sooner. The closer the finish line for development gets, the more the reality sets in that there’s work to do to get the product to market, and pricing is one step that simply cannot be skipped — how else will customer compensate you for the pleasure of getting their hands on a product?</p>
<p>You could start spewing numbers until one resonates with you, but that’s rather subjective. Will your customers see the same value in the product that you do? It’s worth checking, and sometimes it works to <strong>directly ask your customers</strong> — whether it’s existing customers or a target audience you’ve identified.</p>
<p>That’s what iA did when they published the question <a href="https://ia.net/topics/how-much-would-you-charge-for-ia-presenter">“How Much Would You Charge for iA Presenter?”</a> in the aforementioned blog post from November 2022. The post provides oodles of context for readers to get an idea of what the iA team was already considering and what they’ve learned from an initial round of research on different pricing models.</p>
<p>What I like about this approach is the transparency, sure, but also how it leads to two other things:</p>
<ul>
<li><strong>Setting expectations</strong><br />iA had already <a href="https://ia.net/?post_type=post&amp;p=11525">introduced iA Presenter in another post</a> that precedes the call for pricing opinions. But in bringing pricing to the forefront, the team is giving existing and potential customers a heads-up of what’s to come. So, even if they settled on a high price point that is an outlier in the market, at least everyone is already familiar with the thinking behind it.</li>
<li><strong>Data</strong><br />Posing the question means they had opened the door for customers to weigh in. That’s the sort of feedback that can be designed as a survey, with the data helping inform pricing experiments and identify insightful patterns.</li>
</ul>
Parsing Information
<p>Have you ever had to design a survey? Good gosh, that can be a frustrating experience. The challenge is to get useful feedback that leads to insights that allow you to make better decisions. But the process is all too easy to mess up, from choosing the wrong type of form input for a particular question or, worse, injecting your own biases into how things are worded. Surveys can be as much a balancing act as product pricing!</p>
<p>That’s why I find iA’s approach so interesting. They had the idea to ship not one version of the survey but <em>three</em>. This is what they shared with us:</p>
<blockquote>“We divided our newsletter’s subscribers into different groups of roughly 5000 people each and sent them different versions of the form. The first group received the <strong>Version 0</strong> of the form, and each time we updated this one, we sent it to a different group.<br /><br />In retrospect, it’s clear why, but we didn’t expect the form design to affect the price suggestions so much. A lot has been written about A/B testing, form design, and questionnaire design. But here we were right in the middle of a form/questionnaire experiment and saw how directly the design affected the results. It was amazing to see all of this happening in real-time.”</blockquote>

<p>It was a genius move, even if it wasn’t obvious at first. Sending three versions sent to different segments of the audience does a few things:</p>
<ul>
<li><strong>It considers different scenarios.</strong><br />Rather than asking its audience what pricing model they prefer, iA assumed a pricing model and put it in front of users. This way, they get a reaction to the various pricing scenarios they are considering and gain a response that is just as useful as directly asking.</li>
<li><strong>It challenges assumptions.</strong><br />The iA team put a lot of legwork into researching pricing models and evaluating their pros and cons. That certainly helped the team form some opinions about which strategies might be the most effective to implement. But even all the research digging in the world doesn’t guarantee a particular outcome. Evaluating responses from a clearly defined target audience using three versions of the form allowed iA to put its assumptions to the test. Is a subscription-based model really the best way to go? Now they know!</li>
<li><strong>It reveals customer biases.</strong><br />Anything you ask will have a degree of bias in it, so why not embrace that fact and let the customers show you their biases in the process? One version of the iA Presenter survey was based on a subscription pricing model, and the team found that some users hate subscriptions so much that they refused to fill out this form and were quite vocal about it.</li>
</ul>
<p>I love the way iA sums up the patterns they found in the survey results and how those results were influenced by differentiating the surveys:</p>
<blockquote>“We offered a form that required you to fill out monthly and yearly subscriptions plus ownership. […] We offered a second version that didn’t require you to fill out all fields. What happened there raised brows. The price suggestions changed. They got lower. We continued changing the form, and every time, the result changed.”</blockquote>

<p>And with that, iA had unlocked what they needed to determine a price for iA Presenter. From a <a href="https://ia.net/topics/how-much-would-you-charge-for-ia-presenter-part-2">follow-up blog post</a> that reports their findings:</p>
<blockquote>“All data combined, you decided that iA Presenter should charge the industry standard of 5.- for a single license. Multiplying 5.- times twelve for a year and times three to make it worthwhile would make iA Presenter make a 150.- app.”<br />—iA, “<a href="https://ia.net/topics/how-much-would-you-charge-for-ia-presenter-part-2">Presenter Pricing (II)</a>”</blockquote>

<p><img src="https://files.smashing.media/articles/ia-presenter-case-study-product-pricing-considerations/Big-Mac-Presenter.jpg" /></p>
Aligning Data With Strategy
<p>Great! iA was able to determine a specific price point with some level of scientific certainty. It would be easy enough to slap that on a price tag and start selling, but that doesn’t do justice to the full picture the data provides. Specifically, iA learned that the price point they determined would not align with all of the audience segments they surveyed.</p>
<p>Here’s more of what they were willing to share with us about their audience’s feelings on pricing:</p>
<ul>
<li>The collective audience suggested charging the industry standard of $5 for a single license.</li>
<li>Some think that the $50 price for the existing iA Writer app is high. $100 is not that much in Switzerland, but in some countries, $100 can be a big chunk of a monthly salary. That means local pricing adjustments ought to be considered.</li>
<li>Suggestions for business subscriptions varied between $10 and $20 per month per license.</li>
<li>Students want a free tier of access.</li>
</ul>
<p>iA is lucky enough to have an internal source of useful data, thanks to the long sales history it has with iA Writer. They found that new customers tend to prefer a subscription model, while existing (or “convinced”) customers show a preference for a single purchase.</p>
<p><img src="https://files.smashing.media/articles/ia-presenter-case-study-product-pricing-considerations/Number-of-Purchases-iA-Writer-for-Android.png" /></p>
<p><img src="https://files.smashing.media/articles/ia-presenter-case-study-product-pricing-considerations/Revenue-by-product-type-iA-Writer-for-Android.png" /></p>
<p>So, it’s more like they were looking at different pricing tiers instead of a flat rate. Their audience is all over the map as far as what their pricing expectations are, and a pricing model that offers choices based on the type of customer you are (e.g., business vs. student) and where people are geographically is likely to cast a wider net to attract more customers than they would get from a single price point. So, even if verified students are able to get the product for free, that should be offset by the price points for single-license customers and businesses.</p>
Wrapping Up
<p>What we’ve looked at are several important considerations that go into product pricing. The work it takes to determine a price goes way past subjective guesses. Pricing is one of the <a href="https://business.adobe.com/blog/basics/learn-about-four-ps-of-marketing">“Four Ps of Marketing”</a> that influence a product’s market position and how customers perceive it.</p>
<p>Setting a price is a statement of the product’s quality and the value it adds to the market.</p>
<p>That’s the sort of thing you can’t leave to chance.</p>
<p>That said, it’s clear that determining a product price is far from an exact science. The challenge is to elicit the right information that leads to insights that are more reflective of and aligned with the expectations of the target audience. Will they pay the price you want?</p>
<p>There are many other considerations that go into pricing, to be sure. You might discover that the price the market is willing to pay is unsustainable and does not cover enough of the costs that went into product development or the ongoing costs of maintenance, developing new features, marketing, support, salaries, and so on. You don’t want to enter yourself in a race to the bottom, after all.</p>
<p>iA Presenter makes for a great case study on product pricing. The fact that it’s the type of software that those of us in the web design and development community often work on makes it an extremely relevant example. Plus, iA put so much effort into research and was generous enough to share it with us that it provides a nice recent snapshot of a real-world situation.</p>
<p>And, hey, now that you know everything that went into setting prices for iA Presenter, you should check it out. Do you think they made the right choice? Will the multi-tier pricing strategy work next to market competitors who are more mature and are able to practically give away their stuff for free, like Google Slides? We’ll find out soon as <a href="https://ia.net/presenter">iA Presenter</a> is officially out of beta and has been released to the public on June 1st. You can follow along with their ongoing journey of shipping a new product on <a href="https://ia.net/topics/category/presenter">their blog</a> or by <a href="https://ia.net/newsletter">signing up for their newsletter</a>.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Geoff Graham)</author>
      <enclosure url="http://files.smashing.media/articles/ia-presenter-case-study-product-pricing-considerations/ia-presenter-case-study-product-pricing-considerations.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Advanced Form Control Styling With Selectmenu And Anchoring API]]></title>
      <link>https://smashingmagazine.com/2023/06/advanced-form-control-styling-selectmenu-anchoring-api/</link>
      <guid>https://smashingmagazine.com/2023/06/advanced-form-control-styling-selectmenu-anchoring-api/</guid>
      <pubDate>Thu, 01 Jun 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[Thanks to the Open UI working community group, there’s a new element on the horizon, <code>&lt;selectmenu&gt;</code>, that will make styling this type of form control a whole lot better. You’re going to walk through an early implementation of this new experimental element by creating a pattern that you would never have thought possible with CSS alone &mdash; a radial selection menu.]]></description>
      <content:encoded><![CDATA[<p>No doubt you’ve had to style a <code>&lt;select&gt;</code> menu before. And when you do, you often have had to reach far down in your CSS arsenal of tricks or rely on JavaScript to get anything near the level of customization you want. It’s a long-running headache in the front-end world.</p>
<p>Well, thanks to the efforts of the Open UI community, we have a new <code>&lt;selectmenu&gt;</code> element to look forward to, and its purpose is to provide CSS styling affordances to selection menus in ways we’ve never had before.</p>
<p>We’re going to demonstrate an initial implementation of <code>&lt;selectmenu&gt;</code> in this article. But we’ll throw in a couple of twists while we’re at it. What we’re making is a radial select menu, something we could never have done with CSS alone. And since we're working with experimental tech, we’re going to toss in more experimental features along the way, including images, the <a href="https://html.spec.whatwg.org/multipage/popover.html#dom-popover">HTML Popover API</a>, and the <a href="https://drafts.csswg.org/css-anchor-position-1/">CSS Anchor Positioning API</a>. The result is going to wind up like this:</p>
<p><img src="https://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/selectmenu-diagram.png" /></p>
<ul>
<li><strong><code>&lt;selectmenu&gt;</code></strong>: This is the selector itself. It holds the button and listbox of menu options.</li>
<li><strong><code>button</code></strong>: This part toggles the visibility of the listbox between open and close.</li>
<li><strong><code>selected-value</code></strong>: This displays the value of the menu option that is currently selected. So, if you have a listbox with three options and the second option is selected, the second option is what matches the part.</li>
<li><strong><code>marker</code></strong>: Dropdown menus usually have some sort of downward-facing arrow icon to indicate that the menu can be expanded. This is that part of the menu.</li>
<li><strong><code>listbox</code></strong>: This is the wrapper that contains the options and any <code>&lt;optgroup&gt;</code> elements that group certain options together inside the listbox.</li>
<li><strong><code>&lt;optgroup&gt;</code></strong>: We already let the cat out of the bag on this one, but this part groups options together. It includes a label for the group.</li>
<li><strong><code>&lt;option&gt;</code></strong>: A value that the user is able to select in the menu. There can be one, but it’s much more common to see a <code>&lt;select&gt;</code> — and, by extension — a <code>&lt;selectmenu&gt;</code> with multiple options.</li>
</ul>
<p>The other way is to <strong>slot the content ourselves</strong> in HTML. This can be a nice approach since it allows us to customize the markup any way we like. In other words, <strong>we can replace any of the parts we want</strong>, and the browser will use our markup instead of the implicit structure. In fact, this is the approach we’ll use in the radial menu we’re making.</p>
<p>The way to replace parts in the HTML is to use the <strong>slots</strong>. The markup we use for a slot lives in a separate tree in the Shadow DOM, replacing the contents of the DOM with what we specify in the Shadow DOM.</p>
<p>Here’s an abbreviated example in HTML. Notice how the <code>&lt;button&gt;</code> and <code>listbox</code> are both contained in slots that represent the HTML we want to use for those parts.</p>
<pre><code>&lt;selectmenu class="my-custom-select"&gt;
  &lt;div slot="button"&gt;
    &lt;span behavior="selected-value" slot="selected-value"&gt;&lt;/span&gt;
    &lt;button behavior="button"&gt;&lt;/button&gt;
  &lt;/div&gt;
  &lt;div slot="listbox"&gt;
    &lt;div popover="auto" behavior="listbox"&gt;
       &lt;option value="one"&gt;one&lt;/option&gt;
       &lt;option value="two"&gt;two&lt;/option&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/selectmenu&gt;
</code></pre>

<p>By using <strong><code>slots</code></strong> and <strong><code>behavior</code></strong> as attributes, we can tell the browser how it should behave and how it should interact with keyboard navigation. If managed carefully, this will also mean that we get good accessibility out of the box because the browser will know how to behave based on what we define. </p>
<p>Ready? OK, let’s start by setting up our markup for our radial <code>&lt;selectmenu&gt;</code>.</p>
The Radial Selectmenu Markup
<p>We will start by creating our own markup for this basic example. We will use pretty much the same approach as used in the <a href="https://open-ui.org/components/selectmenu/#extending-the-markup">explainer of the Selectmenu element</a> because I think it demonstrates the vast flexibility we have to style this element using similar markup.</p>
<pre><code>&lt;selectmenu class="selectmenu"&gt;
  &lt;button class="selected-button" slot="button" behavior="button"&gt;
    &lt;span behavior="selected-value" class="selected-value"&gt;&lt;/span&gt;
  &lt;/button&gt;
  &lt;div slot="listbox"&gt;
    &lt;div popover behavior="listbox"&gt;
      &lt;option value="one"&gt;one&lt;/option&gt;
      &lt;option value="two"&gt;two&lt;/option&gt;
      &lt;option value="three"&gt;three&lt;/option&gt;
      &lt;option value="four"&gt;four&lt;/option&gt;
      &lt;option value="five"&gt;five&lt;/option&gt;
      &lt;option value="six"&gt;six&lt;/option&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/selectmenu&gt;
</code></pre>

<p>You might notice from the markup that we’ve added the <strong><code>selected-value</code></strong> behavior in the button. This is perfectly fine, as our button will always show the selected value by doing this. </p>
<p>And, just like the example in the explainer, we are using the <a href="https://open-ui.org/components/popover.research.explainer/">Popover API</a> inside of our listbox slot. When we look at what we have in Chrome Canary, and see that it already works fine. Take note that even keyboard navigation already seems to be handled for us!</p>
<p><img src="https://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/selectmenu-layouts.png" /></p>
<p>We can add the following formula for our options when the popover is open by adding a transform to our options:</p>
<pre><code>[popover]:popover-open option {
  /* Half the size of the circle */
  --half-circle: calc(var(--circle-size) / -2);

  /* Straighten things up and space them out */
  transform:
      rotate(var(--deg))
      translate(var(--half-circle))
      rotate(var(--negative-deg));
}
</code></pre>

<p>Now, when the <code>popover-open</code> state is triggered, we will rotate each option by a certain number of degrees, translate them along both axes by half the circle size, and rotate it once again by a negative amount of degrees. The order of the transforms is important!</p>
<p>I said we would rotate the options “by a certain number of degrees” because we have to do it for each individual option. This is totally possible in vanilla CSS (and that’s how we’re going to do it), but it could also be done with a Sass loop or even with JavaScript if we needed it.</p>
<p>Let’s add this to our popover style rules:</p>
<pre><code>[popover] {
  --rotation-divide: calc(180deg / 2);

  /* etc. */
}
</code></pre>

<p>This will be our default rotation, and it’s a special case for when we only have one option. We’ll use <code>360deg</code> for the rest in a moment.</p>
<p>For now, we can select the first option and set the <code>--rotation-divide</code> variable on it:</p>
<pre><code>option:nth-child(1) {
  --deg: var(--rotation-divide);
}
</code></pre>

<p>Great! Why you would use a <code>select</code> when there is only one option, I don’t know, but nevertheless, it’s handled gracefully:</p>
<p><img src="https://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/selectmenu-one-option.png" /></p>
<p>Styling the other options takes a bit of work because we have to:</p>
<ul>
<li>Divide the circle by the number of available options and</li>
<li>Multiply that result for each option.</li>
</ul>
<p>I’m so glad we have the <code>calc()</code> function in CSS to help us do this. Otherwise, it would be some pretty heavy lifting.</p>
<pre><code>[popover]:has(option:nth-child(2)) {
  --rotation-divide: calc(360deg / 2);
}

[popover]:has(option:nth-child(3)) {
  --rotation-divide: calc(360deg / 3);
}

[popover]:has(option:nth-child(4)) {
  --rotation-divide: calc(360deg / 4);
}

[popover]:has(option:nth-child(5)) {
  --rotation-divide: calc(360deg / 5);
}

[popover]:has(option:nth-child(6)) {
  --rotation-divide: calc(360deg / 6);
}

option:nth-child(1) {
  --deg: var(--rotation-divide);
}

option:nth-child(2) {
  --deg: calc(var(--rotation-divide) * 2);
}

option:nth-child(3) {
  --deg: calc(var(--rotation-divide) * 3);
}

option:nth-child(4) {
  --deg: calc(var(--rotation-divide) * 4);
}

option:nth-child(5) {
  --deg: calc(var(--rotation-divide) * 5);
}

option:nth-child(6) {
  --deg: calc(var(--rotation-divide) * 6);
}

/* that’s enough options for you! */
option:nth-child(1n + 7) {
  display: none;
}
</code></pre>

<p>Here’s a live demo of what this produces. Remember, Chrome Canary is the only browser that currently supports this, as long as the experimental features flag is enabled.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/MWPPqja">Radial selectmenu with Anchoring API - Open UI [forked]</a> by <a href="https://codepen.io/utilitybend">@utilitybend</a>.</p>
Do We Need All Those <code>:has()</code> Pseudo-Classes?
<p>Yeah, I think so, as long as we’re using plain CSS. And that’s been my goal all along. That said, JavaScript could be useful here.</p>
<p>For example, we could add an ID to the element with the <code>popover</code> attribute and count the children it contains:</p>
<div>
<pre><code>const optionAmount = document.getElementById('popoverlistbox').childElementCount;
popoverlistbox.style.setProperty('--children', optionAmount);
</code></pre>
</div>

<p>That way, we can replace all the <code>:has()</code> instances with more concise styles:</p>
<pre><code>option {
  --rotation-divide: calc(360deg / var(--children));
  --negative: calc(var(--deg) / -1);
}
</code></pre>

<p>For this demo, however, you might still want to limit the <code>--children</code> custom property to a maximum of <code>6</code>. I’ve found that’s the sweet spot before the circle gets too crowded and needs additional tweaks.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/vYVVzyj">Radial selectmenu Open UI with JS children count [forked]</a> by <a href="https://codepen.io/utilitybend">@utilitybend</a>.</p>
<h3>Let’s Animate This Thing</h3>
<p>There are a few more CSS features coming up that will make <a href="https://open-ui.org/components/popover.research.explainer/#animation-of-popovers">animating popovers</a> a lot easier. But they’re not ready for us yet, even for this example.</p>
<p>We can get around that with a little trick. But please keep in mind that <strong>what we’re about to do will not be the best practice</strong> when we get the new animating features. I wanted to give you the information anyway because I think it’s a nice enhancement for what we’re making.</p>
<p>First, let’s add the following to our popover selector:</p>
<pre><code>[popover] {
  display: block;
  position: absolute;
  /* etc. */
}
</code></pre>

<p>This makes it so our popover will always be displayed <code>block</code> and ready to go wherever it is placed, and we have established a stacking context.</p>
<p>We will lose the benefit of our top layer popover and will have to play around with a <code>z-index</code> to get the effect we want. Juggling <code>z-index</code> values — especially with a large number of items — is never fun. It gets messy fast. That’s one of the ways popovers were designed to help us.</p>
<p> But let’s go ahead and give our button a <code>z-index</code>: </p>
<pre><code>.selected-button {
  z-index: 2;
  /* etc. */
}
</code></pre>

<p>Now we can use animations to reveal the options by using the <code>:not()</code> pseudo-class. This is how we can reset the <code>transform</code> when the popover is in its closed state:</p>
<div>
<pre><code>[popover]:not(:popover-open) {
  z-index: -1;
}

[popover]:not(:popover-open) option {
  transform: rotate(var(--deg)) translate(0) rotate(var(--negative-deg));
}
</code></pre>
</div>

<p>And there you have it! An animated radial <code>&lt;selectmenu&gt;</code>:</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/abRRaWW">Radial selectmenu with Anchoring API and animation [forked]</a> by <a href="https://codepen.io/utilitybend">@utilitybend</a>.</p>
<h3>Let’s Add Some Images While We’re At It</h3>
<p>There was quite a bit of discussion about this in the Open UI community, but the selected value does not take <code>innerHTML</code> as an option as, for one, this could result in IDs being duplicated. But I sure do love a good old role-playing game, and I decided to use the <code>&lt;selectmenu&gt;</code> as a potion selector.</p>
<p>This is completely based on everything we just covered, only adding images to demonstrate that it is possible:</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/XWxxPgN">Open-UI  - Select a potion (Chrome Canary) [forked]</a> by <a href="https://codepen.io/utilitybend">@utilitybend</a>.</p>
<p>With a sprinkle of JavaScript (for this totally optional enhancement), we can select the <code>innerHTML</code> of the <code>&lt;selectmenu&gt;</code> element and pass it to our <code>.selected-value</code> button:</p>
<pre><code>const selectMenus = document.querySelectorAll("selectmenu");
selectMenus.forEach((menu) =&gt; {
  const selectedvalue = menu.querySelector(".selected-value");
  selectedvalue.innerHTML = menu.selectedOption.innerHTML;
  menu.addEventListener("change", () =&gt; {
    selectedvalue.innerHTML = menu.selectedOption.innerHTML;
  });
});
</code></pre>

Conclusion
<p>I don’t know about you, but all of this gets me super excited for the future. Everything we looked at, from the Selectmenu element to the CSS Anchor Position API, is still a work in progress. Still, we can already see the great number of possibilities they will open up for us as designers and developers.</p>
<p>The fact that all of this is coming by way of built-in browser features is what’s most exciting because it gives us a standard way to approach things like customized <code>&lt;select&gt;</code> menus, popovers, and anchoring to the extent that it could eliminate the need for frameworks or libraries that we use today for the same things. We win because we get more control, and users win because they get lighter page loads.</p>
<p>If you’d like to do a bit of research on Selectmenu or even <a href="https://open-ui.org/get-involved/">get involved with the Open UI community</a>, you’re more than welcome, as we need more developers to create demos and share their struggles to help make these features better if — and when — they ship.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2023/01/level-up-css-skills-has-selector/">Level Up Your CSS Skills With The :has() Selector</a>”, Stephanie Eckles</li>
<li>“<a href="https://www.smashingmagazine.com/2023/01/creating-high-contrast-design-system-css-custom-properties/">Creating A High-Contrast Design System With CSS Custom Properties</a>”, Brecht De Ruyte</li>
<li>“<a href="https://www.smashingmagazine.com/2023/04/write-better-css-borrow-ideas-javascript-functions/">Write Better CSS By Borrowing Ideas From JavaScript Functions</a>”, Yaphi Berhanu</li>
<li>“<a href="https://www.smashingmagazine.com/2023/02/build-magazine-layout-css-grid-areas/">How To Build A Magazine Layout With CSS Grid Areas</a>”, Jennifer Brehm</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Brecht De Ruyte)</author>
      <enclosure url="http://files.smashing.media/articles/advanced-form-control-styling-selectmenu-anchoring-api/advanced-form-control-styling-selectmenu-anchoring-api.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Create Your Own Path In June (2023 Wallpapers Edition)]]></title>
      <link>https://smashingmagazine.com/2023/05/desktop-wallpaper-calendars-june-2023/</link>
      <guid>https://smashingmagazine.com/2023/05/desktop-wallpaper-calendars-june-2023/</guid>
      <pubDate>Wed, 31 May 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[Do you need a little inspiration boost? Well, then our new batch of desktop wallpapers might be for you. Designed by artists and designers from across the globe, the wallpapers in this post come in versions with and without a calendar for June 2023. Enjoy!]]></description>
      <content:encoded><![CDATA[<p>There’s an artist in everyone. Some bring their ideas to life with digital tools, others <strong>capture the perfect moment</strong> with a camera or love to grab pen and paper to create little doodles or pieces of lettering. And even if you think you’re far from being an artist, well, it might just be hidden deep inside of you. So why not explore it?</p>

<p>For more than twelve years already, <a href="https://www.smashingmagazine.com/category/wallpapers">our monthly wallpapers series</a> has been the perfect opportunity to do just that: to break out of your daily routine and get <strong>fully immersed in a creative little project</strong>. This month was no exception, of course.</p>

<p>In this collection, you’ll find beautiful, unique, and inspiring wallpapers designed by creative folks who took on the challenge this month. All of them are available in versions with and without a calendar for <strong>June 2023</strong> and can be downloaded for free. As a little bonus goodie, we also compiled a selection of timeless June wallpapers from our archives at the end of this post. Maybe you’ll spot one of <em>your</em> almost-forgotten favorites in there, too? A big thank-you to everyone who shared their designs with us this month! Happy June!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
<li><strong><a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>
</ul>

<p></p>World Environment Day<p></p>
<p>“An annual event celebrated on June 5th to raise awareness and promote action for the protection of the environment. It serves as a global platform for individuals, communities, and governments to come together and address pressing environmental issues. So I decided to design this wallpaper and to promote awareness among us. Hope you like it.” — Designed by <a href="https://itobuz.com/">Hrishikesh Shome</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/june-23-world-environment-day-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-world-environment-day-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/june-23-world-environment-day-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/cal/june-23-world-environment-day-cal-1600x1050.jpg">1600x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/cal/june-23-world-environment-day-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/cal/june-23-world-environment-day-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/cal/june-23-world-environment-day-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/cal/june-23-world-environment-day-cal-3840x2160.jpg">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/nocal/june-23-world-environment-day-nocal-1600x1050.jpg">1600x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/nocal/june-23-world-environment-day-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/nocal/june-23-world-environment-day-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/nocal/june-23-world-environment-day-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/world-environment-day/nocal/june-23-world-environment-day-nocal-3840x2160.jpg">3840x2160</a></li>
</ul>

Back In My Days
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/june-23-back-in-my-days-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-back-in-my-days-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/june-23-back-in-my-days-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/cal/june-23-back-in-my-days-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/back-in-my-days/nocal/june-23-back-in-my-days-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Boundless Joy
<p>“Boundless Joy is a magical realm where children and dogs find pure delight. It’s a place where laughter echoes through sunlit meadows and imaginations take flight. In this enchanting world, youthful spirits soar as kids and their furry companions chase dreams, playfully bound together. With every step, Boundless Joy sparks smiles, ignites friendships, and creates memories that last a lifetime.” — Designed by <a href="https://www.cpsp.in/">Kasturi Palmal</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/june-23-boundless-joy-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-boundless-joy-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/june-23-boundless-joy-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/cal/june-23-boundless-joy-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/boundless-joy/nocal/june-23-boundless-joy-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Cuban Bartender
<p>“Summer arrives and with it the long days and nights that allow us to enjoy the weather. We are heading to Cuba and from the Malecón we observe the city waiting for the new day.” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela</a> from Spain.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/june-23-cuban-bartender-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/jun-23-cuban-bartender-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/june-23-cuban-bartender-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/cal/june-23-cuban-bartender-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/cuban-bartender/nocal/june-23-cuban-bartender-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Blue Butterfly
<p>“Captured with Sony A7II and FE 90mm F2.8 Macro lens. Macro photography is my favorite.” — Designed by <a href="https://picjumbo.com">Viktor Hanacek</a> from Czechia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/june-23-blue-butterfly-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-blue-butterfly-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/june-23-blue-butterfly-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/cal/june-23-blue-butterfly-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/cal/june-23-blue-butterfly-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/cal/june-23-blue-butterfly-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/cal/june-23-blue-butterfly-cal-3840x2160.jpg">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/nocal/june-23-blue-butterfly-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/nocal/june-23-blue-butterfly-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/nocal/june-23-blue-butterfly-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/blue-butterfly/nocal/june-23-blue-butterfly-nocal-3840x2160.jpg">3840x2160</a></li>
</ul>

Holding Out For Me
<p>“Effectively captures the essence of a girl observing the view outside through a window. It conveys the image of someone attentively observing or gazing at what’s happening outside, suggesting a sense of curiosity or contemplation.” — Designed by <a href="https://www.design-studio.io/">Bhabna Basak</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/june-23-holding-out-for-me-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-holding-out-for-me-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/june-23-holding-out-for-me-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/cal/june-23-holding-out-for-me-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/holding-out-for-me/nocal/june-23-holding-out-for-me-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Pre-Wash Instructions
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/june-23-pre-wash-instructions-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-pre-wash-instructions-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/june-23-pre-wash-instructions-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/cal/june-23-pre-wash-instructions-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/pre-wash-instructions/nocal/june-23-pre-wash-instructions-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Summer Palms
<p>“Looks like Bahamas, but these are from San Francisco! Yep, photographers’ secrets!” — Designed by <a href="https://picjumbo.com">Viktor Hanacek</a> from Czechia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/june-23-summer-palms-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-summer-palms-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/june-23-summer-palms-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/cal/june-23-summer-palms-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/cal/june-23-summer-palms-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/cal/june-23-summer-palms-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/cal/june-23-summer-palms-cal-3840x2160.jpg">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/nocal/june-23-summer-palms-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/nocal/june-23-summer-palms-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/nocal/june-23-summer-palms-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/summer-palms/nocal/june-23-summer-palms-nocal-3840x2160.jpg">3840x2160</a></li>
</ul>

Raise A Glass To World Milk Day
<p>“World Milk Day is a reminder to appreciate the nourishing qualities of milk and the impact it has on our well-being. Whether enjoyed on its own, added to a smoothie, or used to create mouthwatering recipes, milk is a versatile and wholesome ingredient that deserves to be celebrated.” — Designed by <a href="https://www.popwebdesign.net/logo-dizajn-novisad.html">PopArt Studio</a> from Serbia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/june-23-raise-a-glass-to-world-milk-day-full.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-23-raise-a-glass-to-world-milk-day-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/june-23-raise-a-glass-to-world-milk-day-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/cal/june-23-raise-a-glass-to-world-milk-day-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-23/raise-a-glass-to-world-milk-day/nocal/june-23-raise-a-glass-to-world-milk-day-nocal-2560x1440.png">2560x1440</a></li>
</ul>



Oldies But Goodies

<p>So many wonderful wallpaper designs have seen the light of day since we first embarked on this monthly journey. Below you’ll find a selection of <strong>favorites from past June editions</strong>. Please note that these wallpapers don’t come with a calendar.</p>

<p></p><h3>Create Your Own Path</h3><p></p>
<p></p><p>“Nice weather has arrived! Clean the dust off your bike and explore your hometown from a different angle! Invite a friend or loved one and share the joy of cycling. Whether you decide to go for a city ride or a ride in nature, the time spent on a bicycle will make you feel free and happy. So don’t wait, take your bike and call your loved one because happiness is greater only when it is shared. Happy World Bike Day!” — Designed by <a href="https://www.popwebdesign.net/ux-design.html">PopArt Studio </a> from Serbia.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-create-your-own-path-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-create-your-own-path-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-create-your-own-path-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/create-your-own-path/nocal/june-22-create-your-own-path-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Summer Coziness</h3><p></p>
<p></p><p>“I’ve waited for this summer more than I waited for any other summer since I was a kid. I dream of watermelon, strawberries, and lots of colors.” — Designed by <a href="https://cozystream.com/">Kate Jameson</a> from the United States.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa7facf5-395f-44a4-a0da-05a2b1a5bd23/june-20-summer-coziness-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/374464b5-093e-4ca2-9397-6f26c83756d4/june-20-summer-coziness-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/374464b5-093e-4ca2-9397-6f26c83756d4/june-20-summer-coziness-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-20/summer-coziness/nocal/june-20-summer-coziness-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/summer-coziness/nocal/june-20-summer-coziness-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/summer-coziness/nocal/june-20-summer-coziness-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/summer-coziness/nocal/june-20-summer-coziness-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/summer-coziness/nocal/june-20-summer-coziness-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/summer-coziness/nocal/june-20-summer-coziness-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Old Kyiv</h3><p></p>
<p></p><p>“This picture is dedicated to Kiev (Kyiv), the capital of Ukraine. It is loosely based on a 13th century map — this is what the center of Kyiv looked like ca. 900 years ago! The original map also included the city wall — however, I decided not to wrap the buildings into the wall, since in my dream world, a city would not need walls.” — Designed by <a href="https://vlad.studio/">Vlad Gerasimov</a> from Georgia.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-old-kiyv-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-old-kiyv-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-old-kiyv-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1024x600.jpg">1024x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1440x960.jpg">1440x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1600x900.jpg">1600x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-2880x1800.jpg">2880x1800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-3072x1920.jpg">3072x1920</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-3840x2160.jpg">3840x2160</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/old-kiyv/nocal/june-22-old-kiyv-nocal-5120x2880.jpg">5120x2880</a></li>
</ul>

<p></p><h3>Travel Time</h3><p></p>
<p></p><p>“June is our favorite time of the year because the keenly anticipated sunny weather inspires us to travel. Stuck at the airport, waiting for our flight but still excited about wayfaring, we often start dreaming about the new places we are going to visit. Where will you travel to this summer? Wherever you go, we wish you a pleasant journey!” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fa14b29-e470-4b7d-b73d-1dd94d32bdf8/june-18-travel-time-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d57d2cfe-3f0d-48ac-9c26-df7e43cbd76b/june-18-travel-time-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d57d2cfe-3f0d-48ac-9c26-df7e43cbd76b/june-18-travel-time-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/travel-time/nocal/june-18-travel-time-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Strawberry Fields</h3><p></p>
<p></p><p>Designed by <a href="https://www.nathalieouederni.com/">Nathalie Ouederni</a> from France.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1977205-14df-4712-9049-a03ba427a678/june-15-strawberry-fields-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5ed64c5-aacb-424d-a996-6b72be2e5339/june-15-strawberry-fields-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5ed64c5-aacb-424d-a996-6b72be2e5339/june-15-strawberry-fields-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/strawberry-fields/nocal/june-15-strawberry-fields-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Oh, The Places You Will Go!</h3><p></p>
<p></p><p>“In celebration of high school and college graduates ready to make their way in the world!” — Designed by <a href="https://bloeschcreative.etsy.com">Bri Loesch</a> from the United States.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46f6cae6-a2aa-468c-ba2f-ecf40e375055/june-14-oh-the-places-you-will-go-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5f1235cf-2e90-4379-9126-fb1afcc0338c/june-14-oh-the-places-you-will-go-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5f1235cf-2e90-4379-9126-fb1afcc0338c/june-14-oh-the-places-you-will-go-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/oh-the-places-you-will-go/nocal/june-14-oh-the-places-you-will-go-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Expand Your Horizons</h3><p></p>
<p></p><p>“It’s summer! Go out, explore, expand your horizons!” — Designed by <a href="https://dorvandavoudi.com">Dorvan Davoudi</a> from Canada.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/03f98df0-bf1a-43b1-8058-a4ca522ab709/june-16-expand-your-horizons-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb46c0af-2c1f-49ab-94f0-79dcd7d32668/june-16-expand-your-horizons-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb46c0af-2c1f-49ab-94f0-79dcd7d32668/june-16-expand-your-horizons-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/expand-your-horizons/nocal/june-16-expand-your-horizons-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Summer Surf</h3><p></p>
<p></p><p>“Summer vibes…” — Designed by <a href="https://www.facebook.com/Hirs-Design-148950788515251/?timeline_context_item_type=intro_card_work&amp;timeline_context_item_source=100002085435433">Antun Hirsman</a> from Croatia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/718103fa-7136-4f8c-a4d7-9cd1d2866c88/june-18-summer-surf-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50f03ba5-c76f-497a-8948-934b504c0a9e/june-18-summer-surf-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50f03ba5-c76f-497a-8948-934b504c0a9e/june-18-summer-surf-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-18/summer-surf/nocal/june-18-summer-surf-nocal-2650x1440.jpg">2650x1440</a></li>
</ul>

<p></p><h3>Summertime</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-21-summer-time-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-21-summer-time-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-21-summer-time-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/summer-time/nocal/june-21-summer-time-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Deep Dive</h3><p></p>
<p></p><p>“Summer rains, sunny days, and a whole month to enjoy. Dive deep inside your passions and let them guide you.” — Designed by <a href="https://www.creitive.com/">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc6e8288-e0fc-4db9-8193-a75d34cf964b/june-17-deep-dive-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/565f3237-80f3-46a3-b86a-2c62b5be1213/june-17-deep-dive-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/565f3237-80f3-46a3-b86a-2c62b5be1213/june-17-deep-dive-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/deep-dive/nocal/june-17-deep-dive-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Join The Wave</h3><p></p>
<p></p><p>“The month of warmth and nice weather is finally here. We found inspiration in the World Oceans Day which occurs on June 8th and celebrates the wave of change worldwide. Join the wave and dive in!” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8fa3266b-d36c-49dc-9ff2-324f6087cb0d/june-16-join-the-wave-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9405f1a1-e310-4f41-8033-da3d60ad53ac/june-16-join-the-wave-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9405f1a1-e310-4f41-8033-da3d60ad53ac/june-16-join-the-wave-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/join-the-wave/nocal/june-16-join-the-wave-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Melting Away</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01f70092-8fa6-41c9-a5b0-4d2d441bfd2c/june-19-melting-away-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68c2d3c0-1f39-4edf-a88d-f1869066901d/june-19-melting-away-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68c2d3c0-1f39-4edf-a88d-f1869066901d/june-19-melting-away-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/melting-away/nocal/june-19-melting-away-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>Bauhaus</h3><p></p>
<p></p><p>“I created a screenprint of one of the most famous buildings from the Bauhaus architect Mies van der Rohe for you. So, enjoy the Barcelona Pavillon for your June wallpaper.” — Designed by <a href="https://glasshousestudio.de">Anne Korfmacher</a> from Germany.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/008e5306-b83d-4216-9d40-b10a3713b9b9/june-19-its-bauhaus-year-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9046bec0-51bb-4aea-b312-c960e3c5894d/june-19-its-bauhaus-year-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9046bec0-51bb-4aea-b312-c960e3c5894d/june-19-its-bauhaus-year-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-640x480.jpeg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-800x480.jpeg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-800x600.jpeg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1024x768.jpeg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1024x1024.jpeg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1152x864.jpeg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1280x800.jpeg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1280x960.jpeg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1280x1024.jpeg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1366x768.jpeg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1400x1050.jpeg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1440x900.jpeg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1600x1200.jpeg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1680x1050.jpeg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1680x1200.jpeg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1920x1080.jpeg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1920x1200.jpeg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-1920x1440.jpeg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-19/its-bauhaus-year/nocal/june-19-its-bauhaus-year-nocal-2560x1440.jpeg">2560x1440</a></li>
</ul>

<p></p><h3>World Environment Day</h3><p></p>
<p></p><p>“On June 5th, we celebrate World Environment Day — a moment to pause and reflect on how we impact Earth’s health. A few activities represented in this visual include conserving energy and water, shopping and growing local, planting flowers and trees, and building a sustainable infrastructure.” — Designed by <a href="https://www.madfishdigital.com/">Mad Fish Digital</a> from Portland, OR.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-world-environment-day-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-world-environment-day-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-world-environment-day-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/world-environment-day/nocal/june-22-world-environment-day-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/world-environment-day/nocal/june-22-world-environment-day-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/world-environment-day/nocal/june-22-world-environment-day-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/world-environment-day/nocal/june-22-world-environment-day-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/world-environment-day/nocal/june-22-world-environment-day-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/june-22/world-environment-day/nocal/june-22-world-environment-day-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Pineapple Summer Pop</h3><p></p>
<p></p><p>“I love creating fun and feminine illustrations and designs. I was inspired by juicy tropical pineapples to celebrate the start of summer.” — Designed by <a href="https://www.paperplaygrounds.com">Brooke Glaser</a> from Honolulu, Hawaii.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2d050c6-791c-4043-af11-3624e87054fe/june-16-pineapple-summer-pop-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16db22ee-c7f8-47a3-856c-992c82cd61f9/june-16-pineapple-summer-pop-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16db22ee-c7f8-47a3-856c-992c82cd61f9/june-16-pineapple-summer-pop-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1152x720.jpg">1152x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/pineapple-summer-pop/nocal/june-16-pineapple-summer-pop-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Window Of Opportunity</h3><p></p>
<p></p><p>“‘Look deep into nature and then you will understand everything better,’ A.E.” — Designed by <a href="https://hirsdesign.com/">Antun Hiršman</a> from Croatia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45b3e801-54a5-4b2b-9fc7-73f10bf965c6/june-17-window-of-opportunity-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4cf7e3de-ab36-4ce9-92f0-5d2535e74db1/june-17-window-of-opportunity-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4cf7e3de-ab36-4ce9-92f0-5d2535e74db1/june-17-window-of-opportunity-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/window-of-opportunity/nocal/june-17-window-of-opportunity-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Midsummer Night’s Dream</h3><p></p>
<p></p><p>“The summer solstice in the northern hemisphere is nigh. Every June 21 we celebrate the longest day of the year and, very often, end up dancing like pagans. Being landlocked, we here in Serbia can only dream about tidal waves and having fun at the beach. What will your Midsummer Night’s Dream be?” — Designed by <a href="https://www.popwebdesign.de">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c3f0a8f-ea59-4d79-b458-7c7799f8638c/june-17-midsummer-nights-dream-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1c5fd063-f255-4b1a-b59a-2e614d71714a/june-17-midsummer-nights-dream-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1c5fd063-f255-4b1a-b59a-2e614d71714a/june-17-midsummer-nights-dream-preview-opt.png">preview</a></li><li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1440x1050.jpg">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/midsummer-nights-dream/nocal/june-17-midsummer-nights-dream-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Papa Merman</h3><p></p>
<p></p><p>“Dream away for a little while to a land where June never ends. Imagine the ocean, feel the joy of a happy and carefree life with a scent of shrimps and a sound of waves all year round. Welcome to the world of Papa Merman!” — Designed by <a href="https://graphicmama.com/">GraphicMama</a> from Bulgaria.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50515363-d91f-49d8-af03-dcb66b14756d/june-16-papa-merman-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6e1420e-aad2-409b-ad8a-8db0b0a8be25/june-16-papa-merman-preview-opt.png" /></a><ul><li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6e1420e-aad2-409b-ad8a-8db0b0a8be25/june-16-papa-merman-preview-opt.png">preview</a></li><li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/papa-merman/nocal/june-16-papa-merman-nocal-2560x1440.jpg">2560x1440</a></li></ul><p></p>
<p></p><h3>Gravity</h3><p></p>
<p></p><p>Designed by <a href="https://www.doud.be">Elise Vanoorbeek (Doud Design)</a> from Belgium.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35d4d25a-1e3c-4651-ad45-40b1aef31618/june-15-gravity-full.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c087db08-a5f6-414f-a827-e2be4acb421d/june-15-gravity-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c087db08-a5f6-414f-a827-e2be4acb421d/june-15-gravity-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/gravity/nocal/june-15-gravity-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Solstice Sunset</h3><p></p>
<p></p><p>“June 21 marks the longest day of the year for the Northern Hemisphere — and sunsets like these will be getting earlier and earlier after that!” — Designed by <a href="https://www.behance.net/jamesmitchell23">James Mitchell</a> from the United Kingdom.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/492124f6-1b46-441b-a52b-2bbcf4372536/june-17-solstice-sunset-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2c0f6baa-5eda-4741-aa4c-bb92a50c16cb/june-17-solstice-sunset-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2c0f6baa-5eda-4741-aa4c-bb92a50c16cb/june-17-solstice-sunset-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/solstice-sunset/nocal/june-17-solstice-sunset-nocal-2880x1800.png">2880x1800</a></li>
</ul>

<p></p><h3>Yoga Is A Light, Which Once Lit, Will Never Dim</h3><p></p>
<p></p><p>“You cannot always control what goes on outside… you can always control what goes on inside… Breathe free, live and let your body feel the vibrations and positiveness that you possess inside you. Yoga can rejuvenate and refresh you and ensure that you are on the journey from self to the self. Happy International Yoga Day!” — Designed by <a href="https://acodez.in/">Acodez IT Solutions</a> from India.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-17-yoga-is-a-light-which-once-lit-will-never-dim-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-17-yoga-is-a-light-which-once-lit-will-never-dim-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-17-yoga-is-a-light-which-once-lit-will-never-dim-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/yoga-is-a-light-which-once-lit-will-never-dim/nocal/june-17-yoga-is-a-light-which-once-lit-will-never-dim-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Summer Things</h3><p></p>
<p></p><p>“Summer is coming so I made this simple pattern with all my favorite summer things.” — Designed by <a href="https://www.mariakellerac.com">Maria Keller</a> from Mexico.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ce0197c0-f41c-4259-88c8-d1b2b4b7a4e9/june-16-summer-time-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52cc4120-d654-47ad-88cc-c8b756bae675/june-16-summer-time-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52cc4120-d654-47ad-88cc-c8b756bae675/june-16-summer-time-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-640x1136.png">640x1136</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-750x1334.png">750x1334</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1242x2208.png">1242x2208</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-16/summer-time/nocal/june-16-summer-time-nocal-2880x1800.png">2880x1800</a></li>
</ul>



<p></p><h3>Night Night!</h3><p></p>
<p></p><p>“The time we spend with our dads is precious so I picked an activity my dad enjoys a lot, reading.” — Designed by <a href="https://www.mariakellerac.com">Maria Keller</a> from Mexico.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-15-night-night-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-15-night-night-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-15-night-night-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-640x1136.png">640x1136</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-750x1334.png">750x1334</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1242x2208.png">1242x2208</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-15/night-night/nocal/june-15-night-night-nocal-2880x1800.png">2880x1800</a></li></ul>

<p></p><h3>Evolution</h3><p></p>
<p></p><p>“We’ve all grown to know the month of June through different life stages. From toddlers to adults with children, we’ve enjoyed the weather with rides on our bikes. As we evolve, so do our wheels!” — Designed by <a href="https://www.jkeistdesign.com">Jason Keist</a> from the United States.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-14-evolution-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-14-evolution-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-14-evolution-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-768x1024.png">768x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/evolution/nocal/june-14-evolution-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Handmade Pony Gone Wild</h3><p></p>
<p></p><p>“This piece was inspired by the <em>My Little Pony</em> cartoon series. Because those ponies irritated me so much as a kid, I always wanted to create a bad ass pony.” — Designed by <a href="https://zedduo.com/">Zaheed Manuel</a> from South Africa.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ecba7a4-ccdd-4eb3-9795-995efcb317a8/june-14-hand-made-pony-gone-wild-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c35f3b3-fa61-4192-8b14-3fc8ad37eea9/june-14-hand-made-pony-gone-wild-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c35f3b3-fa61-4192-8b14-3fc8ad37eea9/june-14-hand-made-pony-gone-wild-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-14/hand-made-pony-gone-wild/nocal/june-14-hand-made-pony-gone-wild-nocal-2880x1800.jpg">2880x1800</a></li></ul>

<p></p><h3>Getting Better Everyday</h3><p></p>
<p></p><p>“Inspired by the eternal forward motion to get better and excel.” — Designed by <a href="https://zjmdesigns.myportfolio.com/">Zachary Johnson-Medland</a> from the United States.</p><p></p>
<p></p><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e64cde11-f306-4d57-b1b6-1d6965a1550e/june-17-getting-better-everyday-full-opt.png"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4973fc78-d798-46c8-bb9d-ea639712a70a/june-17-getting-better-everyday-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4973fc78-d798-46c8-bb9d-ea639712a70a/june-17-getting-better-everyday-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-17/getting-better-everyday/nocal/june-17-getting-better-everyday-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Comfort Reading</h3><p></p>
<p></p><p>Designed by <a href="https://theceolibrary.com/">Bobby Voicu</a> from Portugal.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-20-comfort-reading-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-20-comfort-reading-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-20-comfort-reading-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-20/comfort-reading/nocal/june-20-comfort-reading-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/comfort-reading/nocal/june-20-comfort-reading-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/comfort-reading/nocal/june-20-comfort-reading-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/comfort-reading/nocal/june-20-comfort-reading-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/comfort-reading/nocal/june-20-comfort-reading-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-20/comfort-reading/nocal/june-20-comfort-reading-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Happy Squatch</h3><p></p>
<p></p><p>“I just wanted to capture the atmosphere of late spring/early summer in a fun, quirky way that may be reflective of an adventurous person during this time of year.” — Designed by <a href="https://artarcarese.car.blog/">Nick Arcarese</a> from the United States.</p><p></p>
<p></p><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-21-happy-squatch-full-opt.png"><img src="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-21-happy-squatch-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-21-happy-squatch-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/june-21/happy-squatch/nocal/june-21-happy-squatch-nocal-2560x1440.png">2560x1440</a></li>
</ul>

]]></content:encoded>
      <author>hello@smashingmagazine.com (Cosima Mielke)</author>
      <enclosure url="http://files.smashing.media/articles/desktop-wallpaper-calendars-june-2023/june-22-create-your-own-path-preview-opt.png" length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Designing A Better Design Handoff File In Figma]]></title>
      <link>https://smashingmagazine.com/2023/05/designing-better-design-handoff-file-figma/</link>
      <guid>https://smashingmagazine.com/2023/05/designing-better-design-handoff-file-figma/</guid>
      <pubDate>Fri, 26 May 2023 15:30:00 GMT</pubDate>
      <description><![CDATA[This article provides practical tips for improving the handoff process between design and development in product development. The guidance covers effective communication, documentation, design details, version control, and plugin usage.]]></description>
      <content:encoded><![CDATA[<p>Creating an effective handoff process from design to development is a critical step in any product development cycle. However, as any designer knows, it can be a nerve-wracking experience to send your carefully crafted design off to the dev team. It’s like waiting for a cake to bake — you can’t help but wonder how it will evolve in the oven and how it will taste when you take it out of the oven.</p>
<p>The relationship between designers and developers has always been a little rocky. Despite tools like Figma’s <a href="https://help.figma.com/hc/en-us/articles/360055203533-Use-the-Inspect-panel">Inspect feature</a> (which allows developers to inspect designs and potentially convert them to code in a more streamlined way), there are still many barriers between the two roles. Often, design details are hidden within even more detailed parts, making it difficult for developers to accurately interpret the designer’s intentions.</p>
<p>For instance, when designing an image, a designer might import an image, adjust its style, and call it done. More sophisticated designers might also wrap the image in a frame or <a href="https://help.figma.com/hc/en-us/articles/5731482952599-Using-auto-layout">auto layout</a> so it better matches how developers will later convert it to code. But even then, many details could still be missing. The main problem here is that <strong>designers typically create their designs within a finite workspace</strong> (a frame with a specific width). In reality, however, the design elements will need to adapt to a variety of different environments, such as varying device sizes, window widths, screen resolutions, and other factors that can influence how the design is displayed. Therefore, developers will always come back with the following questions:</p>
<ul>
<li>What should be the minimum/maximum width/height of the image?</li>
<li>What is its content style?</li>
<li>What effects need to be added?</li>
</ul>
<p>As in reality, these are the details needed to be addressed.</p>
<p>Designers, let’s face the truth: there’s <em>no perfect handoff</em>.</p>
<p>Every developer works, thinks, and writes code differently, which means there is no such thing as the ideal handoff document. Instead, our focus should be on creating a non-perfect but still effective and usable handoff process.</p>
<p>In this article, we will explore <em>how</em> to create a design handoff document that attempts to strike the right balance between providing developers with the information they need while still allowing them the flexibility to bring the design to life in their own way.</p>
<p><strong>How Can The Handoff Files Be improved?</strong></p>
1. Talk To Developers More Often
<p>Design is often marked as complete once the design handoff file is created and the developers start transforming it into code. However, in reality, the design is only complete when the user finds the experience pleasant.</p>
<p>Therefore, crafting the design handoff file and having the developer help bring your design to the user is essentially another case study on top of the one you have already worked on. To make it perfect, just as you would talk to users, you also need to communicate with engineers — to better understand their needs, how they read your file, and perhaps even teach them a few key things about using Figma (if Figma is your primary design tool).</p>
<p>Here are a few tips you can teach your developers to make their lives easier when working with Figma:</p>
<h3>Show Developers The Superpower Of The Inspect Panel</h3>
<p>Figma’s Inspect feature allows developers to see the precise design style that you’ve used, which can greatly simplify the development process. Additionally, if you have a design library in place, Inspect will display the name of each component and style that you’ve used. This can be incredibly helpful for developers, especially if they’re working with a style guide, as they can use the component or style directly to match your design with ease.</p>
<p>In addition to encouraging developers to take advantage of the Inspect panel, it’s sometimes helpful to <strong>review your own design in a read-only view</strong>. This allows you to see precisely what the developers will see in the Inspect panel and ensures that components are named accurately, colors are properly linked to the design system, and other vital details are structured correctly.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-figma-inspect.png" /></p>
<h3>Share With Developers The Way To Export Images/Icons</h3>
<p>Handling image assets, including icons, illustrations, and images, is also an essential part of the handoff process, as the wrong format might result in a poor presentation in the production environment.</p>
<p>Be sure to align with your developers on how they would like you to handle the icons and images. It could either be the case where they would prefer you to export all images and icons in a single ZIP file and share it with them or the case where they would prefer to export the images and icons on their own. If it’s the latter, it’s important to explain in detail the correct way to export the images and icons so that they can handle the export process on their own!</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-export.png" /></p>
<h3>Encourage Them To Use Figma’s Commenting Feature</h3>
<p>It’s common for developers to have questions about the design during the handoff process. To make it easier for everyone involved, consider teaching them to leave comments directly in Figma instead of sending you a message. This way, the comments are visible to everyone and provide context for the issue at hand. Additional features, such as comment reactions and the “mark as resolved” button, further enable better interaction between team members and help everyone keep track of whether an issue has been addressed or not.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-figma-comment.png" /></p>
<h3>Leverage Cursor Chat</h3>
<p>If you and the developers are both working within the same Figma file, you can also make use of the <a href="https://help.figma.com/hc/en-us/articles/1500004414842-Send-messages-with-cursor-chat">cursor chat feature</a> to clarify any questions or issues that arise. This can be a fun and useful way to collaborate and ensure that everyone is on the same page.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-figma-cursor-chat.png" /></p>
<h3>Use Figma Audio Chat</h3>
<p>If you need to discuss a complex issue in more detail, consider using Figma’s audio chat feature. This can be a quick and efficient way to clarify any questions or concerns arising during the development process.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-figma-audio-chat.jpg" /></p>
<p>It’s important to keep in mind that <strong>effective collaboration relies on good communication</strong>. Therefore, it’s crucial to talk to your developers regularly and understand their approach to reading and interpreting your designs, especially when you first start working with them. This sets the foundation for a productive and successful partnership.</p>
2. Documenting Design Decisions For You And Developers
<p>We have to be honest, the reason why building our design portfolios often takes <em>a</em> <em>lot</em> of time is the fact that we do not document every design decision along the way, and so we need to start building the case studies later by trying our best to fetch the design files and all the stuff we need.</p>
<p>I find it useful to document my decisions in Figma, not only just designs but, if appropriate, also competitor analysis, problem statements, and user journeys, and leave the links to these pages within the handoff file as well. The developer might not read it, but I often hear from the developers in my team that they like it as they can also dig into what the designers think while working on the design, and they can learn tips for building a product from us as well.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-overview.jpg" /></p>
3. Don’t Just Leave The Design There. Add The Details
<p>When it comes to design, <em>details matter</em> — just leaving the design “as is” won’t cut it. Adding details not only helps developers better understand the design, but it can also make their lives easier. Here are some tips for adding those crucial design details to your handoff.</p>
<h3>Number The Frame/Flow If Possible</h3>
<p>I really like the Figma <a href="https://www.figma.com/community/file/1004041613962064465"><strong>handoff template</strong></a> that Luis Ouriach (<a href="https://medium.com/@disco*lu">Medium</a>, <a href="https://twitter.com/disco*lu">Twitter</a>) created. The numbering and title pattern makes it easy for developers to understand which screen belongs to which flow immediately. However, it can be complicated to update the design later as the numbering and title need to be <em>manually</em> updated.</p>
<p><strong>Note:</strong> <em>While there are plugins available (like, for example, <a href="https://www.figma.com/community/plugin/1057630145566901048">Renamed</a>), which can help with renaming multiple frames and layers all at once, this workflow can still be inconvenient when dealing with more complicated naming patterns. For instance, updating “1. Welcome → 2. Onboarding → 3. Homepage” into “1. Welcome → 2. Onboarding → 3. Sign up → 4. Homepage” can become quite a hassle. Therefore, one alternative approach is to break down the screens into different tickets or user journeys and assign a number that matches each ticket/user journey.</em></p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-labelling.png" /></p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-numbering-onflow.png" /></p>
<h3>Name The Layers If Possible</h3>
<p>We talked about numbering/naming the frames, but naming the layers is equally important! Imagine trying to navigate a Figma file cluttered with layers and labels like “Frame 3123,” “Rectangle 8,” and “Circle 35.” This can be confusing and time-consuming for both designers and developers, as they need to sift through numerous unnamed layers to identify the correct one.</p>
<p><strong>Well-named layers facilitate better collaboration</strong>, as team members can quickly locate and comprehend the purpose of each element. This also helps ensure consistency and accuracy when translating designs into code.</p>
<p>If you search around in Figma, you will find a number of plugins that can help you with naming the layers in a more systematic way.</p>
<h3>Add The Details For Interaction: Make Use Of Figma’s Section Feature</h3>
<p>This might seem trivial, but I consider it important. Design details shouldn’t be something like “This design does X, and if you press that, it will do Y.” Instead, it’s crucial to include details like the hover state, initial state, max width/height, and the outcome of different use cases.</p>
<p>For this reason, I appreciate the new section feature that Figma has released. It allows me to have a big design at the top so that developers can see all of the design at once and then look at the section details for all the design and interaction details.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-figma-section.jpg" /></p>
<h3>Make Use Of The Interactive Prototype And FigJam Features To Show The User Flow</h3>
<p>Additionally, try to share with the developers how the design screens connect to one another. You can use the interactive prototype feature within Figma to connect the screens and make them move so that developers can understand the logic. Alternatively, you can use FigJam to connect the screens, allowing developers to see how everything is connected at a glance.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-figjam.jpg" /></p>
4. The Secret Weapon Is Adding Loom Video
<p>Loom video is a lifesaver for us. You only need to record it once, and then you can share it with anyone interested in the details of your design. Therefore, I highly recommend making use of Loom! For every design handoff file, I always record a video to walk through the design. For more complicated designs, I will record a separate video specifically describing the details so that I don’t need to waste other people’s time if they’re not interested.   </p>
<p>To attach the Loom video, I use the <em>Loom</em> plugin and place it right beside the handoff file. Developers can play it as many times as needed without even disturbing you, asking you more questions, and so on.</p>
<p>→ Download the <a href="https://www.figma.com/community/plugin/1050134017138821899/Loom-Embed"><strong>Loom Embed</strong></a> Figma plugin</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-loom.jpg" /></p>
5. The Biggest Fear: Version Control
<p>In an ideal world, the design would be completely finalized before developers start coding. But in reality, design is always subject to adjustments, even after development has already begun. That’s why <a href="https://www.atlassian.com/git/tutorials/what-is-version-control#:~:text=Version%20control%2C%20also%20known%20as,to%20source%20code%20over%20time.">version control</a> is such an important topic.</p>
<p>Although Figma has a branching feature for enterprise customers to create new designs in a separate branch, I find it helpful to keep a few extra things in your design file.</p>
<h3>Have A Single Source Of Truth</h3>
<p>Always ensure that the developer handoff file you share with your team is the single source of truth for the latest design. If you make any changes, update the file directly, and keep the original as a duplicate for reference. This will prevent confusion and avoid pointing developers to different pages in Figma.</p>
<p>If you have access to the <strong>branching feature</strong> in Figma, it can be highly beneficial to utilize it to further streamline your workflow. When I need to update a handoff file that I have already shared with the developers, my typical process is to create a new branch in Figma first. Then I update the developer handoff file in that branch, send it to the relevant stakeholders for review, and finally merge it back into the original developer handoff file once everything is confirmed. This ensures that the link to the developer handoff file remains <em>unchanged</em> for the developers.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-file-layers.png" /></p>
<h3>Changelogs/Future Plan</h3>
<p>Include a <a href="https://en.wikipedia.org/wiki/Changelog">changelog</a> in the handoff file to help developers understand the latest changes made to the design.</p>
<p>Similarly to changelogs, if you already know of future plans to adjust the design, write them down somewhere in Figma so that the developers can understand what changes are to be expected.</p>
<p><img src="https://files.smashing.media/articles/designing-better-design-handoff-file-figma/content-changelog.jpg" /></p>
6. Make Use Of Plugins
<p>There are also a number of plugins to help you with creating your handoff:</p>
<ul>
<li><strong>EightShapes Specs</strong><br /><em>EightShapes Specs</em> creates specs for your design automatically with just one click.<br />→ Download the <strong><a href="https://www.figma.com/community/plugin/1205622541257680763/EightShapes-Specs">EightShapes Spec</a></strong> Figma plugin </li>
<li><strong>Autoflow</strong><br /><em>Autoflow</em> allows you to connect the screens visually without using FigJam.<br />→ Download the <strong><a href="https://www.figma.com/community/plugin/733902567457592893">Autoflow</a></strong> Figma plugin</li>
<li><strong>Style Organizer</strong><br /><em>Style Organizer</em> allows you to make sure all of your styles are linked to your component/style so that developers won’t need to read hex code in any case.<br />→ Download the <strong><a href="https://www.figma.com/community/plugin/816627069580757929">Style Organizer</a></strong> Figma plugin</li>
</ul>
7. The Ultimate Goal Is To Have A Design System
<p>If you want to take things a step or two further, consider pushing your team to adopt a <a href="https://www.invisionapp.com/inside-design/guide-to-design-systems/"><strong>design system</strong></a>. This will enable the designs created in Figma to be more closely aligned with what developers expect in the code. You can match token names and name your layers/frames to align with how developers name their containers and match them in your design system.</p>
<p>Here are some of the benefits of using a design system:</p>
<ul>
<li><strong>Consistency</strong><br />A design system ensures a <em>unified visual language</em> across different platforms, resulting in a more consistent user experience. </li>
<li><strong>Efficiency</strong><br />With a design system in place, designers and developers can <em>reuse components and patterns</em>, reducing the time spent on creating and updating individual elements. </li>
<li><strong>Collaboration</strong><br />A design system facilitates better communication between designers and developers by establishing a <em>shared language</em> and understanding of components and their usage.</li>
</ul>
<p><strong>Note:</strong> <em>If you would like to dig deeper into the topic of design systems, I recommend reading some of the <a href="https://www.smashingmagazine.com/category/design-systems/">Smashing Magazine articles on this topic</a>.</em></p>
Conclusion: Keep Improving The Non-perfect
<p>Ultimately, as I mentioned at the beginning, there’s no <em>one-size-fits-all approach</em> to developer handoff, as it depends on various factors such as product design and the engineers we work with. However, what we can do is work closely with our engineers, communicate with them regularly, and collaborate to find solutions that make everyone’s lives easier. Just like our designs, the key to successful developer handoff is prioritizing good communication and collaboration.</p>
<h3>Further Reading</h3>
<ul>
<li>“<a href="https://www.interaction-design.org/literature/topics/design-handoffs">Design Handoffs</a>,” Interactive Design Foundation<br />Design handoff is the process of handing over a finished design for implementation. It involves transferring a designer’s intent, knowledge, and specifications for a design and can include visual elements, user flows, interaction, animation, copy, responsive breakpoints, accessibility, and data validations.</li>
<li>“<a href="https://phase.com/magazine/designer-and-developer-handoff-guide/">A Comprehensive Guide to Executing The Perfect Design-to-Development Handoff</a>,” Phase Mag</li>
<li>“<a href="https://blog.zeplin.io/design-handoff-101-how-to-handoff-designs-to-developers">Design Handoff 101: How to handoff designs to developers</a>,” Zeplin Blog<br />Before we had tools like Figma, design handoff was a file-sharing nightmare for designers. When UI designs were ready for developers to start building, nothing could begin until designers manually added redlines to their latest local design file, saved it as a locked Sketch or Photoshop file or a PDF, and made sure developers were working on the correct file after every update. But those design tools completely changed the way teams collaborate around UI design — including the way design handoff happens.</li>
<li>“<a href="https://twitter.com/101babich/status/1635584302200274944">How to communicate design to developers (checklist)</a>,” <a href="https://twitter.com/@101babich">Nick Babich</a></li>
<li>“<a href="https://www.smashingmagazine.com/2014/10/front-end-development-ode-to-specifications/">A Front-End Developer’s Ode To Specifications</a>,” Dmitriy Fabrikant, Smashing Magazine<br />In the physical world, no one builds anything without detailed blueprints because people’s lives are on the line. In the digital world, the stakes just aren’t as high. It’s called “software” for a reason: when it hits you in the face, it doesn’t hurt as much. But, while the users’ lives might not be on the line, design blueprints (also called design specifications or specs) could mean the difference between a correctly implemented design that improves the user experience and satisfies customers and a confusing and inconsistent design that corrupts the user experience and displeases customers. (Editor’s Note: Before tools like Figma were on the rise, it was even more difficult for designers and developers to communicate and so tools such as Specctr — which this article mentions — were much needed. As of today, this article from 2014 is a bit of a trip into history, but it will also give you a fairly good idea of what design blueprints are and why they are so important in the designer-developer handoff process.)</li>
<li>“<a href="https://www.smashingmagazine.com/2020/09/figma-developers-guide/">Everything Developers Need To Know About Figma</a>,” Jurn van Wissen, Smashing Magazine<br />Unlike most design software, Figma is free and browser-based, so developers can easily access the full design files making the developer handoff process significantly smoother. This article teaches developers who have nothing but a basic understanding of design tools everything they need to know to work with Figma.</li>
<li>“<a href="https://www.smashingmagazine.com/2023/02/meet-penpot-open-source-design-platform-designers-developers/">Penpot, An Open-Source Design Platform Made For Designers And Developers Alike</a>,” Mikołaj Dobrucki, Smashing Magazine<br />In the ever-evolving design tools landscape, it can be difficult to keep up with the latest and greatest. In this article, we’ll take a closer look at Penpot, the first design and prototyping tool that’s fully open-source and based on open web standards, making it an ideal choice for both designers and developers. (Editor’s Note: Today, it’s not always “There’s only Figma.” There are alternatives, and this article takes a good look at one of them — <a href="https://penpot.app/">Penpot</a>.)</li>
<li>“<a href="https://www.smashingmagazine.com/2023/03/best-handoff-is-no-handoff/">The Best Handoff Is No Handoff</a>,” Vitaly Friedman, Smashing Magazine<br />Design handoffs are inefficient and painful. They cause frustration, friction, and a lot of back and forth. Can we avoid them altogether? Of course, we can! Let’s see how to do just that.</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Ben Shih)</author>
      <enclosure url="http://files.smashing.media/articles/designing-better-design-handoff-file-figma/designing-better-design-handoff-file-figma.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Meet Success At Scale, A New Smashing Book By Addy Osmani]]></title>
      <link>https://smashingmagazine.com/2023/05/success-at-scale-pre-release/</link>
      <guid>https://smashingmagazine.com/2023/05/success-at-scale-pre-release/</guid>
      <pubDate>Thu, 25 May 2023 20:00:00 GMT</pubDate>
      <description><![CDATA[Meet “Success At Scale”, our upcoming book with best-practice case studies from industry experts. <strong>Print and eBook shipping in fall 2023</strong>. <a href="/printed-books/success-at-scale/" data-product-sku="success-at-scale" data-component="AddToCart" data-product-path="/printed-books/success-at-scale" data-silent="true">Pre-order the book.</a>]]></description>
      <content:encoded><![CDATA[<p>Today, we are very happy to announce our new book: <em>Success at Scale</em>, a curated collection of <strong>best-practice case studies</strong> capturing how production sites of different sizes tackle performance, accessibility, capabilities, and developer experience at scale. Case studies are from <strong>industry experts</strong> with guidance that stands the test of time.</p>

<p>Join Addy Osmani, your curator, as we dive into a nuanced look at several key topics that will teach you tips and tricks that may help you optimize your own sites. The book will also include short interviews with each contributor on what additional lessons, challenges, and tips they have to share some time after each case study was written.</p>

<p><strong>High-quality hardcover</strong>. Curated by Addy Osmani. Cover art by Espen Brunborg. <strong>Print and eBook shipping in fall 2023</strong>. <a href="/printed-books/success-at-scale/">Pre-order the book.</a></p>


    <a href="https://files.smashing.media/articles/success-at-scale-pre-release/success-at-scale-preorder-opt.png">
    <img src="https://files.smashing.media/articles/success-at-scale-pre-release/success-at-scale-preorder-opt.png" />
    </a>




Contents
<p>Each section of the book is filled with case studies from real-world large-scale web applications and services, interviews with the people involved, and key takeaways to help you achieve the same success.</p>

<ul>
<li><strong>Performance</strong> includes examples of measuring, budgeting, optimizing, and monitoring performance, in addition to tips for building a performance culture.</li>
<li><strong>Capabilities</strong> is about bridging the gap between native capabilities and the modern web. You’ll explore web apps, native apps, and progressive web applications.</li>
<li><strong>Accessibility</strong> makes web apps viable for diverse users, including people with temporary or permanent disabilities. Most of us will have a disability at some point in our lives, and these case studies show how we can make the web work for all of us.</li>
<li><strong>Developer Experience</strong> is about building a project environment and culture that encourage support, growth, and problem-solving within teams. Strong teams build great projects!</li>
</ul>

Who This Book Is For
<p>This book is for professional web developers and teams who want to deliver high-quality web experiences. We explore dimensions like performance, accessibility, capabilities, and developer experience in depth. <em>Success at Scale</em> goes beyond beginner material to cover the pragmatic approaches required to tackle these challenges in the real world.</p>


    <a href="https://files.smashing.media/articles/success-at-scale-pre-release/success-at-scale-cover-800px-opt.png">
    <img src="https://files.smashing.media/articles/success-at-scale-pre-release/success-at-scale-cover-800px-opt.png" />
    </a>




About the Author
<p><a href="https://twitter.com/addyosmani"><img src="https://files.smashing.media/authors/addy-osmani-200px.jpg" /></a><em>Addy Osmani</em> is an engineering leader working on Google Chrome. He leads up Chrome’s Developer Experience organization, helping reduce the friction for developers to build great user experiences.</p>

Technical Details
<ul>
<li>ISBN: 978-3-910835-00-9 (print)</li>
<li><strong>Quality hardcover</strong>, stitched binding, ribbon page marker.</li>
<li>Free worldwide airmail <strong>shipping from Germany starting in fall 2023</strong>.</li>
<li>eBook available for <strong>download in fall 2023</strong> as PDF, ePUB, and Amazon Kindle.</li>
<li><a href="/printed-books/success-at-scale/">Pre-order the book.</a></li>
</ul>

Community Matters ❤️
<p>Producing a book takes quite a bit of time, and we couldn’t pull it off without the support of our wonderful <strong>community</strong>. A huge shout-out to Smashing Members for the kind, ongoing support. The eBook is and always will be <a href="https://www.smashingmagazine.com/membership">free for <em>Smashing Members</em> as soon as it’s out</a>. Plus, Members get a friendly discount when purchasing their printed copy. Just sayin’! ;-)</p>

More Smashing Books &amp; Goodies
<p>Promoting best practices and providing you with practical tips to master your daily coding and design challenges has always been (and will be) at the <strong>core of everything we do</strong> at Smashing.</p>

<p>In the past few years, we were very lucky to have worked together with some talented, caring people from the web community to publish their wealth of experience as <a href="/printed-books/">printed books that stand the test of time</a>. Heather and Steven are two of these people. Have you checked out their books already?</p>

<div>

<div><a href="/printed-books/understanding-privacy/"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2da7a90-acdb-43c7-82b2-5225c33ca4d7/understanding-privacy-cover-new-opt.png" /></a></div><h4><a href="/printed-books/understanding-privacy/">Understanding Privacy</a></h4><p>Everything you need to know to put your users first and make a better web.</p><p><a href="/printed-books/understanding-privacy/">Add to cart $44</a></p>

<div><a href="/printed-books/touch-design-for-mobile-interfaces/"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14658fc-bb2d-41a6-8d1a-70eaaf1b8ec8/touch-design-book-shop-opt.png" /></a></div><h4><a href="/printed-books/touch-design-for-mobile-interfaces/">Touch Design for Mobile Interfaces</a></h4><p>Learn how touchscreen devices really work — and how people really use them.</p><p><a href="/printed-books/touch-design-for-mobile-interfaces/">Add to cart $44</a></p>

<div><a href="/printed-books/checklist-cards/"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efffa8a0-82a0-415a-8aa5-8684a32083eb/checklist-cards-box-opt.png" /></a></div><h4><a href="/printed-books/checklist-cards/">Interface Design Checklists</a></h4><p>100 practical cards for common interface design challenges.</p>
<p><a href="/printed-books/checklist-cards/">Add to cart $39</a></p>

</div>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure url="http://files.smashing.media/articles/success-at-scale-pre-release/success-at-scale-preorder-opt.png" length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[The Impact Of Agile Methodologies On Code Quality]]></title>
      <link>https://smashingmagazine.com/2023/05/impact-agile-methodologies-code-quality/</link>
      <guid>https://smashingmagazine.com/2023/05/impact-agile-methodologies-code-quality/</guid>
      <pubDate>Thu, 25 May 2023 11:00:00 GMT</pubDate>
      <description><![CDATA[Say goodbye to traditional workflows and embrace Agile to unlock the power of high-quality code. Discover how Agile methodologies promote simplicity, modularization, readability, and continuous improvement, resulting in faster turnaround times, more responsive development processes, and ultimately, the creation of high-quality software that meets customer needs.]]></description>
      <content:encoded><![CDATA[<p>As software development continues to evolve, so too do the methodologies and approaches used to create it. In recent years, Agile methodologies have gained widespread adoption as a modern approach to software development, with a focus on flexibility, collaboration, and <em>delivering working software in short increments</em>. This is a key differentiator when it comes to other development workflows.</p>
<p>One of the key benefits of Agile methodologies is its impact on the quality of the code that ships. Code quality is an essential aspect of software development, as high-quality code is critical to ensure the reliability, maintainability, and scalability of any software, website, or application.</p>
Overview Of Agile Methodologies
<p>Agile methodologies are a set of software development approaches that prioritize flexibility, collaboration, and delivering working software in short increments. Agile methodologies aim to improve the quality of the software by allowing for frequent feedback, continuous improvement, and adaptation to changing requirements.</p>
<p>The <a href="https://agilemanifesto.org/">Agile Manifesto</a>, created in 2001 by a group of software developers who wanted to find a better way of developing software, outlines the core values and principles of Agile methodologies. These values include prioritizing individuals and interactions over processes and tools, working software over comprehensive documentation, customer collaboration over contract negotiation, and responding to change rather than following a concrete, long-term plan.</p>
<p>Agile methods break down projects into small and manageable units called <a href="https://www.atlassian.com/agile/scrum/sprints"><strong>sprints</strong></a>. Sprints are completed by cross-functional and self-organizing teams in a short period of time, usually two to four weeks. During each sprint, the team works on a specific set of tasks, and at the end of the sprint, they review their work, evaluate customer satisfaction, and identify areas for improvement. Because each sprint is focused on a specific set of tasks, the team can quickly pivot and adjust their approach if they receive new information or feedback from customers or stakeholders. This results in <strong>faster turnaround times and a more responsive development process</strong> which is essential for creating high-quality software that meets the needs of the end users.</p>
<p>There are several Agile methodologies that teams can choose from to develop software in a more flexible and iterative way.</p>
<p><img src="https://files.smashing.media/articles/impact-agile-methodologies-code-quality/methodologies.png" /></p>
<ul>
<li><strong>Scrum:</strong> This is perhaps the most popular Agile methodology. It involves a small team of developers working together in short sprints to deliver a working product incrementally. Each sprint typically lasts for 2–4 weeks.</li>
<li><strong>Kanban:</strong> This methodology focuses on continuous delivery and improving workflow efficiency. Work is broken down into smaller pieces and tracked on a visual board, and team members pull work items as they are ready to work on them. If you’ve used a <a href="https://trello.com">Trello</a> board before, then you know exactly how this works. Other apps, like <a href="https://www.notion.so">Notion</a>, offer similar features.</li>
<li><strong>Extreme Programming (XP):</strong> XP is a methodology that emphasizes software quality and customer satisfaction. It involves practices such as pair programming, test-driven development, and continuous integration.</li>
<li><strong>Lean Development:</strong> This methodology aims to reduce waste and increase efficiency in the development process. It involves continuous improvement and a focus on delivering value to the customer.</li>
<li><strong>Crystal:</strong> This methodology is designed for small teams working on projects with a high degree of uncertainty. It involves frequent communication, regular feedback loops, and an emphasis on collaboration.</li>
</ul>
How Agile Methodologies Can Impact Code Quality
<p>Code quality is one of the most essential aspects of any development process, as it directly impacts the success of any product. Agile methodologies have been designed to prioritize a customer-centric approach by breaking down features into smaller, manageable pieces of functionality. This allows for more frequent releases of working quality code that can be tested and reviewed to help deliver high-quality software that meets customer needs. Here are some practical ways in which Agile methodologies help promote and impact efficient code quality in development:</p>
<ul>
<li><strong>Prioritizing simplicity and efficiency.</strong><br />Agile methodologies prioritize simplicity and efficiency in software development. This means that developers are encouraged to write code that is not only functional but also easy to understand, test, debug, maintain, and modify. The goal is to create a codebase that is clean and simple, which can help reduce the potential for bugs and errors.</li>
<li><strong>Encouraging modularization.</strong><br />The Agile process promotes the modularization of code. By breaking code down into smaller, modular components, developers can create code that is more flexible and reusable. This can save time and effort in the long run by reducing the need for repetitive or verbose code. Additionally, by optimizing the performance of each component, the developer is able to reduce the overall processing time, resulting in a more efficient codebase, breaking down features into smaller, more manageable pieces — often referred to as <a href="https://www.agilealliance.org/glossary/user-stories/">user stories</a> or <a href="https://www.atlassian.com/agile/project-management/epics#:~:text=What%20is%20an%20agile%20epic,over%20a%20set%20of%20sprints.">epics</a>. This approach allows development teams to focus on delivering small, working pieces of functionality that can be tested and validated before being integrated into the larger codebase while also enabling them to respond quickly to changing requirements or feedback. </li>
<li><strong>Improving readability.</strong><br />It’s important that code is legible and understood across the team, as it affects not only the developer who wrote the code but also other developers who may need to modify or maintain the code in the future. Agile methodologies help developers focus on writing code that is self-documenting and easy to understand by promoting the use of clear and concise coding practices such as self-descriptive naming conventions and avoiding complex code structures.</li>
<li><strong>Test-Driven Development (TDD).</strong><br />TDD involves writing tests for the code before writing the code itself, which can help ensure that the code is well-structured and easy to read. This method emphasizes continuous feedback and improvement on the code, as developers are regularly provided with feedback on their work and have opportunities to make improvements as they go. By receiving feedback early on in the development process, developers can address issues and make changes to their code before they become bigger problems.</li>
<li><strong>Continuous integration.</strong><br />This is a development practice that involves frequently integrating code changes from multiple developers into a single shared codebase. With continuous integration, code is automatically compiled, tested, and validated, which helps to catch issues early on in the development process. This approach ensures that code is always in a releasable state, which ultimately helps to improve code quality and reduce the risk of bugs or errors.</li>
</ul>
<p>Overall, Agile methodologies can help developers write better code by <strong>promoting continuous code feedback and improvement while prioritizing simplicity and efficiency</strong>. By following these principles, developers can create code that is more efficient, maintainable, and robust, ultimately resulting in a better end product.</p>
Key Principles Of Agile Development
<p><img src="https://files.smashing.media/articles/impact-agile-methodologies-code-quality/agile-principles.png" /></p>
<p>At its core,</p>
<p>Agile methodologies value individuals and their interactions over following strict processes and tools.</p>
<p>This means that communication and collaboration between team members are prioritized to ensure everyone is working towards the same goals.</p>
<p><img src="https://files.smashing.media/articles/impact-agile-methodologies-code-quality/agile-goals.png" /></p>
<p>These processes are governed by a set of guiding principles that help the development team to create software that is tailored to the customer’s needs while ensuring high-quality delivery.</p>
<ul>
<li><strong>Customer satisfaction is the top priority.</strong><br />The goal of Agile development is to create software that meets the needs of the customer. This means that the customer is involved in every step of the process, from planning to testing.</li>
<li><strong>Teamwork is essential.</strong><br />Cross-functional teams that work together to complete tasks are a core principle. This means that everyone on the team has a role to play, and everyone works together to achieve the same goal.</li>
<li><strong>Flexibility is key.</strong><br />Everything about Agile development is designed to be flexible and adaptable. This means that the team can change course if needed, and the development process can be adjusted based on feedback from the customer.</li>
<li><strong>Communication is critical.</strong><br />Open and honest communication between team members and the customer is encouraged. Everyone should feel empowered to share their ideas, concerns, and feedback.</li>
<li><strong>Iterative development.</strong><br />Agile development involves breaking the development process down into smaller, more manageable pieces. By working on one sprint at a time, the team can make progress quickly and efficiently.</li>
<li><strong>Continuous improvement.</strong><br />This means that the team is always looking for ways to improve the development process and make it more effective.</li>
</ul>
Prioritizing Collaboration And Communication
<p>Effective collaboration and communication are crucial in any team-oriented project, and Agile methodologies place a particular emphasis on these values.</p>
<p>Prioritizing collaboration and communication ensures that everyone involved in the project is working towards the same goals and that any issues or concerns can be addressed quickly and effectively.</p>
<p>When collaboration and communication are prioritized, team members are encouraged to share their expertise and insights, which can lead to more creative and innovative solutions.</p>
<p>In an Agile environment, team members work closely together, and there is often a high level of interdependence between different areas of the project. If one team member is struggling or working in isolation, it can have a ripple effect on the rest of the team and ultimately impact the success of the project. Collaborating with other developers can help identify issues in the code that may not have been noticed otherwise. For example, another developer may notice a potential security vulnerability or identify a bug the original developer missed. Here are some of the key ways to ensure this:</p>
<ul>
<li><strong>Encourage cross-functional teams.</strong><br />Bringing together individuals with different skills and expertise can lead to stronger communication between business owners and the technical team that produces the product. I remember a time when I was working on a project with my team, and we divided the work based on each person’s strengths. This approach allowed everyone to contribute their best work to the project.</li>
<li><strong>Break down silos.</strong><br />Silos refer to a situation where different teams or departments within an organization work in isolation from each other, without much communication or collaboration. Silos can lead to several negative outcomes, such as a lack of transparency, duplication of effort, and a slower development process. Eliminating barriers between individuals and teams would help foster collaboration by allowing individuals to share their skills and expertise.</li>
<li><strong>Hold regular check-ins and feedback sessions.</strong><br />Scheduling consistent check-ins and feedback sessions can help ensure everyone is aligned on priorities and goals. I’ve found that this approach helps keep everyone motivated and focused on the end goal.</li>
<li><strong>Use proper communication channels.</strong><br />Utilizing appropriate communication channels can increase the transparency and visibility of the project. In my experience, using tools like instant messaging (like Slack) and video conferencing (like Zoom) has helped facilitate collaboration and information sharing, particularly in a remote team environment.</li>
<li><strong>Hold dedicated “Ask Me Anything”(AMA) sessions.</strong><br />AMA sessions can help frontline managers understand the rationale behind the approach and become comfortable with empowering their teams and giving up control. I remember a time when my team participated in one of these sessions, and it helped us better understand the benefits of Agile methodology because it put everyone on the same page and made everyone more confident in the overall direction.</li>
</ul>
<p>Failing to prioritize collaboration and communication can have serious consequences for an Agile project. Miscommunications and misunderstandings can lead to delays, missed deadlines, and even project failure. Team members may become demotivated or disengaged if they feel they are working in isolation or not being heard. In the worst-case scenario, the lack of collaboration and communication can lead to a breakdown in the project team, which can be difficult to recover from.</p>
Refactoring And Code Reviews
<p>Refactoring refers to the process of improving the internal structure of code without changing its external behavior. It is done to enhance code readability, maintainability, and performance. On the other hand, code review is the process of examining code to identify issues or defects that may affect its quality, security, or functionality.</p>
<h3>Refactoring</h3>
<p>Refactoring is the process of restructuring existing code without changing its external behavior. It should be done frequently in Agile projects — often in the middle of a sprint — to keep the codebase clean and avoid <a href="https://css-tricks.com/defining-and-dealing-with-technical-debt/">technical debt</a>. Here are some steps on how to carry out refactoring in Agile:</p>
<ul>
<li>Identify the parts of the codebase that need refactoring.</li>
<li>Discuss with the team why refactoring is necessary and the benefits it can bring.</li>
<li>Prioritize the refactoring tasks based on their impact on the project.</li>
<li>Break down the refactoring tasks into small, manageable chunks.</li>
<li>Refactor the code while ensuring that it still passes all the tests.</li>
<li>Get feedback from the team and stakeholders on the refactored code.</li>
</ul>
<h3>Code Review</h3>
<p>A code review is a process of systematically reviewing the code written by other team members. It aims to improve the code’s quality, find bugs, and ensure it adheres to coding standards. A code review should be done early and often in Agile projects to ensure that the codebase is always of high quality. Here are some steps on how to carry out a code review in Agile:</p>
<ul>
<li>Assign a team member to review the code written by another team member.</li>
<li>Review the code for readability, maintainability, and adherence to the coding standards.</li>
<li>Provide feedback on the code and suggest improvements.</li>
<li>Discuss the feedback with the code author and come up with a plan to address the issues.</li>
<li>Make sure that the code changes are reviewed again after they are implemented to ensure that they meet the desired quality standards.</li>
</ul>
<p>Overall, refactoring and code review are essential practices in Agile methodologies that help ensure the code is of high quality and meets the customer’s needs. By incorporating these practices into the development process, the team can improve collaboration, reduce technical debt, and deliver high-quality software faster.</p>
Agile Compared To Traditional Workflows
<p>Traditional workflows refer to development methodologies that follow a <strong>linear, sequential process</strong>, where each phase of development must be completed before moving on to the next phase, with a focus on ensuring that all requirements are clearly defined before development begins. Some examples of traditional workflows include the <a href="https://business.adobe.com/blog/basics/waterfall">Waterfall model</a>, the <a href="https://www.javatpoint.com/software-engineering-v-model">V-model</a>, the <a href="https://blog.logrocket.com/product-management/risk-driven-development-with-the-spiral-model/">Spiral model</a>, and the <a href="https://en.wikipedia.org/wiki/Rational_unified_process">Rational Unified Process</a>. These methodologies are often referred to as “plan-driven” or “heavyweight” methodologies, as they involve extensive planning and documentation upfront, with less flexibility for changes during the development process.</p>
<p>Take a look at the Waterfall model, for example. This model, also known as the “classic life cycle model,” is based on a series of well-defined phases, with each phase depending on the successful completion of the previous one.</p>
<p>The phases of the Waterfall model typically include requirements gathering, design, implementation, testing, deployment, and maintenance. Once one phase is completed, the next phase begins, and there is no going back to the previous phase. This means that the Waterfall model follows a “top-down” approach, where each phase is dependent on the previous phase’s success. And, true to its name, the process resembles a waterfall.</p>
<p><img src="https://files.smashing.media/articles/impact-agile-methodologies-code-quality/waterfall-model.png" /></p>
<p>One of the key characteristics of the Waterfall model is that it is <strong>heavily focused on planning and documentation</strong>. Before the development team begins coding, the project requirements and design specifications must be fully documented. This documentation is then used to guide the entire development process.</p>
<p>While the Waterfall model has been a popular development process for many years, it has several limitations. For instance, the linear and sequential nature of the model can be inflexible, making it challenging to incorporate changes and feedback throughout the development process. It also puts a lot of emphasis on up-front planning, which can be time-consuming and costly. Plus, we all know that even the best-laid plans don’t always go right.</p>
<p>As a result, many software development teams have shifted towards using Agile methodologies instead of the Waterfall model. Agile methodologies offer <strong>greater flexibility and collaboration</strong>, enabling teams to adjust their approach as they gather feedback and insights throughout the development process.</p>
<p>Here are some key differences between Agile methodologies and traditional workflows:</p>
<table>
    <thead>
        <tr>
            <th></th>
            <th>Agile</th>
      <th>Traditional</th>
        </tr>
    </thead>
    <tbody>
        <tr>
      <td><strong>Flexibility</strong></td>
            <td>Flexible and adaptable.</td>
      <td>Rigid and structured.</td>
        </tr>
        <tr>
      <td><strong>Customer involvement</strong></td>
            <td>Prioritize customer involvement and feedback throughout the development process.</td>
      <td>Limited customer involvement, with the customer being presented with the final product at the end of the process.</td>
        </tr>
        <tr>
      <td><strong>Team structure</strong></td>
            <td>Cross-functional and collaborative.</td>
      <td>Specialized and isolated.</td>
        </tr>
    <tr>
      <td><strong>Testing</strong></td>
            <td>Occurs throughout the development process.</td>
      <td>Occurs the end of the development cycle.</td>
        </tr>
    </tbody>
</table>

<p>While traditional workflows may have some advantages, such as providing a clear roadmap and a structured approach, I believe Agile methodologies are better suited for today’s fast-paced, ever-changing software development landscape. Agile methodologies offer the flexibility and adaptability necessary to meet changing requirements and deliver high-quality software products.</p>
Conclusion
<p>In conclusion, adopting Agile methodologies can have a significant positive impact on code quality. By prioritizing collaboration and communication, implementing test-driven development, and regularly conducting code reviews and refactoring, development teams can ensure that the code they produce is high-quality, maintainable, and meets the customer’s needs. </p>
<p>It’s worth noting that Agile methodologies are not without their challenges, such as the potential for scope creep. You can imagine how a flexible process that encourages frequent collaboration and feedback could lead to a project growing more legs than it needs. That said, Organizations that have adopted Agile methodologies <a href="https://www.zippia.com/advice/agile-statistics/#:~:text=The%20most%20well%2Dknown%20companies,40%25%20when%20compared%20to%20waterfall">report higher levels of customer satisfaction, faster time-to-market, and overall improved project success rates</a>. As the industry continues to evolve, it’s likely that we will see more and more organizations embrace Agile methodologies to improve code quality and project outcomes.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2020/04/collaborative-coding-ultimate-career-hack/">Why Collaborative Coding Is The Ultimate Career Hack</a>”, Bobby Sebolao</li>
<li>“<a href="https://www.smashingmagazine.com/2019/12/beyond-sprint-alternative-integrating-teams/">Beyond Sprint 0: An Alternative For Integrating Teams</a>”, Shamsi Brinn</li>
<li>“<a href="https://www.smashingmagazine.com/2019/11/adapting-agile-part-time-teams/">Adapting Agile For Part-Time Teams</a>”, Philip Kiely</li>
<li>“<a href="https://www.smashingmagazine.com/2019/06/bringing-healthy-code-review-mindset/">Bringing A Healthy Code Review Mindset To Your Team</a>”, Sandrina Pereira</li>
<li>“<a href="https://www.smashingmagazine.com/2019/08/better-design-process-organization/">Bringing A Better Design Process To Your Organization</a>”, Eric Olive</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Sarah Oke Okolo)</author>
      <enclosure url="http://files.smashing.media/articles/impact-agile-methodologies-code-quality/impact-agile-methodologies-code-quality.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Smashing Podcast Episode 61 With Rachel Andrew: What Is Web Platform Baseline?]]></title>
      <link>https://smashingmagazine.com/2023/05/smashing-podcast-episode-61/</link>
      <guid>https://smashingmagazine.com/2023/05/smashing-podcast-episode-61/</guid>
      <pubDate>Tue, 23 May 2023 08:00:00 GMT</pubDate>
      <description><![CDATA[In this episode of the Smashing Podcast, we’re talking about Web Platform Baseline. What is it, and how can it help determine your browser support policy? Drew McLellan talks to expert Rachel Andrew to find out.]]></description>
      <content:encoded><![CDATA[<p>In this episode of the Smashing Podcast, we’re talking about Web Platform Baseline. What is it, and how can it help determine your browser support policy? Drew McLellan talks to expert Rachel Andrew to find out.</p>


<h3>Show Notes</h3>
<ul>
<li>Rachel Andrew <a href="https://uk.linkedin.com/in/rachelandrew">on LinkedIn</a></li>
<li><a href="https://rachelandrew.co.uk/">Personal website</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2023/05/boost-design-workflow-setapp/">How To Boost Your Design Workflow With Setapp</a> <em>written by Rachel How</em></li>
<li><a href="https://www.smashingmagazine.com/2023/05/sticky-menus-ux-guidelines/">Designing Sticky Menus: UX Guidelines</a> <em>written by Vitaly Friedman</em></li>
<li><a href="https://www.smashingmagazine.com/2023/05/media-object-float-issues-css-block-formatting-contexts/">Solving Media Object Float Issues With CSS Block Formatting Contexts</a> <em>written by Gabriel Shoyombo</em></li>
<li><a href="https://www.smashingmagazine.com/2023/05/design-patterns-collaborate-design-system/">Design Patterns Are A Better Way To Collaborate On Your Design System</a> <em>written by Ben Clemens</em></li>
<li><a href="https://www.smashingmagazine.com/2023/05/big-tooling-upgrades-large-organizations/">How To Deal With Big Tooling Upgrades In Large Organizations</a> <em>written by Joran Quinten</em></li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://rachelandrew.co.uk/"><img src="https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82c26edc-5500-42a6-87a9-62e84b998433/rachel-andrew-tw-profile.jpg" /></a> Drew: She’s a web developer and technical writer and editor. She’s currently working for Google on the Chrome team where she’s a staff technical writer and content lead for web.dev and developer.chrome.com. Prior to Google, she spent 20 years as a freelancer and business owner and she’s written almost countless books and articles where she excels at taking complex technical subjects and making them more readily understandable. She’s also an experienced conference speaker, able to deliver a technical talk to teach an audience about CSS layouts or a keynote to inspire them drawing from her wealth of experience developing for the web. So we know she’s an experienced technical writer, teacher and developer, but did you know she once taught a Canada goose to make a bourbon cocktail? My smashing friends, please welcome back Rachel Andrew. Hi Rachel, how are you?</p>
<p>Rachel: I’m smashing.</p>
<p>Drew: Welcome back to the podcast. It’s been a couple of years and theres been a change of day-to-day role for you.</p>
<p>Rachel: Yes, yes. I guess last time I was here it was mid pandemic and I was still editor-in-chief of Smashing Magazine and yes, these days I’m over at Google on the DevRel team with my content team sort of helping to get good docs and information out to our developers about things on the web platform.</p>
<p>Drew: So still in the realms of helping people learn about the web platform and assisting their busy lives, trying to keep a pace of all the new technologies and developments?</p>
<p>Rachel: Yes. Yeah, it’s kind of a perfect role for someone who spent most of their life sort of explaining things to web developers. So yeah, it’s great and within a really great team of people who were very dedicated to talking about all this new stuff.</p>
<p>Drew: So speaking of new developments and also Google, last week was Google I/O 2023, which is always an exciting time for us tech nerds because there are all sorts of announcements and updates from Google. With Google being such a large contributor to the web platform, it then becomes an exciting time to see whats been worked on for the web in particular and see what might be coming out next. I feel like we’re in a place with a web platform where it’s continuing to develop a fantastic pace at the moment.</p>
<p>Rachel: Yeah.</p>
<p>Drew: Those of us who have been working in the industry for a while remember the years when nothing was added in terms of browser capabilities, I mean sometimes years at a time. You were working on the web back then. Was it frustrating that things weren’t getting added or did it just make it easier to keep up?</p>
<p>Rachel: I think it was frustrating. You know, when we had, we had five years between IE6 and IE7 so that was kind of five years that the web platform just basically stopped because so many people were using IE6, although there were new other browsers around you couldn’t really use all the new stuff that they were putting into the browser because the majority of people coming to your website were in a browser that didn’t support it. So I think it was very frustrating because that’s a very, very long time, especially when IE6 had all sorts of bugs and issues as well so that we weren’t getting fixes to things.</p>
<p>Rachel: It wasn’t even new features. We were dealing with problems, like bits of your content disappearing for no apparent reason. So yeah, it was frustrating, but it was very stable. Buggy but at least the bugs that we could list them, there were websites that listed all of the IE6 CSS problems, so you’d hit one and you’d be like, oh yeah, that’s that. I know how to fix that. So we all became pretty expert in dealing with browser bugs basically and knowing what they were.</p>
<p>Drew: I remember things like Peekaboo, was it Peekaboo bug was that era.</p>
<p>Rachel: Yes.</p>
<p>Drew: And what was the website that listed them, listed them all? I can’t remember it’s name now, but the list of known bugs just got longer and longer and longer over time to the point where it became difficult to find the one you were, the particular bug you were experiencing because the list was so long. We were in a place back then where the dominant browser, which was Internet Explorer at the time, was the browser that was seeing the least technical innovation but that doesn’t mean there was no technical innovation because there was a broader ecosystem, but was it ever possible to use new bits of CSS that were appearing in things like Firefox? Is that something we could do when the dominant browser was so far behind?</p>
<p>Rachel: It was pretty hard. I mean, I think all the ideas of things like polyfills and also there was a lot of us kind of pushing the progressive enhancement story as well and saying, look, it’s fine, your website doesn’t need to look the same in all browsers. I think I’ve been saying that for most of my life at this point. And that was a big thing at the time because people were just sort of A/B test in the browsers, you know, there was no... you’re sensing off to your client and they would just open it in another browser and be like, "Oh no, this is wrong 'cause it’s three pixels out on this other browser."</p>
<p>Rachel: And that was very, very common. People would talk about pixel perfect and what they would typically mean is it should be exactly the same as the PDF or whatever that you were working from or the Photoshop file and all of the browsers that they were aware of, or at least both browsers typically. So I think it was quite difficult to push the web forward at the time, you got quite a lot of resistance and you’d often have to just do it anyway and hope you’d get away with it quite a lot of the time.</p>
<p>Drew: We don’t seem to see that so much these days where clients or anyone really is looking at a web experience side by side in two different browsers and saying, oh, they’re not quite the same. Is that because browsers are much more standardized now and they do look the same or have the expectations changed, do you think, because of so many devices that we’re looking at, the fact that mobile devices and tablets and so many different screen sizes that has that expectation gone away?</p>
<p>Rachel: Yeah, I think it’s a bit of both, isn’t it? I think the web browser is how we do everything these days and it’s less of a separate bit of software, it’s just kind of how you use your computer and a lot of the time and I think theres less of an awareness of, oh, we should be checking this for someone who isn’t a developer, we should be checking this in the different browsers. Far more likely, I think, would be someone saying, "This doesn’t work well on my phone." 'Cause they’ll get the email saying, oh look at the new site, and they’re probably on their phone when they get that email and they’ll open it on their phone and then they find, oh, somethings overlaying something or it’s hard to get to something because of a toolbar or whatever.</p>
<p>Rachel: So I think it’s far more likely that a client is going to be coming back with that kind of problem. Maybe they’ve got an older version, an older phone that they’ve not updated and it’s got an older version of software on it or whatever than doing that kind of desktop A/B testing that used to be really common, even with a fairly non-technical client, they would’ve been told by someone that they should make sure it works in these browsers and so they would be doing that checking.</p>
<p>Drew: Yeah, I mean clients would come along to those of us who are building sites for them and they would say, right, we need this site built and it needs to work in IE6 or it needs to work in IE7 and they’d have these very definitive browser versions that things had to work in. And now between, as you mentioned, between IE6 and IE7, there was a multiple year gap, so that constraint from the client could have, it could massively impact your sort of choice of technology or design, couldn’t it?</p>
<p>Rachel: Oh, absolutely. Yeah, I mean that was just sort of fairly standard when you were building sites and at the time I was building sites for clients that would be on the spec for the site would be which browsers that you had to support and you would be expected to test it in those browsers and if it worked in those browsers, that was all good. That was the line that you were following.</p>
<p>Drew: Yeah, I guess even things, even that things were pretty limited. It was a fairly easy decision to make to say these are the browsers that we’re supporting. It’s got to work in IE7 for whatever reason.</p>
<p>Rachel: Yeah.</p>
<p>Drew: It was fairly clear cut, but these days I don’t think I could even tell you what version of Chrome or Firefox or Safari I’m running or if that’s the latest, I’m presuming it’s the latest, but it’s not so clear cut and straightforward now, is it?</p>
<p>Rachel: Right, yeah. You don’t even notice that the things update. They just update and you don’t realize if that’s a major version or just some say security release that’s come out that you need to update to. I don’t think most people know which features landed in which version of a browser. We used to know. We used to know exactly what was available in each browser, so it’d be like, "Oh great, this project is IE8 and therefore I’ve got, I don’t know, display table" or something that landed in that browser.</p>
<p>Rachel: We used to know. These days we don’t know. I know I spend all of my time documenting this stuff and writing about whats new in the web platform and even so, I’m fairly hazy. If you said to me, "Oh, what was in Chrome 113?" And I’ve just done the work on that, I’d be like, "Err, was that in that one or was that in the beta?" So the average developer then you’re not going to be able to keep track of all that stuff. Theres so much stuff landing all the time.</p>
<p>Drew: So it makes the situation quite difficult, doesn’t it, when you might have sometimes contracts with people you’re building stuff for and certainly expectations that theres going to be a level of browser support but it’s not, if you don’t know what versions things are and they move really quickly, it can be really difficult to pin down to a targeted browser version. And this is, I believe it’s the crux of the problem that’s addressed by one of the big announcements at Google I/O. How do we figure out whats safe to use?</p>
<p>Rachel: Yeah, and so this is something we’ve been thinking about actually for as long as I’ve been at Google is we’ve been thinking of this top pain point that we hear from developers that they struggle to keep up with the web platform and they struggle to know what is safe to use, what is okay to roll out in production without worrying about it. Typically developers will be building for the latest versions of a site and then suddenly they’ll realize that, oh, this is broken over here and they just don't, they didn’t realize that and to actually figure out the browser support involves going kind of property-by-property, feature-by-feature to say, can I use our MDN and looking at the compatibility data. It’s all out there, but you have to do that on a feature-by-feature basis.</p>
<p>Rachel: And so we’re kind of thinking about this issue and it always comes up, we talk to a lot of developers and it always comes up as the top problem and so we’re thinking about how we can resolve that. And that’s what kind of came to this idea of, well, can we create this line and say that everything that’s passed this line has interoperability, is kind of safe to use without worrying about it. And that’s where this idea of Baseline came from, to have this kind of moving line that includes all of the features that are interoperable and don’t have any major standout issues. And that’s what we’re calling Baseline.</p>
<p>Rachel: And the whole project is it’s not just a Google thing, this comes from the Web DX community group. So we’re working with other browsers and other people on defining this and kind of coming up with the feature groupings so that we can try and create this clarity for developers that they’ve got a sort of line where they can say, they can look at that and say, oh yes, this thing is in Baseline and therefore I know it’s going to work everywhere in the most modern browsers.</p>
<p>Drew: So instead of saying this, we’re supporting these particular browsers, you’re saying this is a core feature set that’s common across all the currently available browsers. This is a safe set of features and it’s that set that I’m going to be developing for compatibility with.</p>
<p>Rachel: Right, yeah. And that sort of takes that requirement to figure out each individual feature for, and also because we get partial implementations of stuff all the time on the platform and it’s like, so the kind of feature grouping part of this, it is the big piece of work really to actually identify, does the feature completely work everywhere because sometimes there will be support for things. I think one of the things that, an obvious thing that people understand is the gap property in where in Flexbox and Grid and so on. Now you could test for that. You could test for where the gap was supported and a browser would say yes because it was supported in grid layout even when it wasn’t supported in flex layout and therefore there was no way to check for this. And it was quite confusing for people if they were just doing that test. So I think theres these sort of groupings of things is also quite useful. So the things that are in Baseline are things that do work as a feature, even if that does actually involve various moving parts.</p>
<p>Drew: Yes, because theres been a trend from the sort of latest CSS specs to be, whats the word, sort of unifying some of the properties isn’t there rather than-</p>
<p>Rachel: Yes.</p>
<p>Drew:span&gt; ... rather than having individual properties that do the same thing in different context, using the same-</p>
<p>Rachel: Right.</p>
<p>Drew:span&gt; ... keywords across different uses.</p>
<p>Rachel: Yeah, so things like alignment, fragmentation, we’ve got these specifications that deal with sort of alignment across all of the different layout specs, which is great because it means that say if you want to switch from a flex to a grid layout or whatever, all the alignment stuff should work in the same way, but does mean that we potentially get these partial implementations and that’s quite difficult to understand. So yeah, I think it’s things like that and so that theres an awful lot actually goes into the creation of this sort of feature set grouping and we’re not all the way there yet. We’re hoping to get most of CSS and JavaScript done by the end of the year because it’s actually quite a job just to figure out how things all fit together.</p>
<p>Drew: So it’s almost like instead of targeting a version of any particular browser, we’re targeting a version of the web platform. We’re saying-</p>
<p>Rachel: Yeah.</p>
<p>Drew:span&gt; ... look at the web platform as it is here today, these are the things that are universal, that are reliable to use and that’s what we’re going to support. And anything that falls out of that boundary included because the implementation might be patchy.</p>
<p>Rachel: Right, yeah. It might need a bit more care. And it’s not saying to people, oh, you can’t ever use these things, but if you know it’s not in Baseline then maybe theres some things you need to think about there and it might be fine for your project or it might be that it has a good fallback or it’s something that is polyfillable but those are things that you do need to think about on a case-by-case basis rather than just, this should be fine to use.</p>
<p>Drew: I think most of us are familiar with sites like canIuse.com, which you mentioned briefly before. Is this just replicating information that already exists or is it different from can I use?</p>
<p>Rachel: I think it’s different in that, so something that can I use does, and also the MDN BCD data, they work very much on a sort of feature-by-feature basis. They don’t actually cover all of the web platform. Theres definitely, certainly Can I use has made some decisions in terms of how to group certain things. I have a long standing open issue to split out fragmentation from multicar for example, because they’re bundled together, making multicar look harder to use than it actually is because there are fragmentation bugs in there.</p>
<p>Rachel: So they’ve done some of the same stuff, but what we haven’t got there is this sort of full view of the platform and this idea of this is within Baseline, this is out, you still have to go to each thing and make those decisions. Ideally we’re hoping, I mean as MDN are using Baseline on feature pages, they’re rolling that out at the moment. It’s probably saying that we’re hoping that Can I use, we’ll also be able to use and say, "Oh, this feature is in Baseline" as well as that more fine grained data.</p>
<p>Drew: And how do you make that decision to say that yes, this, not only is this supported but this is widely supported enough that we can include it in Baseline. How do you make that distinction?</p>
<p>Rachel: So at the moment we’re going back the last two major versions of browsers and theres been a lot of debate about that — as you can imagine. It’s something that’s great to [inaudible 00:17:38]. The fact is I think the line will always be wrong for if we say this is the line, two versions back, a lot of people are saying, "Oh, you should use minor versions of Safari" because we’ve seen some massive features going in doc releases because of the way that Safari do their versioning because obviously a main version of Firefox and Chrome, that’s every month we’ve got a new main version. And so that’s obviously up for debate. Some people are saying we should go further back. Other people are pointing out the fact that just because Chrome has updated, all of the browsers are derivatives that use chromium, they might not have updated. So I think the line will always be wrong, I think.</p>
<p>Rachel: But what it does give is this sort of stable view onto things. And the other thing that we’re planning to do as part of this is to have these kind of moments in time. So at the end of the year we’re going to say, right this cut is where we are at that point is going to be Baseline 24 and that will be a static line. That will be whats in Baseline at this point in time. And then in a years time we’ll do Baseline 25. And I think an interesting thing then will be the difference between those two points because I think a conservative web team could say, "Right, I am sticking with Baseline 24" even though maybe they’re well into 25, we’re sticking with this.</p>
<p>Rachel: But the things between those two lines then I think become the things that you might want to make judgments on rather than having to look at the entire web platform and say, "Oh, can I use this? Can I use that?" And say, "Well, we’re going to use this yearly cut of Baseline." And then the things that came after that that are in Baseline as it moves forward we’ll take a look at and see, oh, I can polyfill that or this is fine as a progressive enhancement.</p>
<p>Drew: It puts me in mind slightly of things like Ubuntu Linux distribution and their long-term support releases that they do.</p>
<p>Rachel: Right.</p>
<p>Drew: They’ll say, "This is the one that we offer long-term support. It’s stable, it’s reliable to use." And so you might adopt that and that doesn’t mean that you wouldn’t necessarily install a couple of key extra, more frequently updated packages or whatever, but you know that the system that you’re working with is sort of frozen in time and supported and is a known quantity going forward.</p>
<p>Rachel: Yeah.</p>
<p>Drew: I guess those who work in very regulated industries who sort of frequently go under contract with customers or suppliers, whatever, to say they’ll provide compatibility with certain browsers as it is at the moment. Surely this would be a very welcome change because these are actually more concrete measures that support can be tied to and it’s a stability that’s more in line with the stability of a binding agreement than an arbitrary version number that some nerd in Silicon Valley might attach to a build of a browser.</p>
<p>Rachel: Right.</p>
<p>Drew: So you can say our platform is targeting Baseline 24 and you could keep that way for three, four years maybe.</p>
<p>Rachel: Yeah.</p>
<p>Drew: And then review it and update.</p>
<p>Rachel: Yeah, I like that. I like that stuff, yeah, the idea, this is a sort of stable thing and I think that that yearly release will become, I think, quite important. So I think I can see libraries and frameworks and so on tying themselves essentially to a stable release, one of the yearly cuts and then moving on. And I think it should be really interesting as well being able to see, well actually how has the platform moved on between those two yearly points? We don’t really have a look at that at the moment. I mean you could work it out, but it’d be quite a lot of work. It’d be nice just to be able to see that and see how things are changing.</p>
<p>Drew: I always enjoy a list of features that are included in whatever. Heres things that you can use that you won't, perhaps weren’t aware of. And I can see how a big list of Baseline features might highlight different things that an individual developer might not be aware of that-</p>
<p>Rachel: Yeah.</p>
<p>Drew:span&gt; ... have arrived on the web platform and are ready to be used.</p>
<p>Rachel: Yeah, I mean the awareness is a big thing. I mean, I’ve been doing, me and a colleague as well have been doing talks, whats new on the web platform type talks and typically introducing things that are interoperable. And every time there will be people saying, "Oh, I never knew you could do that", or "I never knew that worked. I thought that was an experimental thing." And then realizing that it’s actually a feature that’s in all engines. And I think that that’s very, very common. So I think that’s the other sort of side of this is that it also raises awareness of features that now are interoperable, that people have got an idea that the web platform moves incredibly slowly.</p>
<p>Rachel: I think particularly people like us who’ve been doing this for a long time and remember those days. And so people are very surprised, you know, you still see people saying about a new feature, "Oh well it’ll be five years before I can use that." And yet you’re looking at things like container queries and cascade layers. All of these things landed cross browser very, very quickly, which is great. And I think that’s a story that this can help tell as well.</p>
<p>Drew: So this was a big announcement from Chrome at the big Google I/O conference, but you mentioned it’s not just a Google thing is it, there are other parties involved. So who is deciding whats in the collective Baseline? What parties are involved in this?</p>
<p>Rachel: Right, yeah, so I mean obviously we partnered very closely with Mozilla and MDN in launching this. So that actually during the developer keynote we launched this on web.dev and on MDN at the same time on a select number of pages because we haven’t got a full feature site yet. But it was nice to actually show what it would look like rather than it being a kind of theoretical thing. And also MDN published a blog post about it too and their thinking. But yeah, the work has been done within the Web DX community group and that group has representatives from all of the browsers and various other people including interested developers.</p>
<p>Rachel: Anyone can join that group and be part of those discussions. So that’s where we’re also asking people to go and comment on this stuff rather than, I mean people are very welcome to come and talk to me about it, but in terms of getting sort of information out there and discussed by the wider group, raise issues on the Web DX community group site because that’s where the people are who are making the decisions. And at the moment it’s just fantastic to be getting the feedback into that group so that we can actually see is this solving a problem, what problems maybe we’ve missed and be able to talk about that.</p>
<p>Drew: So it’s a broader community effort, but it just so happens that the major players Google, Mozilla and everything are putting a lot of time and effort into it and really backing it as an idea.</p>
<p>Rachel: Yeah, yeah. And I think that’s something that as DevRel, you know, as developer relations, that’s kind of what we do. We try and bridge the gap between browser engineers and spec writers and the developer community. And so I think that’s something that we can do as DevRel for the web is to actually bring forward these things that we think might help and see where we can take them.</p>
<p>Drew: Now I’ve heard about the Interop 2022 and now 2023 initiatives. Does Baseline relate to Interop at all? Or maybe you could talk us through that where it fits in?</p>
<p>Rachel: Yeah, I mean it’s kind of the same group of people certainly as Google who are involved with those projects. So the Interop project takes a set of features that if it’s based on web platform tests, so it takes a set of features that have some sort of interoperability problem. So it might be that they don’t work in one or more browsers or they have sort of bugs that are causing pupil problems. So we’ve got this set of features and then over the year all of the engines work to implement or fix those things. So we’ve kind of got a score, a scoreboard where you can go and look and see how everyones doing.</p>
<p>Rachel: So the Interop project works to fix known issues, either make things interoperable or fix books and things that look on paper like they work, but have some sort of problems. And so that project is getting more things essentially into Baseline. So they’re linked in that way and they’re a lot of the very similar people are working together on those from the browsers. So I think in terms of the relationships there and the fact that Interop did bring, for the first time, all of the vendors together in this sort of common goal to make the platform better, theres definitely a link there in terms of this is what we care about. Whereas Baselines kind of from the other side, it’s saying, well, okay, what is there? What is interoperable? What can we already use? So yeah, hopefully things like Interop will help to add more things to Baseline as we go along.</p>
<p>Drew: So it is basically just identifying things that could potentially go into Baseline, might be nearly there, and then swarming on those features to get them across the line and get them interoperable and usable on the platform because they’re seen as important or significant in some way.</p>
<p>Rachel: Yeah, and I mean we know that that developers aren’t going to use things in general unless they are available across all engines. So it’s kind of in everyones interest to work together to get to that point because then people use the stuff that we’re building so that, yeah, it’s said so they kind of work very well together. And I think it’s just this sort of spirit of collaboration and trying to make things better for developers.</p>
<p>Drew: We’ve talked about how developers might target, in past, a browser version and now we’re saying would target Baseline, but it works the other way around, doesn’t it? If the frameworks and the tools that we are using as dependencies in our projects, they can also declare that as a level of support. Is that right?</p>
<p>Rachel: Yeah, absolutely. I think that’s something that we’d love to see how a framework or whatever you could say, everything that is used by this framework is Baseline or is Baseline 24 or what have you. That’s going to give a lot of clarity to developers to not then need to fish around in the framework and find out what they’re doing to make sure 'cause if you’ve got to do a certain level of browser support in your project, you need to make sure that everything you use also has that level of browser support so that it could definitely make that a lot clearer.</p>
<p>Rachel: And I think also things like publishing articles. One of the things that frustrates people, and I know as someone who writes and edits a lot of content, is if people get halfway through an article and then they find something that is experimental or is so new or only works in Chrome or whatever, that’s really frustrating because you think, oh, I’ve found the thing that helps me solve my problem. You’re working through it and then you’re like, oh, that’s not coming 'til next year. And so have been able to put on an article, everything in this article is in Baseline. That gives you a lot of confidence to go forward. So I think theres lots of uses for this out in the community and that’s something we really hope will happen, that just to give that kind of clarity to developers.</p>
<p>Drew: It’s that last section of an article, isn’t it? You’re reading along about some interesting technology and then it comes to the section of how you might work around it for the browsers that don’t support it.</p>
<p>Rachel: Yeah.</p>
<p>Drew: I thought-</p>
<p>Rachel: Exactly.</p>
<p>Drew:span&gt; ... we were into a good thing here.</p>
<p>Rachel: Yeah, 'cause when you’re searching, you’re searching to solve a problem, things come up. It’s very frustrating if you realize that it’s a year away or other browsers have said we’re not doing that or whatever, you know? So yeah, I think theres a lot of opportunities for clarity for people who are writing and for developers of libraries and frameworks to actually just make it very obvious to developers what the status is.</p>
<p>Drew: And things like WordPress themes for example, or any of these sorts of things where you’re taking somebody elses code and making it part of your project to know that what level of support in terms of web functionality is in that is invaluable. I guess it would make sense for things like tools that any tool that gives you code to embed into your site, be that a Stripe checkout or a live chat widget or any of those sorts of things, I guess it would make sense for them to declare their state of compatibility too.</p>
<p>Rachel: Yeah, yeah, it’s just kind of a shorthand. It saves you having to do all of that investigating for each thing that you use. And we know that every website these days has tons and tons of third party stuff in it. We’re not all sitting down with Notepad anymore and carefully crafting our websites. So I think anything that makes that easier and allows people to show the status of things is really helpful.</p>
<p>Drew: It actually is a really simple concept, isn’t it, to say heres the set of features, they’re well supported, we’re giving it a label, we’re documenting it. It’s actually so simple, it’s really rather genius I think. It’s some amazing work that’s been done there by everyone involved.</p>
<p>Rachel: Yeah, I think it speaks to a lot of what I’ve thought about over many years in terms of that kind of clarity. And that’s always been my thing is making things clear to people, making things seem straightforward rather than trying to make things complex. And so I really love being able to be involved with this and bring it forward.</p>
<p>Drew: The HTML spec for example has a process for an element or an attribute to be deprecated. So things get removed from the spec as they become obsolete or they’re replaced by a newer specification. Is it possible for features to drop out of Baseline once they’ve been included?</p>
<p>Rachel: It could be possible. It’s one of the things we’ve talked about a lot. I think really the devil will definitely be in the detail with all this stuff. And that’s one of the things is well what happens if something essentially gets broken? Maybe one engine does something which causes a problem with something. There is a possibility that yes, we’d have to remove something. That’s definitely something we’ve talked about. I mean hopefully browsers aren’t going around breaking stable features, but it is a possibility or something might get deprecated although we tend not to fully remove things from the web platform very often. It’s more that we say, "Yeah, maybe don’t use this," but there is a possibility that something that is in Baseline could start to have a problem because of something that one of the engines does.</p>
<p>Drew: I guess then that’s one area where these sort of yearly cuts as you’ve described them, become sort of quite useful in that something might have appeared in Baseline 24 but then in Baseline 30 it might be gone and there is a way of having a distinction there.</p>
<p>Rachel: Yeah, and it would also highlight that stuff I think a lot more clearly than we have a way of doing at the moment because I think hard to know what things have actually been deprecated on the platform. A lot of things that are deprecated are things that are only in one engine and therefore would never have been in Baseline in the first place. But yeah, it is possible as things move forward that that would happen and it would make it clearer.</p>
<p>Drew: And such as the way of the web, we do deprecate things, but as you say, they don’t ever go away really.</p>
<p>Rachel: Yeah.</p>
<p>Drew: We don't-</p>
<p>Rachel: I was just saying maybe don’t use—</p>
<p>Drew:span&gt; ... tend to remove things, you know, can still use the, I’m guessing you can still use HTML font tags because we don’t break things once they’re standardized.</p>
<p>Rachel: Yeah.</p>
<p>Drew: Even though nobody would ever recommend using them, they’re still going to work in your browser because sites have been developed to that standard and the browser-</p>
<p>Rachel: Yeah.</p>
<p>Drew:span&gt; ... will continue to support it. I guess, in a way, theres Baseline forms a little bit of a positive pressure. If a feature does get broken, then the fact that it was in Baseline and the whole community is relying on it being there is a factor in prioritizing what gets worked on by that particular maintainer of that browser engine. They’re going to see that, no, this is important, we need to fix it pretty quick.</p>
<p>Rachel: Yeah.</p>
<p>Drew: So hopefully it’s a sort of positive pressure in that regard. There seems to be so much really in development and coming to the web platform. Are there any particular things that you’re really looking forward to seeing becoming interoperable in the coming months?</p>
<p>Rachel: Yeah, I mean theres a bunch of interesting stuff. I’ve always been interested in the things that look at things that developers are already doing. So they’re using JavaScript to do it, or what have you, and then having them built into the platform because obviously things that are built into the platform we can build in things like accessibility and also performance. Things that tend to perform an awful lot better if they’re a built-in feature as opposed to being JavaScript on top. So theres sort of interesting stuff from the open UI group. The next thing that is about to land in Chrome is the Popover API. And of course popovers are something like everybodys building all the time.</p>
<p>Drew: Yeah.</p>
<p>Rachel: And I think a lot of these open UI things are very much those sorts of features that pretty much every developer, every front end developer has built on numerous occasions. And every front end developer has tried to solve the accessibility issues and the performance issues and the sort of weird bugs that come up when they interact with other things. And so the fact that these are getting actually built into browsers, I think, is very exciting because it just, it’s a bunch of work you don’t have to do and it’s probably going to have better accessibility and so on than most people are going to be able to manage for themselves and it gives something to build on top of as well, you know, can add things to them.</p>
<p>Rachel: So yeah, so I’m excited to see Popover and in a similar sort of vein is the work on scroll-driven animations because that’s a thing that people like to do and is very hard to do well, you know, having things that animate on scroll and that, again, is something that is coming in. It should be in Chrome 115. So it’s, again, it’s these things that we’re doing on the front end of the web and we’re actually able then to build into the browser. I’m always very keen to see those 'cause I think they solve a lot of problems.</p>
<p>Drew: Yeah, definitely. I mean anywhere where a developer has to mimic something that you think is native browser UI and you’re trying to build it yourself, there are so many places to go wrong, aren’t there?</p>
<p>Rachel: Yeah.</p>
<p>Drew: If you’ve ever had any of your work through an accessibility audit, you know that it’s things like modal dialogues and all these sort of things that constantly will contain flaws that need to be addressed because theres just so many things to think about in terms of keyboard focus and clicking away and all these different subtleties that you need to make sure that you take care of, that is, as much as anything, as much as it being bad for accessibility, if you get it wrong, it’s a massive waste of time for all us developers doing this all ourselves over and over again when it just makes sense. Most apps will have some sort of modal or popover functionality. So yeah, it makes complete sense for it to be part of the platform implemented by the browser vendors in a way where it’s accessible and it’s just a good solid layer to then build on top of in terms of styling and yeah-</p>
<p>Rachel: Yeah.</p>
<p>Drew:span&gt; ... it makes total sense. It’s a exciting way to see the platform go.</p>
<p>Rachel: Yeah and I think, because the other thing with everyone building their own thing is that a lot of people don’t build their own thing, they rely on a third party thing and quite often things people are relying on are actually really old and they haven’t been updated to, they might have issues with accessibility or whatever and they haven’t really been updated for more modern browsers. And so it’s sort of, I think the more that people can use whats built into the browser, the sort of better experience that the end user of the site is likely to have.</p>
<p>Drew: So your team at Google maintains a bunch of resources to help developers keep up-to-date with the web platform. What are those resources and where should people go to look and find things? What would they expect to find there?</p>
<p>Rachel: Yeah, so we’ve got web.dev and developer.chrome.com are our two sites that DevRel own. It used to be, back in the day, when I sort of arrived, there was a real mixture of things on each site and a sort of thing that was commonly said was that Chrome were using web.dev to pretend things that were only in Chrome were stable APIs, lets say I don’t think anyone ever intended to pretend that. I think there was just a slightly disorganized content strategy. So as kind of part of the preparation for Baseline, because I wanted to make sure that we could be clear because if we’re talking about developer clarity, it’s pretty bad if all of our stuffs in a mess. I started moving content. And so now, certainly all the newer content, there may be some older stuff that we haven’t tracked down, but the newer content, if you go to web.dev, you should really be seeing stuff about stable APIs.</p>
<p>Rachel: So things that are interoperable and also things that are coming onto the platform. I do a sort of whats new on the web platform that includes some new stuff from all engines. So that kind of looking at what the broader landscape is and also things like our best practices. So things like about performance, which while some of the tooling is Chrome-only, raising the performance of your site, it is going to help in all engines. So that’s whats there on web.dev. So that’s kind of the practical side of things. You’re building a website, you want some advice. That’s what we’re doing there. And I try very hard to make that about the web, not about Chrome and that’s the sort of content there.</p>
<p>Rachel: But obviously we are a team that’s supporting Chrome and supporting the things that Chromes releasing and so we do that over on developer.chrome.com. So that’s going to be your new APIs. You want to find out about popover that’s landing, there’ll be an article about that soon. So all the things that Chrome is doing for the web, essentially you can find on developer.chrome.com. So that will be experimental things or Chrome-only things, things that are Chrome-only for now, all that stuff is there. And I hope that brings a bit of clarity to our content and that we’re not trying to pretend anything. We’re just trying to be clear about what we’re doing and how well supported it is.</p>
<p>Drew: Great. So we’ve been learning all about Web Platform Baseline. What have you been learning about lately, Rachel?</p>
<p>Rachel: Theres always something interesting to learn about. I’ve done a couple of things. I’ve been learning Python because it’s a language that I, for whatever reason, never learned. I’ve learned various languages over the years, but I do less web development these days and more kind of comparing of data sets and Python is the language that a lot of that stuff is done in. So it’s quite fun to learn new language anyway and it’s useful for the sort of stuff I tend to find myself doing these days.</p>
<p>Rachel: And I’ve also been thinking a bit about the whole generative AI space and in particular as a content lead, how do we prepare our content to make it more useful to those kind of models because theres a lot of stuff about asking questions of a chatbot and so on. And so I’ve been kind of just starting to read around that subject a little bit and start to see, well, if we’re preparing content, how can we be making that more useful for that kind of thing and that interaction?</p>
<p>Drew: If you, dear listener would like to hear more from Rachel, you can find her on the web at rachelandrew.co.uk where you’ll find links to her socials, her writing and numerous other projects. And you can find her writing regularly about the web platform at web.dev. Thanks for joining us today, Rachel. Did you have any parting words?</p>
<p>Rachel: Let us know about Baseline. Comment and raise some issues, or just join in the chat on the Web DX community group, on the GitHub repo there. We’d really like to hear what you think. This is, we’ve been talking about it internally for a long time and so now we’ve got it out there and I think the work starts now and the discussion with the community starts now. And so we’re all very, very excited to read the feedback and find out what you think.</p>
<h3>Resources</h3>
<ul>
<li><a href="https://web.dev/baseline/">Baseline</a>, web.dev</li>
<li><a href="https://web.dev/introducing-baseline/">Introducing Baseline</a> (+ video)</li>
<li>“<a href="https://web.dev/baseline-features/">Baseline features you can use today</a>,” Rachel Andrew</li>
<li>Google I/O developer keynote: <a href="https://www.youtube.com/live/r8T0SnwHRNI?feature=share&amp;t=2340">Launch of Baseline</a> (video)</li>
<li>“<a href="https://developer.mozilla.org/en-US/blog/baseline-unified-view-stable-web-features/">Introducing Baseline: A Unified View Of Stable Web features</a>,” Hermina Condei, MDN</li>
<li><a href="https://www.w3.org/community/webdx/">The WebDX Community Group</a></li>
<li><a href="https://github.com/web-platform-dx/feature-set"><code>feature-set</code>: Exploring the set of interoperable features of the web platform</a>, GitHub</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Drew McLellan)</author>
      <enclosure url="http://files.smashing.media/articles/smashing-podcast-episode-61/smashing-podcast-episode-61.png" length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Practical Design Tips And Guidelines For Beginner Designers]]></title>
      <link>https://smashingmagazine.com/2023/05/practical-design-tips-guidelines-beginner-designers/</link>
      <guid>https://smashingmagazine.com/2023/05/practical-design-tips-guidelines-beginner-designers/</guid>
      <pubDate>Mon, 22 May 2023 11:00:00 GMT</pubDate>
      <description><![CDATA[It’s easy for beginner designers to get overwhelmed and lose confidence when creating presentations, landing pages, app and web design mockups, and even cards. Laurent Baumann shares a few simple guidelines and practical tips to help you in such situations. ]]></description>
      <content:encoded><![CDATA[<p>As someone who has worked with beginner designers for decades, I have observed a certain common problem. They often get overwhelmed with design tasks such as creating presentations, a personal website, mocking up an app idea, or even making menus or cards. It’s not due to a lack of ability and skills but rather because of unfamiliarity with the rules and systems that graphic designers are trained to understand.</p>
<p>To fill this gap, I have compiled some simple principles that are quick and easy to learn yet can greatly enhance any design project. In this article, we’ll focus on the <em>four key elements</em> of good design. Here they are: </p>
<ol>
<li><a href="#structure">Structure</a>,</li>
<li><a href="#spacing">Spacing</a>, </li>
<li><a href="#rhythm">Rhythm</a>,</li>
<li><a href="#contrast">Contrast</a>.</li>
</ol>
<p>By learning these simple concepts, anyone should be able to create effective designs that not only look good but also cater to diverse audiences, including those with disabilities. Are you ready to learn the power of these fundamental design concepts? If yes, follow me along!</p>
Structure
<p>Structure helps people absorb information. You see the toolbar <em>before</em> you can discern any individual tool in it. You recognize a form <em>before</em> you can identify a specific field in it. The proper structure helps you access information faster. It’s the main menu, the selection screen, before you dive in.</p>
<p>Let’s review an example. Imagine you are making a registration page for a webinar. The webinar page should contain the following information:</p>
<ul>
<li>The event title,</li>
<li>A short synopsis,</li>
<li>The price of admission,</li>
<li>The time and date of the event,</li>
<li>The name of the host,</li>
<li>A photo of the host,</li>
<li>A short bio for the host,</li>
<li>Some social links for the host,</li>
<li>A register button,</li>
<li>A call-out: “Join me live!”.</li>
</ul>
<p>Ask yourself, if you had to group those things into several groups/buckets, what would those be? How would you name each group/bucket? Here are the groups I would make, and it might not be precisely how you would group the information, but that’s OK; the idea is to just give you a start!</p>
<table>
    <thead>
        <tr>
            <th>Headline</th>
            <th>Host</th>
      <th>Logistics</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Call-out</td>
            <td>Host name</td>
      <td>Event date</td>
        </tr>
        <tr>
            <td>Title</td>
            <td>Host photo</td>
      <td>Time &amp; duration</td>
        </tr>
        <tr>
            <td>Synopsis</td>
            <td>Host bio</td>
      <td>Price</td>
        </tr>
    <tr>
            <td></td>
            <td>Social links</td>
      <td>Register button</td>
        </tr>
    </tbody>
</table>

<p>Now that we have those buckets let’s continue: In what order do we want the audience to ingest them? My choice would be the headline first, then the logistics, with the big register button. I would keep the host information more as a detour, something optional to dive into if you would like to learn more.</p>
<p>Compare these two versions. Isn’t it easier to ingest the information in the one <em>on the right</em>?</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/1-invisible-grid.png" /></p>
<p>As you can see, the <strong>structure of the information greatly influences your ability to absorb it</strong>. I will go one step further. I believe beauty is an artifact of well-organized information. </p>
<p>In short, don’t try to make something beautiful. Try to make something well-organized, and watch the beauty emerge!</p>
<blockquote>“A well-designed, user-friendly information architecture ensures that users spend less time and effort searching for information and are successful in finding what they need. Key information-architecture tasks include identifying common features in content, forming groups of similar information objects, and linking documents to other documents on the same topic.”<br /><br />— Anastasia Stefanuk, “<a href="https://www.uxmatters.com/mt/archives/2020/05/the-importance-of-information-architecture-to-ux-design.php">The Importance of Information Architecture to UX Design</a>”</blockquote>

Spacing
<p>Spacing in graphic design refers to the arrangement of elements within a layout. Proper spacing can make your designs more visually appealing and easier for viewers to comprehend. It helps direct attention, creates hierarchy, and improves legibility.</p>
<p>Let’s look at another example. On the left, all the gaps are the same. On the right, the spacing is influenced by the structure. The inner group elements are more tightly grouped, creating a visible “scaffolding” for the content.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/2-spacing-hierarchy.png" /></p>
<p>In print, space is expensive because the paper is not free. This is why in the past, only “luxury magazines” could afford those beautiful margins and airy layouts. Nowadays, white space is virtually free. Luxury for everybody!</p>
<blockquote>"White space is the area between design elements. It is also the space within individual design elements, including the space between typography glyphs (readable characters). Despite its name, white space does not need to be white. It can be any color, texture, pattern, or even a background image. White space is a great tool to balance design elements and better organize content to improve the visual communication experience.”<br /><br />— Mads Soegaard, “<a href="https://www.interaction-design.org/literature/article/the-power-of-white-space">The Power of White Space in Design</a>“</blockquote>

<h3>The Space Must Flow</h3>
<p>Consistent spacing around elements gives visual harmony and unity to your work. It ensures a coherent look across all the components of your design. This is because irregular gaps draw the viewer’s attention away from the main focus, which is counterproductive. By maintaining even spacing between all objects, you allow the content to communicate without interference.</p>
<p>Here are some tips for creating a nice flowing space between and around elements.</p>
<h4>Centering In A Box</h4>
<p>Sometimes you need to put an image (like a logo, for example) inside a box. In this case, leave at least half its shortest dimension as a minimum margin. E.g., if the image is wide, use half its height as a minimum margin. If the image is tall, use half its width.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/3-image-in-a-box.png" /></p>
<h4>Vertically Centering Text</h4>
<p>Most of the text mass sits between the baseline and the top of the lowercase letters — squint your eyes slightly, and you will see what I mean. When vertically centering text, a good rule of thumb is to center the lowercase letters’ height. In the designer speech, it is called the “<a href="https://en.wikipedia.org/wiki/X-height">x-height</a>.” Some typefaces might need a tiny vertical adjustment, but we’re going for simple here.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/4-vertically-aligning-text.png" /></p>
<blockquote>“Why is it called ‘x’ height? Because the letter ‘x’  is the only letter in the alphabet that has all its terminals touch both the baseline and the meanline, with no extending points. Curved letters such as a, c, e, o, r, or s usually pass the font’s x-height slightly.”<br /><br />— Sirine Matta, “<a href="https://design.tutsplus.com/articles/what-are-cap-height-and-x-height-in-typography--cms-39749">What Are Cap Height and X Height in Typography?</a>”</blockquote>

<h4>Text In A Shape</h4>
<p>When centering text inside a box (like a button or a label), you need to use the height of the lowercase letters to do the centering and make sure there is the same amount of space all around the text, not just above and below.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/5-text-in-a-box.png" /></p>
<h4>Centering Polygons</h4>
<p>When centering a polygon, center the circle passing by each point instead of centering the box around the polygon. Once again, this will ensure the space around the shape is nice and uniform.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/6-centering-polygons.png" /></p>
<h4>Nested Rounded Boxes</h4>
<p>The rounded boxes are great. They don’t have sharp edges. They feel more human, more organic as if these digital shapes have been sanded down or eroded, like pebbles.</p>
<p>However, when putting a rounded box into another one, a mistake I have seen often is to use the <em>same border-radius</em> on the box outside and the box inside. If you do this, the band (represented here with a colored gradient) will not have a consistent width. Instead, you need to use <em>proportional radius</em> when doing such rounded box nesting.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/7-nested-rounded-boxes.png" /></p>
Rhythm
<p>Human eyes get bored quickly. To keep their interest, you need to give them something new to parse and explore at regular intervals. But you don’t want to make it too hard either, too “new” every time — just a gentle walk along an interesting variety of patterns.</p>
<p>Rhythm contributes to a smooth flow that engages and holds the viewer’s interest while communicating effectively. A visual rhythm also provides directional cues to guide readers through the content.</p>
<p>Well, if you think about it, your slide deck is the same thing, and so is your portfolio, your app onboarding flow, and so many other things. Create variety constrained by a simple set of rules. Start with just left and right, and maybe one day, try using thirds if you feel comfortable. It’s not hard, you’ll see!</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/8-layout-rhythm.png" /></p>
<blockquote>“Rhythm in art and design refers to a relationship between elements that creates a sense of harmony. Rhythm can be seen in patterns, in relationships between colors and shapes, and in repetitions of lines and forms. Rhythms help to guide the viewer’s eye around a piece rather than allowing the eye to settle on a particular focal point.”<br /><br />— “<a href="https://www.bbc.co.uk/bitesize/guides/zpht6fr/revision/1">Rhythm</a>,” part of the “Principles of Design” BBC series</blockquote>

<h3>Repetition Is Key To A Rhythm</h3>
<p>Repetition is key to a rhythm. Reusing elements such as colors, shapes, and text styles can create a sense of unity and coherence within your designs, making them feel more organized and visually appealing. It also makes your choices more intentional.</p>
<p>For example, I call a <em>book-end</em> any element that can be repeated to signal the beginning and the end of something. Shapes and colors are a great way to express creativity and bring some life to your content! It helps to tell your audience that a topic has ended in a nice and subtle way.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/9-book-ends.png" /></p>
<p>The repetition of certain visual elements creates patterns that catch our eye, engage our brains, and hold our interest, which can make any design feel more dynamic, expressive, and aesthetically pleasing. Find the guitar riff of your content; find the chorus!</p>
<p>Here is a meta example. These are the elements I reused throughout this article to create a sense of unity between all the illustrations. I had to pick some colors, decide on a style for the arrows, and make many more design choices. A bigger version of this is usually called a <a href="https://www.nngroup.com/articles/design-systems-101/"><strong>design system</strong></a>.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/10-design-system.png" /></p>
<h3>Reading Rhythm</h3>
<p>When you are feeding words into people’s retinas, you need to find the right compromise between the size of the text chunks and the effort required to move the eye to the next line. That sounds mechanical because it kind of is. Too long a line, and it is hard to locate the beginning of the next line. Too short a line, and your reading gets interrupted too often for an eye carriage return. </p>
<p>I usually find that between eight and twelve words per line are a good goal for the main text block. Just count the words in a couple of sentences — no need to be too strict. Also, keep in mind that it’s a good rule for English, but other languages might have different sweet spots. For a sidebar, a caption, or something narrower, you can aim for five to six words.</p>
<p>Try reading some text in the example. You will see how much easier it is for your eyes to follow when the lines are not too long!</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/11-words-per-line.png" /></p>
<p>Before going further, I’d like to quote Gary Provost, an American writer and writing instructor, whose words on rhythm are spot-on:</p>
<blockquote>“This sentence has five words. Here are five more words. Five-word sentences are fine. But several together become monotonous. Listen to what is happening. The writing is getting boring. The sound of it drones. It’s like a stuck record. The ear demands some variety. Now listen. I vary the sentence length, and I create music. Music. The writing sings. It has a pleasant rhythm, a lilt, a harmony. I use short sentences. And I use sentences of medium length. And sometimes, when I am certain the reader is rested, I will engage him with a sentence of considerable length, a sentence that burns with energy and builds with all the impetus of a crescendo, the roll of the drums, the crash of the cymbals–sounds that say listen to this, it is important.”<br /><br />— <a href="https://en.wikipedia.org/wiki/Gary_Provost">Gary Provost</a></blockquote>

<h3>Not So Justified</h3>
<p>Justified text appears aligned on both sides. This is a very desirable attribute, but it’s very hard for it to happen naturally. Editing and design tools all do a pretty bad job of creating justified text that looks good. Instead, you will need to fine-tune letter spacing, word spacing, use good hyphenation, and sometimes even rewrite your text. Your job is to avoid text gaps that will hurt the pace of reading.</p>
<p>So, unless you spend the time to do the work manually, I suggest that you use <em>left-aligned</em> text instead. The price to pay for this shiny right edge is not worth it!</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/12-justified-text.png" /></p>
Contrast
<p>Contrast refers to the use of differences (in color, size, shape, weight, direction, or texture) to attract attention, create hierarchy, enhance readability, and even evoke emotions like calm or energy. If a rhythm is the beat, contrast is the melody.</p>
<h3>Mind The Low Contrast</h3>
<p>To ensure your content is accessible to everybody, including people with visual impairments, text on a colored background should have enough contrast to be easily readable. There are plenty of apps or plugins that can calculate that for you (I’ve included a few references at the end of the article, check  <a href="#further-reading">Further Reading</a>). For now, all you really need to know is that a <a href="https://kb.iu.edu/d/atgh#ratios">contrast ratio of 4.5 or higher is recommended</a>.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/13-color-contrast-ratio.png" /></p>
<h3>Text Size Contrast</h3>
<p>Text size can be used as a very convenient tool for structuring information. A well-structured text can significantly lower the effort required for the viewer to ingest the information. The contrast between each heading level should be high enough for the structure to be visible. </p>
<p>If possible, a consistent ratio between different header levels usually looks more elegant. In general, the weight of the text (bold, regular, light) decreases as the level increases.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/14-text-size-contrast.png" /></p>
<h3>Text Weight Contrast</h3>
<p>Sometimes, the typeface you are using comes with many weights, like medium, semi-bold, light, and so on. In those cases, it’s usually recommended to skip <em>one weight</em> when pairing them to create enough contrast between them.</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/15-text-weight-contrast.png" /></p>
<h3>Avoid Unintentional Contrast</h3>
<p>Combining text with an icon can help comprehension, improve visual appeal, or increase the importance of an element. However, always <strong>make sure the thickness of the text matches the thickness of the icon</strong>. That will make it feel as if it were part of the typeface. It does look more elegant, but it also saves your audience from even thinking about it, which is a recurring theme in graphic design. <a href="https://www.mightyfinedesign.co/good-design-invisible/">Good design is invisible</a>!</p>
<p><img src="https://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/16-matching-thickness.png" /></p>
<blockquote>“Although we can’t help but notice poor design, good design is much harder to detect. We’d go even further:<em> good design is invisible</em>. This raises a logical question: what, then, is good design? Is it when form follows function? Is it the perfect arrangement of design elements on a modernist grid? Is it 24-point headings and 8-point body text? Is it a solid set of principles that you work to every time on every job? The answer might surprise you — good design is all of this. And none of it.”<br /><br />— Damien Stanyer, “<a href="https://thirstcreative.com.au/insights/why-is-good-design-invisible/">Why is good design invisible?</a>”</blockquote>

Conclusion
<p>That might have surprised you, but creating and iterating on designs isn’t about making things pretty. Your job as a designer is to <strong>lower the cognitive load</strong> for people to ingest the information, <strong>create a rhythm</strong> that keeps your viewer engaged, and make sure <strong>everybody can access</strong> the content.</p>
<blockquote>“The most important advice I would give to emerging designers — even those that have already won awards — is that<em> learning never stops</em>. You can always improve your craft, whether you’ve won one award or twenty. Remember, you’re never going to be an expert in everything. I have worked on so many things, from book design to exhibition design, hospitality, tech, and everything in between — and I’ve taken something new from the experience every time. Now I’m the executive creative director at a global agency, and I still find myself learning something new every day.”<br /><br />— Lisa Smith, “<a href="https://www.printmag.com/design-news/learning-never-stops-award-winning-creatives-share-the-secrets-to-success/">Learning Never Stops</a>”</blockquote> 

<p>Next time you are faced with the need to design something, I hope those tips will make you feel a little bit more confident and comfortable! And remember, everybody can be a designer, but every designer has a lot to learn and to <em>keep learning</em>. It’s a process that never stops.</p>
<h3>Further Reading</h3>
<p>I created a list of additional resources about the topics that I have tried to cover briefly so far. (And if you think this list is missing something of value, please do leave a comment at the end of the article. Thank you! 💖)</p>
<ul>
<li>“<a href="https://www.uxmatters.com/mt/archives/2020/05/the-importance-of-information-architecture-to-ux-design.php">The Importance of Information Architecture to UX Design</a>,” by Anastasia Stefanuk</li>
<li>“<a href="https://www.interaction-design.org/literature/article/the-power-of-white-space">The Power of White Space in Design</a>,” by Mads Soegaard</li>
<li>“<a href="https://en.wikipedia.org/wiki/X-height">X-height</a>,” Wikipedia</li>
<li>“<a href="https://design.tutsplus.com/articles/what-are-cap-height-and-x-height-in-typography--cms-39749">What Are Cap Height and X Height in Typography?</a>,” by Sirine Matta</li>
<li>“<a href="https://www.bbc.co.uk/bitesize/guides/zpht6fr/revision/1">Rhythm</a>,” part of the <em>Principles of Design</em> BBC series</li>
<li>“<a href="https://www.nngroup.com/articles/design-systems-101/">Design Systems 101</a>,” <em>Nielsen Norman Group</em> </li>
<li>“<a href="https://www.mightyfinedesign.co/good-design-invisible/">Good Design is Invisible: Understanding Design’s Impact</a>,” by John Hawley</li>
<li>“<a href="https://kb.iu.edu/d/atgh#ratios">Recommended contrast ratios</a>,” <em>University Information Technology Services (UITS)</em> </li>
<li>“<a href="https://webaim.org/articles/contrast/">Contrast and Color Accessibility</a>,” <em>WebAIM</em></li>
<li>“<a href="https://www.nngroup.com/articles/ten-usability-heuristics/">10 Usability Heuristics for User Interface Design</a>,” <em>Nielsen Norman Group</em> </li>
<li>“<a href="https://thirstcreative.com.au/insights/why-is-good-design-invisible/">Why is good design invisible?</a>,” by Damien Stanyer, <em>Thirst Creative</em></li>
<li>“<a href="https://www.learnui.design/tools/typography-tutorial.html">Learn the logic of great typography</a>,” an interactive tutorial on type, <em>Learn UI Design</em></li>
<li>“<a href="https://www.learnui.design/tools/accessible-color-generator.html">Accessible Color Generator</a>,” a free accessibility tool by <em>Learn UI Design</em></li>
<li>“<a href="https://typescale.com/">Type Scale</a>,” a beautiful design web app to make font scales</li>
<li>“<a href="https://leonardocolor.io/#">Color Tools for Design Systems</a>,” great color tools for text, data visualizations, and more</li>
<li>“<a href="https://www.printmag.com/design-news/learning-never-stops-award-winning-creatives-share-the-secrets-to-success/">Learning Never Stops</a>”<br />Award-winning creatives share the secrets to success, <em>PRINT magazine</em></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Laurent Baumann)</author>
      <enclosure url="http://files.smashing.media/articles/practical-design-tips-guidelines-beginner-designers/practical-design-tips-guidelines-beginner-designers.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[How To Deal With Big Tooling Upgrades In Large Organizations]]></title>
      <link>https://smashingmagazine.com/2023/05/big-tooling-upgrades-large-organizations/</link>
      <guid>https://smashingmagazine.com/2023/05/big-tooling-upgrades-large-organizations/</guid>
      <pubDate>Wed, 17 May 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[The process of upgrading large third-party packages in equally large organizations is rarely, if ever, as easy as running an npm update and calling it a day in this context. Joran Quinten shares valuable lessons from his team’s experiences in upgrading third-party code that affects codebases across the entire organization.]]></description>
      <content:encoded><![CDATA[<p>If you work in software development, you probably know a thing or two about using and maintaining third-party packages. While third-party tooling has its fair share of downsides, there are plenty of advantages as well. The efficiency you get from code that someone else has already written speeds up development and is hard to deny. Sure, there are all sorts of considerations to take in before plopping code from a third party — accessibility, technical debt, and security, to name a few — but the benefits may make taking on those considerations worthwhile for your team.</p>
<p>Upgrades are also part of that set of considerations. Usually, your team may treat this sort of maintenance as a simple task or chore: upgrading dependencies and (automatically) validating that all of the features keep functioning as expected. You probably even have automated checks for keeping all package versions up to date.</p>
<p>But what if the third-party tooling you adopt is big? I mean <em>big</em>, big. That’s common in large organizations. I happen to work for a fairly large organization that leverages big third-party resources, and <strong>upgrading those tools is never as simple as running a package update and moving on</strong>. I thought I’d share what’s involved in that process because there are many moving pieces that require ample planning, strategy, and coordination. Our team has learned a lot about the process that I hope will benefit you and your team as well.</p>
Some Context On My Organization
<p>I work for Jumbo Supermarkten in the Jumbo Tech Campus (JTC), which is a department of over 350 developers working in agile teams on a range of digital products that help facilitate our core grocery and e-commerce processes.</p>
<p>We have a variety of responsibilities, where 70% of the work is allocated to the primary objectives for each team, and the remaining 30% is dedicated to anything a team wants, as long as it is beneficial to the JTC, which is very useful if you want to deliver value outside of your own team.</p>
<p>When we look at maintaining tooling and packages, balancing the goals of each team with the goals of JTC means that teams effectively maintain their own codebases while also collectively maintaining internally shared codebases that serve as the tooling and foundation of our applications.</p>
Centralized Code As A Bottleneck
<p>To build our applications with consistent standards, we rely on an internal design system and the component library we call Kompas (Dutch for “Compass”). We have built this system ourselves and rely on <a href="https://vuejs.org">Vue</a> to render our components and build interactions. <strong>Kompas is a hard dependency for virtually all of our applications to ensure uniformity.</strong></p>
<p>This project was not allocated to a dedicated team. Instead, we adopted a strategy that introduced plenty of guidance to allow all front-end developers to contribute. Any developer can add new components to the library as well as features to existing components and keep everything in sync with the designs.</p>
<p>Teams normally work on business features since product owners love delivering customer value. The way we set up our process would allow a team to, in one sprint:</p>
<ul>
<li>Make the required change in Kompas,</li>
<li>Have it reviewed by peers from both inside and outside a particular team,</li>
<li>Publish the latest version of the component library, and</li>
<li>Use that version in that team’s own application to deliver to the end user.</li>
</ul>
<p>We can only do this with automation on repetitive processes — linting, formatting, quality assurance, testing, visual comparisons, and publishing — in order to provide enough room for developers to contribute to the process. Our component library is very much <strong>a living document of our design system</strong>, with multiple minor releases and patches a week. With <a href="https://semver.org">semantic versioning</a>, we can keep our own applications up to date easily and with confidence.</p>
<p>For bigger undertakings, such as setting up visual snapshot tests, we established temporary working groups alongside our existing teams that we called “front-end chapters” where members join on a voluntary basis. In these meetings, we discuss what needs to be done, and in the available 30% of free time we are allotted, the members of these teams carry out the work and report back to the chapter.</p>
<p>As you can imagine, we’ve spent a lot of time and effort ensuring the quality and making it a reliable part of our landscape.</p>
<p>This all began when Vue was in Version 2. That’s the version we baked into Kompas, which means we effectively forced our whole application landscape to follow suit. This worked perfectly for us; people could focus on their team’s needs while leaning on the support of the entire front-end chapter that works on Kompas.</p>
<p>Following the Vue ecosystem that we introduced, Vuex and Nuxt became part of our environment. And then <a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Vue 3</a> was announced, and it was a massive breaking change from Vue 2! With the announcement, the end-of-life date for Vue 2 was set for December 31, 2023. We still have some time as of this writing, but the news had a massive impact that cascaded throughout our organization.</p>
We Needed A Strategy
<p>We needed to upgrade Vue from 2 to 3. The first thing that we needed to figure out was when we could reasonably start the process. To assess and strategize, we formed a small virtual team of developers consisting of members from various teams so that multiple perspectives were represented.</p>
<p>We figured that there would be a period of time when we would need to support both versions in order to allow time for migrating between teams. It would be nearly impossible to orchestrate a monolithic release. Thus, we <strong>prefer gradual incrementing over massive sweeping changes</strong>. On the other hand, having to maintain two versions of Vue for, basically, the same business feature presented costs in time and complexity.</p>
<p>So, in order to execute this process as responsibly as possible, we set out to figure out <em>when</em> we could start, taking into account the longevity of maintaining two codebases while getting early experience from upgrading. We started to <strong>map the different tech stacks for each team</strong> and plotted out <strong>potential bottlenecks</strong> for the sake of making the process of our work as widely visible as possible. At this time, our organization had a very flat structure, so we also needed to get internal stakeholders (i.e., product owners, architects, and managers) involved and convey the effect this upgrade would have on teams across the board.</p>
Creating A Map
<p>With our starting point set, we move on to establish a direction. Not having a dedicated team did pose some challenges because it meant that we needed to align everybody in a democratic way. This is, in Dutch culture, also known as <em>polderen</em>:</p>
<blockquote>We try to find consensus in a way where everybody is equally happy, or unhappy, about the final direction.</blockquote>

<p>And this can be challenging in a department that consists of many cultures!</p>
<p>One thing we knew we could rely on was the published best practices from official Vue resources to guide our decision-making process. Referencing the documentation, we did notice opportunities for incremental upgrades. The release of <a href="https://blog.vuejs.org/posts/vue-2-7-naruto.html">Vue 2.7 (Naruto)</a> was really helpful in the sense that it backported features from Vue 3 back to a Vue 2-compatible version.</p>
<p>We also noted that in our landscape, not all applications were actually using Nuxt. A stable release of Nuxt 3 would be a prerequisite for those applications to even be considered for migration since the Vue major version is tightly coupled with the Nuxt major version. Luckily, some applications in our landscape are standalone Vue apps. These are ideal candidates for the first Vue 3-compatible components.</p>
<p>But first, we would need to have components that were compatible with Vue 3.</p>
The Big Divide
<p>By this point, we were confident enough to get to work. We had a plan and clear strategy, after all. The first order of business was to make sure that our component library was compatible with Vue 3, preferably while minimizing duplicative efforts.</p>
<p>We found a really nice way of doing this: </p>
<p>We created a new workspace called “Kompas-next” next to the regular components folder, which was scaffolded out using Vue 3. Then we imported the components from the original library. </p>
<p>This only works because:</p>
<ul>
<li>The backported features in Vue 2.7 allowed us to move closer toward the Vue 3 composition API (among other things).</li>
<li>The component syntax between Vue 2 and Vue 3 isn’t radically different anymore.</li>
<li><a href="https://github.com/vueuse/vue-demi">Vue Demi</a> allowed us to convert components, one by one, to be compatible with both versions.</li>
<li>We made sure that Kompas-next runs isolated tests to ensure stability.</li>
</ul>
<p>We did have to slightly modify each and every component to adapt to the new standards. We’ll get to that process in a minute.</p>
<p>That said, we were able to publish two versions of our component library: one that is compatible with Vue 2 (Kompas) and one that is compatible with Vue 3 (Kompas-next). This, in turn, meant that the teams that did not have Nuxt as a dependency could potentially start migrating!</p>
Getting Organized
<p>Up to this point, most of the groundwork had been done in a <em>relatively</em> small team. We were in charge of the investigations, communication, and alignment. But we still needed to get stuff done — a lot of stuff!</p>
<p>With every developer being able to contribute, we came to an agreement that fits with the way everybody was already contributing to the component library:</p>
<blockquote>If you touch a component that is not yet compatible, convert it to be compliant with both Vue 2 and Vue 3 using Vue-demi. Add the existing component with tests to the imports of the Kompas-next folder.</blockquote>

<p>Having communicated this strategy early in the process, we immediately saw the Kompas-next library growing. The Vue core team has put so much effort into closing the gap between the two versions, which made our lives much easier.</p>
Feedback From Early Adopters
<p>The teams that were not blocked by a Nuxt 3 release could spend their time migrating their complete app to Vue 3, providing feedback along the way on how we were setting up our packages and converting components.</p>
<p>Seeing the first applications using Vue 3 was a milestone we could all be proud of since we managed to reach it together, collaboratively, and with a united strategy. The strategy worked for us because it closely resembled the way we were already working.</p>
<p>There were indeed some components that were not migrated using this strategy, which indicated to us that they were stale in terms of development. We reasoned that “stale” equals “stable” and that it would be perfectly fine to migrate them by manual assignment and distribution since we can expect it to be close to a one-off migration per component.</p>
<p>We also started to add Vue 3-specific capabilities to our component library, such as our own <a href="https://vuejs.org/guide/reusability/composables.html">composables</a>. I think that’s a nice testament to the investment and adoption by our front-end chapter.</p>
<p>With the component library now supporting Vue, we cleared a significant migration hurdle in our organization. We enabled teams to start migrating to Vue 3, and we encouraged new applications to use the latest standards. As a result, we could start thinking about a deprecation path for our Vue 2 codebase. We were cautiously optimistic and aligned the end-of-life date for Kompas with the same date for Vue 2: December 31, 2023.</p>
<p>So, yes, we are not yet finished and still have work to do. In fact, we had…</p>
Two (Minor) Elephants In The Room
<p>To support communication between micro-applications that run on our e-commerce domain, we had resorted to using <a href="https://vuex.vuejs.org">Vuex</a> in the past. We used to register stores globally so other applications could dispatch actions and retrieve a shared state. This is now gradually being migrated in the sense that we are replacing Vuex with <a href="https://pinia.vuejs.org">Pinia</a> for internal state management.</p>
<p>For cross-app communication, we are in the process of decoupling Vuex as an external interface and promoting the use of custom events tied to a specific domain. This prevents us from locking ourselves out of future state management tooling.</p>
<p>We are also in the process of preparing our Nuxt applications to be cleared for migration as well. Within our e-commerce domain, we’ve been building specific modules that take a lot of overhead out of our hands: They handle tasks like setting meta headers, security, and analytics. These are being rewritten to use plugins rather than modules. The impact of this breaking change is smaller because it is limited to the teams that use these modules. We see that these teams are using a similar strategy, albeit on a smaller scale, to organize and structure the tasks at hand.</p>
Looking Back
<p>I believe we have a few key takeaways from how we upgraded (and continue to upgrade) from one version of a large third-party resource to another within our large network of teams and shared codebases. I believe the lessons we learned are relevant beyond Vue and can be applied to the processes of other large organizations migrating between versions of a core piece of architecture.</p>
<p>Let’s review what we learned:</p>
<ul>
<li><strong>Ensure the transition period is clear and as short as possible</strong>.</li>
<li><strong>Facilitate breaking the work down into small steps</strong> that progress iteratively and solicit feedback from those involved in the process as early and as often as possible.</li>
<li><strong>Onboard key stakeholders</strong> to make sure your team has ample time and resources to do the work.</li>
<li><strong>Define a strategy</strong> that fits with your organization’s culture.</li>
<li><strong>Foster a collaborative mindset</strong> and establish clear communication between teams.</li>
<li><strong>Celebrate wins</strong>, even the smallest ones!</li>
</ul>
The Work Is Never Done, Really
<p>As I mentioned earlier, <strong>maintenance is a never-ending piece of the software development process</strong>. As Vue creator Evan You stated in the <a href="https://www.youtube.com/watch?v=I5mGNB-4f0o">State of the Vuenion 2023</a>, Vue plans to ship more frequent updates and releases. This will keep impacting our work, but that’s okay. We have a plan and blueprint for future releases.</p>
<p>We’re not there yet, but we now know how to get there!</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/">How To Maintain A Large Next.js Application</a>, Nirmalya Ghosh</li>
<li><a href="https://www.smashingmagazine.com/2023/03/vue-case-study-migrating-headless-cms-system/">Moving From Vue 1 To Vue 2 To Vue 3: A Case Study Of Migrating A Headless CMS System</a>, Lisi Linhart</li>
<li><a href="https://www.smashingmagazine.com/2022/11/optimizing-vue-app/">Optimizing A Vue App</a>, Michelle Barker</li>
<li><a href="https://www.smashingmagazine.com/2019/02/web-app-maintenance/">Why Web Application Maintenance Should Be More Of A Thing</a>, Darren Beale</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Joran Quinten)</author>
      <enclosure url="http://files.smashing.media/articles/how-deal-big-tooling-upgrades-large-organizations/big-tooling-upgrades-large-organizations.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Design Patterns Are A Better Way To Collaborate On Your Design System]]></title>
      <link>https://smashingmagazine.com/2023/05/design-patterns-collaborate-design-system/</link>
      <guid>https://smashingmagazine.com/2023/05/design-patterns-collaborate-design-system/</guid>
      <pubDate>Tue, 16 May 2023 11:00:00 GMT</pubDate>
      <description><![CDATA[Every company and team has to have deep collaboration between engineering and design to get the value out of a design system (and not go nuts). Building design patterns first unblock people to work in parallel, keeps people synced up, and results in reusable modules that speed up your next project.]]></description>
      <content:encoded><![CDATA[<p>True collaboration to create or maintain a design system is really important to making superb product design, but working with other humans is always tricky. The collaborative nature of a design system can have a lot of pitfalls. In its best form, it is the product of close alignment between developers and designers, but it doesn’t always happen that way.</p>
<p>Some painful memories:</p>
<ul>
<li>A brilliant designer I worked with made a gorgeous new set of elements and examples for the company to use, but the other designers in the company ran into many situations where it was more expedient to just copy and remake (i.e., detach) the component. The design system was used less and less since contributing to it was always a lower priority than working on a product opportunity.</li>
<li>A developer I worked with built the design system components such that the padding in every text input, button, and so on always had to be the same in every layout, leading to awkward results when (for example) a button included double-byte characters, only icons, or just longer labels. </li>
<li>I did a lot of work on variations of nested components (button bar, toggle buttons, segmented controls) that were designed to use the same style properties as base components (like a button), but the developers I was working with made brand new components for each that didn’t. So, I had to document and specify the many, many identical sets of style values for many, many sets of slightly different components.</li>
</ul>
<p>The list goes on. I’m sure you have your own examples. </p>
Getting Aligned
<p>I’ve worked in many kinds of teams, in large companies and start-ups, where these collaboration issues kept getting in the way, even (or especially) with very talented and smart individual contributors. Getting aligned with my teammates doesn’t happen automatically or just because we go to lots of meetings. In fact, it’s very easy to start a project together and get pretty far into it before finding out we all had very different ideas about what we were doing. When it comes to complex questions of re-using an existing component vs. making something new or how to stay on the same page without blocking each other, alignment takes practice for any team. </p>
<p>The method for making design systems I’ll talk about probably works best in environments where you are a sole designer (or among a small number of designers) on a cross-functional team, including front-end or full-stack developers, led by a product owner. You might collaborate with other designers in other teams, but this is your “first team.” In this context, you have a lot of freedom but also a lot of responsibility. </p>
<p>You need an idea for nurturing the design system that doesn’t depend on organizational mandates or a specific “process” and one you can apply yourself. After all, a <strong>design system is a product with users</strong>, and we know how to balance the user’s needs with product opportunities, right? (Yes!)</p>
<p>The approach described below is not common or widely used, but in my experience, it has solved many team collaboration problems, including:</p>
<ul>
<li><strong>Eliminating the “hand-off” step</strong>: a truly perverse mini-waterfall built into many relationships between designers and developers.</li>
<li>Ensuring that <strong>all designers and developers contribute to the design system as a part of regular product work</strong>. </li>
<li><strong>Connecting design systems to product impact</strong>: measurably speeding things up by making more reusable elements and modules in design and development.</li>
</ul>
A New Use For An Old Idea
<p>What has worked for me in these kinds of teams is a twist on an old idea: design patterns. Elsewhere, design patterns are described as “a toolkit of solutions to common problems” (<a href="https://refactoring.guru/design-patterns">Refactoring.Guru</a>) or “description or template for how to solve a problem that can be used in many different situations” (<a href="https://sourcemaking.com/design_patterns">SourceMaking</a>). My favorite definition of the concept is from <a href="https://www.patternlanguage.com/bookstore/timeless-way-of-building.html"><em>The Timeless Way of Building</em></a>: </p>
<blockquote>“Even the most complicated, sophisticated things are defined by a small number of composable patterns.”<br /><br />— Christopher Alexander</blockquote>

<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/1-examples-design-patterns.png" /></p>
<p>You probably don’t think of your own design activities as a “pattern-making” practice, but the idea has a lot of very useful overlap with the practice of making a design system. The trick is to collaborate with your team to find the design patterns in your own product design, the parts that repeat in different variations that you can reuse. Once you find them, they are a powerful tool for making design systems work with a team. </p>
Design Patterns For Design Systems
<p>To see how, first, let’s get specific about the definition of “design pattern” in our product design context. Let’s call a “design element” a small isolated component like a “button,” “chip,” or “card,” and let’s describe a design pattern as a <strong>reusable combination of elements for a purpose</strong>, a larger module that can do some product experience work on its own.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/2-elements-mui-design-system.png" /></p>
<p>The elements are the focus of the design systems in most companies I have worked at, and creating them is important and a lot of work. I am sorry to say, however,</p>
<p>Having a good set of elements doesn’t help you get the value out of a design system, save you much time, or by itself ensure designers and engineers are aligned. </p>
<p>For this reason (and the availability of great existing elements from <a href="https://tailwindcss.com/">Tailwind</a>, <a href="https://bulma.io/">Bulma</a>, <a href="http://getskeleton.com/">Skeleton</a>, or of course, <a href="https://mui.com/">MUI</a>) I have de-emphasized them in my own work, often just restyling elements created by others. The elements are important, and you do need a set that everyone uses, but they don’t do the work of implementing a feature or valuable experience. </p>
<p>You might be thinking that many of these systems do come with combinations of elements, like the “pre-built components” that MUI ships with for a “Data Grid” or the “blueprints” in the Salesforce Lightning Web system for a “List Builder.” Are these the patterns that can help us?</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/3-datagrid-component.png" /></p>
<p>Unfortunately, they are not. These are patterns for sure, but they probably aren’t useful as-is for you. Your product has its own needs. You can use them as a starting point, but in my experience, it takes longer to rework them into something that solves the problem. </p>
<p>To be useful for you, a design pattern has to come out of and express some reusable part of <em>your</em> particular product experience — those parts of the design you find yourself making again and again. </p>
<p>Here are some examples of these useful, <strong>product-specific design patterns</strong> in products:</p>
<ul>
<li>A <strong>tile</strong> in a TV app, which people use to browse things to watch in lists. This is sort of a “card” pattern, but not really! Every streaming service has its own particular kind of tile and includes different content and controls that suit that product best.</li>
</ul>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/4-streaming-tv-service.jpg" /></p>
<ul>
<li>A <strong>dashboard meter</strong> in a data-visualization app like Google Analytics. Again, this is sort of a “panel” pattern, but not really! Each part of the dashboard might have different kinds of meters, with titles, category labels, “big numbers,” charts, text snippets, or filtering controls, and the number of elements in a meter varies by app.</li>
<li>A <strong>tree view</strong> in a social genealogy app that lets users see relationships between people in a way that adapts for display on small devices. Some products focus on researching your family, others on visualizing relationships.</li>
</ul>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/5-family-tree.jpg" /></p>
<p>In each of these cases, designers and developers made their own product-specific patterns. Those patterns are valuable because once a team has defined them, the next project that the team does gets easier. They develop and grow a kit of parts that save them time (and that they can polish and refine). The patterns, not the elements, are the heart of this (better) kind of design system. </p>
<p>Taking this a step further, I would say that a lesson from these patterns is that </p>
<p>All designers and developers can make their design system better and more effective by focusing on patterns first (instead of the elements), making sure that each is completely reusable and polished for any context in their product.</p>
<p>Pattern work can be a fully integrated part of both getting some immediate work done and maintaining a design system. </p>
Design Patterns For Collaboration
<p>This kind of design pattern activity can be a direct path for designers and developers to collaborate, to align the way things are designed with the way they are built, and vice-versa. For that purpose, a <strong>pattern does not have to be a polished design</strong>. It can be a rough outline or wireframe that designers and developers make together. It needs no special skills and can be started and iterated on by all. And collaborating on this form of a design pattern makes it possible for designers and developers to work in parallel.</p>
<p>That’s all pretty abstract. It’s easier just to try an example.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/6-wetrip-app-logo.jpg" /></p>
A Design Pattern Story
<p>Let’s say that we’re on a team together, working on an app called “WeTrip.”</p>
<p>The product opportunity comes from the reality we have all probably dealt with: when a group of people or a family travels together, they usually have a lot of trouble deciding what to do or where to eat. </p>
<p>This app makes group travel easier by giving people an easy way to propose and vote on the plan for each day. Instead of having to have long conversations that feature such sentences as “I dunno, what do you want to do?” travelers have a tool so people can have less trouble with the logistics of a vacation or a trip.</p>
<p>The app has some seed funding, but in order to survive needs some “minimum viable” version of itself to prove that it’s something needed and valuable. Everyone on the team wants to get going! Nobody wants to be waiting for a design.</p>
<p>The designers, engineers, and product people all meet and pick the names of some basic objects and their properties. They start with a “Person,” someone on the trip who votes on places to go together for a meal or sightseeing. They sketch things out on a whiteboard.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/7-person-pattern.png" /></p>
<p>This is their first pattern. </p>
<p>They move on, describing things like a “Place,” a location someone wants to visit. </p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/8-place-pattern.png" /></p>
<p>And an “Occasion” pattern, a time the group will do things together like eat, and so on.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/9-occasion-patern.png" /></p>
<p>The process can work with a physical whiteboard, shared document, collaboration app, or whatever. All that is important is that everyone participates so they are aligned and get the details they need to start work. </p>
<p>With this rough outline, they can see that some of the parts of these patterns are elements they can pull from existing design systems. </p>
<p>They decided to use some restyled MUI elements. Those have defined properties (named attributes of a component, like “color” or “content”) already and will be a nice shortcut. They pull them into Figma (their design tool of choice) and development (a React web app with the MUI library as a dependency). They add some of these MUI elements and their standard properties to each pattern.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/10-person-pattern-mui-design-system.png" /></p>
<p>For each pattern, they create a page in a shared Notion document that everyone can edit and update. They start by adding properties from the MUI elements they’ve chosen.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/11-example-shared-document-design-pattern.png" /></p>
<p>The team combines the properties from the MUI elements with others they’ve sketched out and flattens the properties a bit. They group the properties so that it’s clear what is most important and secondary.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/12-example-shared-document-design-pattern.png" /></p>
<p>The Figma component will have a different variant for each important property (like <code>activity</code> or <code>actionsAvalable</code>). And each of the element properties will become part of the component in development, of course. In this way, the design and development are aligned — not necessarily completely the same in every detail, but in the ways that matter, moving in the same direction. </p>
<p>The team talks about more ideas for each pattern. Adding properties doesn’t mean they <em>will</em> appear in the final design, just that an idea <em>could</em> be part of the experience, so it’s a low-stakes conversation where final decisions don’t need to be made.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/13-example-shared-document-design-pattern.png" /></p>
<p>After going through the same process for the “Place” and “Occasion” patterns, the designers and developers have a lot of what they need to make progress. They have agreed on the names of things and what the important properties are. The patterns are defined in a form that the whole team can see and edit, and they start work. </p>
<p>An engineer might stub out a “Person” component like the one below while a designer is sketching it out in Figma with no bottlenecks.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/14-person-component-typescript.png" /></p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/15-screenshot-person-component-figma.png" /></p>
<p>Of course, the engineers figure out that there are some properties they need that they missed at first, like a <code>presence</code> property for a user (after all, in order to know how to show a user notification, it helps to know if that user is using the app right now or a notification would be better). They add that to the document and message the rest of the team. </p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/16-design-pattern-presene-property.png" /></p>
<p>At the same time, the designers are fleshing out the patterns, using the MUI Figma library where possible, and adding new components where needed. When the team sees the addition of a <code>presence</code> property to the Person pattern, they decide to make a presence indicator and group it with the primary elements. As long as they are keeping the simple pattern document up to date, there is no handoff or waiting around. </p>
<p>Sometimes there are big questions to resolve about the experience. But that is the occasion for the next meeting about what the primary views in the app should be. </p>
<p>The team meets again and comes up with a “People” view (a list of people on the trip, with their status), a “Schedule” view (with a list of occasions and the plan for each day), and a “Proposals” view (to see and propose places to go)  — more design patterns. For this pattern documentation, one of the product owners wants to use a wireframing tool instead of an outline (as in the previous example). That’s fine. Pretty much anything works to describe patterns as long as it shows elements and groups (and it’s what a team likes using).</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/17-wireframe-people-list-view.jpg" /></p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/18-wireframe-proposals-list-view.jpg" /></p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/19-wireframe-my-trip-view.jpg" /></p>
<p>In these patterns, lists of Person, Occasion, and Place patterns are nested inside of each view. It becomes clear that there will have to be two versions of a Person pattern in the app, so the property is added to that pattern.</p>
<p>As they work, if an engineer gets a little ahead of whatever design work exists, they can either use standard MUI components or add a proposal to the patterns document. And designers can add new components if the design starts to need them. All parties are able to make changes without blocking each other.</p>
Organizational Needs
<p>Now, I should pause here to note that there are plenty of teams where this kind of pattern definition is not the primary product definition activity and where other stakeholders (engineering managers and so on) have a say in how the design system is built. Not all teams are small and have as much ownership. Even in larger companies, however, I believe design patterns can be very useful and help make a case for development work (since they show how the design system is helping teams get things done). But in those contexts, design patterns may be small parts of other organizational processes and not as important overall.</p>
<p>In this small team, the struggle to justify time on a design system is for a different reason: there’s a great temptation to put it off because everyone wants very badly to ship something sooner, and it feels “extra.” But every member of the team also knows that the minute they want to iterate on their product, that work will be easier if they have created a design system, and so they keep their good practice going.</p>
Putting It All Together
<p>Once the patterns are established as a way for the entire team to collaborate, final designs and views come together more quickly (because the entire team was able to start together and finish together). The visual design happens at the end rather than being a bottleneck before people can start work.</p>
<p><img src="https://files.smashing.media/articles/design-patterns-collaborate-design-system/20-finished-wetrip-app-mockup.jpg" /></p>
Integrating Patterns In Product Planning
<p>As working with patterns becomes more established and mature, <strong>patterns can be broken out into separate repositories and polished on their own</strong>, either as a separate library in Figma or a set of modules in development. If a team gets larger, there might even be an official owner for each pattern who handles bugs or polishes details. </p>
<p>Each pattern properties list can be turned into an API once a module is trustworthy to use in new design and development. In the WeTrip example, the scrolling list of places for today is reused in a search results view when it’s added later. </p>
<p>Since patterns are by their nature only the reusable parts that save designers and developers time, patterns can make working on the design system something with a hard-core product improvement impact. Re-use can be captured as a key metric and a factor in prioritization. The amount of reusable work being generated can be tracked automatically in design and development tools (much like <a href="https://www.smashingmagazine.com/2020/07/react-apps-testing-library/">test coverage</a>). </p>
<p>If the reuse of patterns becomes common enough that it needs careful management, patterns can become part of a <a href="https://webpack.js.org/concepts/module-federation/">federated module build process</a> (like what is built into WebPack 5). In short: patterns lend themselves very well to being part of the toolchain of many modern development processes.</p>
Your Turn
<p>I imagine that there are many teams that already practice some of these concepts in the collaboration between design and development, and I am very eager to hear about that! It has been a happy improvement as a method for myself and the people I have worked with, and I would love to hear your stories. </p>
<p>For others, I hope this has been a good introduction to a vision for you and your team of an alternate reality where you can seamlessly collaborate on design systems without as many pitfalls. I wish the best to you and your team as you find your way to such harmony and a happy design outcome!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Ben Clemens)</author>
      <enclosure url="http://files.smashing.media/articles/design-patterns-collaborate-design-system/design-patterns-collaborate-design-system.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Solving Media Object Float Issues With CSS Block Formatting Contexts]]></title>
      <link>https://smashingmagazine.com/2023/05/media-object-float-issues-css-block-formatting-contexts/</link>
      <guid>https://smashingmagazine.com/2023/05/media-object-float-issues-css-block-formatting-contexts/</guid>
      <pubDate>Mon, 15 May 2023 13:00:00 GMT</pubDate>
      <description><![CDATA[This article covers common problems using CSS floats and how to solve them using a block formatting context (BFC). Whether you are a beginner or an experienced web developer, you will learn valuable insights and practical solutions for dealing with CSS float issues.]]></description>
      <content:encoded><![CDATA[<p>Let’s imagine we’re making a small component. It can be anything, really, but let’s use a media object as an example. <a href="https://front-end.social/@stubbornella">Nicole Sullivan</a> had a solid <a href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/">definition of media objects</a> from way back in 2010, and you probably already know the pattern well: some form of media (often an image) on the left and text beside it on the right. The media could be an image or a video, for example.</p>
<p><img src="https://files.smashing.media/articles/media-object-float-issues-css-block-formatting-contexts/1-grid-testimonial-cards.png" /></p>
<p>This is the basic HTML for the layout, minimized for brevity:</p>
<div>
<pre><code>&lt;section class="container"&gt;
  &lt;article class="float-left"&gt;
    &lt;img src="<a href="https://picsum.photos/100&quot;">https://picsum.photos/100"</a>&gt;
      &lt;p&gt;I've never had to cook or clean since I discovered Xyz. They perform all my tasks for me. I recommend them.&lt;/p&gt;
      &lt;h3&gt;Dan Somore&lt;/h3&gt;
  &lt;/article&gt;

  &lt;!-- more articles --&gt;

&lt;/section&gt;
</code></pre>
</div>

<p>This HTML gives us a <code>&lt;section&gt;</code> element that is the container for four <code>&lt;article&gt;</code> elements, where each one is a testimonial container that holds an <code>&lt;img&gt;</code> and a <code>&lt;div&gt;</code> with a block of text — our media objects.</p>
<p>Let’s apply some light styling in CSS:</p>
<pre><code>/* Give the parent container breathing room */
.container {
  padding: 20px;
}

/* 
  Styles for each testimonial container 
  Each container is floated left
*/
.float-left {
  border: 2px solid blue;
  background-color: transparent;
  float: left;
  width: 45%;
  min-height: 150px;
  margin-bottom: 20px;
  margin-right: 20px;
}

/* Testimonial images are floated left */
img {
  float: left;
  margin-right: 10px;
}
</code></pre>

<p>This code is by no means perfect. In fact, it introduces the wrapping and overflow issues we’re about to discuss. We will look at these issues together before getting into solutions.</p>
<h3>Issue 1: Height Collapsing</h3>
<p>When an element is floated in its container, it exits its normal document flow and into a floated position, making no contributions to the container’s height. In a container of many floated media objects, the container element’s height is collapsed to contain only non-floated elements. The collapsed height might be inconspicuous in containers without a border or non-floated elements and could disrupt the layout of other elements after a media object container. However, this issue can be easily discovered if there is a non-floated element in the container, among other floated elements.</p>
<p>Let’s add a <code>border</code> to the parent container to see the height-collapsing effect.</p>
<p><img src="https://files.smashing.media/articles/media-object-float-issues-css-block-formatting-contexts/2-two-by-two-grid-cards.png" /></p>
<p>The height of the content is what influences the height of the testimonial container. If the image were in the container’s flow, it would be taller than the text, and the container would adjust to it. But, alas, that’s not the case since we introduced a block formatting context when floating the image.</p>
<p>The popular solution with a single line of CSS on the testimonial’s parent container:</p>
<pre><code>
.container {
  overflow: auto;
}
</code></pre>

<p>The BFC this generates establishes a new document flow within the page’s root element, containing all the container's child elements, including floated media objects. It effectively prevents the testimonial elements from being displaced beyond the parent container’s borders — no extra <code>div</code>s or pseudo-elements are needed like the clearfix approach.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/jOeMpJx">Float Solutions: overflow: auto [forked]</a> by <a href="https://codepen.io/geoffgraham">Geoff Graham</a>.</p>
<p>That certainly gets the job done! But I want to show you <em>one more way</em> to do this because I believe it’s the best of the bunch.</p>
<h3>The Best Solution: <code>display: flow-root</code></h3>
<p><code>display: flow-root</code> was introduced to address inconsistencies associated with using <code>overflow</code> for generating BFCs. In fact, <code>display: flow-root</code> was explicitly designed to produce  BFC, while the <code>overflow</code> property is designed to manage content that surpasses its container. Consequently, <code>overflow</code> can induce unintended side effects, from unwanted scrollbars to <a href="https://www.smashingmagazine.com/2019/09/overflow-data-loss-css/">data loss</a>.</p>
<p>That’s why I recommend using <code>display: flow-root</code>. It is meant to create a BFC when you need it, whereas the other solutions are more like workarounds.</p>
Conclusion
<p>CSS block formatting contexts are great because they allow you to leave the main document flow, allowing elements to interact differently in a layout. But, of course, those different interactions can feel like buggy behavior if you’re unaware that you’re actually working in a different formatting context.</p>
<p>This is exactly why we have modern layout techniques like Flexbox and Grid. Before we had them, floats were a nice trick for faking columns. But the BFC they created wasn’t so nice. Hence clever workarounds like the clearfix to create a BFC to wrangle the other BFC.</p>
<p>Perhaps the bigger takeaway from all this, though, is to <strong>evaluate your layout strategy</strong>. If you’re reaching for a float, is it really the best option for what you’re trying to do? Because if so, you may as well embrace the natural text-wrapping behavior rather than trying to fight it. And if you don’t want to fight it, that’s a sure sign you ought to reach for a more modern layout technique, like Flexbox or Grid.</p>
<h3>Resources</h3>
<ul>
<li><a href="https://www.manning.com/books/css-in-depth"><em>CSS in Depth</em></a>, Keith J. Grant</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">Block formatting context</a> (Mozilla Developer Network)</li>
</ul>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2017/07/enhancing-css-layout-floats-flexbox-grid/">Progressively Enhancing CSS Layout: From Floats To Flexbox To Grid</a>”, Manuel Matuzović</li>
<li>“<a href="https://www.smashingmagazine.com/2021/04/css-overflow-issues/">Overflow Issues In CSS</a>”, Ahmad Shadeed</li>
<li>“<a href="https://www.smashingmagazine.com/2019/10/editorial-design-patterns-css-grid-subgrid-naming/">Editorial Design Patterns With CSS Grid And Named Columns</a>”, Rachel Andrew</li>
<li>“<a href="https://www.smashingmagazine.com/2022/10/futuristic-css/">Futuristic CSS</a>”, Sacha Greif</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Gabriel Shoyombo)</author>
      <enclosure url="http://files.smashing.media/articles/media-object-float-issues-css-block-formatting-contexts/media-object-float-issues-css-block-formatting-contexts.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Designing Sticky Menus: UX Guidelines]]></title>
      <link>https://smashingmagazine.com/2023/05/sticky-menus-ux-guidelines/</link>
      <guid>https://smashingmagazine.com/2023/05/sticky-menus-ux-guidelines/</guid>
      <pubDate>Fri, 12 May 2023 11:00:00 GMT</pubDate>
      <description><![CDATA[Are sticky headers always a good idea? Best practices for designing sticky headers, with examples, UX guidelines and usability considerations.]]></description>
      <content:encoded><![CDATA[<p>We often rely on <strong>sticky headers</strong> to point user’s attention to critical features or calls to action. Think of sidebar navigation, CTAs, sticky headers and footers, “fixed” rows or columns in tables, and floating buttons. We’ve already looked into mobile navigation patterns in <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a>, but sticky menus deserve a closer look.</p>
<p>As users scroll, a sticky menu always stays in sight. And typically, it’s considered to be a good feature, especially if the menus are frequently used and especially if we want to <a href="https://www.smashingmagazine.com/2012/09/sticky-menus-are-quicker-to-navigate/">speed up navigation</a>.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/1-sticky-menus-sverigesradio-tv-gids.png" /></p>
<p>However, sticky menus also come with a few disadvantages. In his recent article on <a href="https://adamsilver.io/blog/the-problem-with-sticky-menus-and-what-to-do-instead/">Sticky Menus Are Problematic, And What To Do Instead</a>, Adam Silver argues about some common usability issues of sticky menus — and how to solve them. Let’s take a closer look.</p>
When Sticky Menus Are Useful
<p>How do we decide if a menu should be sticky or not? This depends on the <strong>primary job</strong> of a page. If it’s designed to primarily convey information and we don’t expect a lot of navigation, then sticky menus aren’t very helpful.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/2-sticky-bar-france-tv.png" /></p>
<p>However, if we expect users to navigate between different views on a page a lot and stay on the page while doing so — as it often is on long landing pages, <strong>product pages, and filters</strong> — then having access to navigation, A-Z or tabs <a href="https://www.nngroup.com/articles/sticky-headers/">can be very helpful</a>.</p>
<p>Also, when users <strong>compare features in a data table</strong>, sticky headers help them verify that they always look at the right piece of data. That’s where sticky headers or columns can help and aid understanding. That’s why sticky bars are so frequently used <strong>in eCommerce</strong>, and in my experience, they improve the discoverability of content and speed of interaction.</p>
Keep Sticky Headers Small, But Large Enough To Avoid Rage Taps
<p>The downside of sticky menus is that they typically make it more difficult for users to explore the page as <strong>they obscure content</strong>. Full-width bars on mobile and desktop are common, but they need to be compact, especially on narrow screens. And they need to accommodate for <a href="https://smart-interface-design-patterns.com/articles/accessible-tap-target-sizes/">accessible tap sizes</a> to prevent rage taps and rage clicks.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/3-sticky-bar-navigation-postal-service.png" /></p>
<p>Typically, that means we <strong>can’t have more than five items</strong> in the sticky bar navigation. The choice of the items displayed in the sticky menu should be informed by the most important tasks that users need to perform on the website. If you have more than five items, you probably might need to look into some sort of an overflow menu, as displayed by <a href="https://www.samsung.com/us/tvs/neoqled-tv/picture-quality-sound/">Samsung</a>.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/4-sticky-overflow-menu-samsung.png" /></p>
<p>Whenever users have to deal with forms on a page on mobile, consider replacing sticky menus with accordions. Virtual keyboards typically take <strong>up to 60% of the screen</strong>, and with a sticky bar in view, filling in a form quickly becomes nothing short of impossible.</p>
Accessibility Issues of Sticky Menus
<p>By their nature, sticky menus always live on top of the content and often <strong>cause accessibility issues</strong>. They break when users zoom in. They often block the content for keyboard users who tab through the content. They obscure links and other focusable elements. And there is often not <strong>enough contrast</strong> between the menu and the content area.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/5-sticky-sub-menu-navigation-accessibility-issues.png" /></p>
<p>Whenever we implement a sticky menu, we need to make sure that focusable elements are still visible with a sticky menu in action. And this also goes for internal page anchors that need to account for the sticky bar with the <strong>scroll-padding</strong> property in CSS.</p>
Avoid Multiple Scrollbars Of Long Sticky Menus
<p>When sticky menus become lengthy, the last items on the list <strong>become difficult to access</strong>. We could make them visible with some sort of an <strong>overflow</strong> menu, but often they appear as scrollable panes, causing multiple scroll bars.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/6-sticky-sidebar-navigation-australian-bureau-statistics.png" /></p>
<p>Not only does this behavior cause <strong>discoverability issues</strong>, but it’s also often a cause for mistakes and repetitive actions on a page. Ideally, we would prevent it by keeping the number of items short, but often it’s not possible or can’t be managed properly.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/7-accordion-menu-smashing-magazine.png" /></p>
<p>A way out is to <strong>show the menu as an accordion instead</strong> in situations when the space is limited, especially on mobile devices. That’s what we do at Smashing Magazine in the checkout, with a button that reveals and hides the contents of the cart when needed.</p>
Partially Persistent Menus
<p>Because sticky menus often take up too much space, we could <strong>reveal them when needed</strong> and hide them when a user is focused on the content. That’s the idea behind partially persistent headers: as a user starts scrolling down, the menu disappears, but then any scrolling up prompts the menu to appear again.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/8-partially-persistent-menu.png" /></p>
<p>The issue with this pattern is that sometimes users just want to jump back to a previous section of the page or double-check some details in a previous paragraph, and the menu often gets in the way. Page Laubheimer from NN/Group recommends using a <strong>slide-in animation</strong> that <a href="https://www.nngroup.com/articles/sticky-headers/">is roughly 300–400ms long</a> and will preserve the natural feel without being distracting.</p>
Alternatives To Sticky Menus
<p>In some situations, we might not need a sticky menu after all. We can avoid their downsides with <strong>shorter pages</strong>, or lengthy pages which repeat relevant calls-to-actions or navigation <em>within</em> the page.</p>
<p><img src="https://files.smashing.media/articles/sticky-menus-ux-guidelines/9-tables-of-contents.png" /></p>
<p>We could display a <strong>table of contents</strong> on the top of the page and bring the user’s attention to the table of contents with a back-to-top link at the bottom of the page.</p>
Wrapping Up
<p>Whenever the job of the page is to help users act, save, and compare, or we expect users to rely on navigation a lot, we might consider displaying sticky navigation. They are most harmful when there isn’t enough space anyway, as it often is with forms on mobile devices.</p>
<p>Sticky menus do come at a cost, as we need to account for usability and accessibility issues, especially for <strong>zooming, keyboard navigation, and anchor jumps</strong>. Add them if you need them, but be careful in plugging them in by default.</p>
<p>We need to prioritize what matters and remove what doesn’t. And too often, the focus should lie entirely on content and not navigation.</p>
<p>You can find more details on <strong>navigation UX</strong> in the <a href="https://smart-interface-design-patterns.com"><strong>video library on Smart Interface Design Patterns</strong></a> 🍣 — with a <strong>live UX training</strong> that’s coming up in September this year.</p><p></p>
<h3>Further Resources</h3>
<p>Of course, the techniques listed above barely scratch the surface. Here are wonderful articles around sticky headers, from design considerations to technical implementations:</p>
<ul>
<li>“<a href="https://adamsilver.io/blog/the-problem-with-sticky-menus-and-what-to-do-instead/">The Problem With Sticky Menus, And What To Do Instead</a>”, by <a href="https://www.linkedin.com/in/adambsilver?miniProfileUrn=urn%3Ali%3Afs_miniProfile%3AACoAAAKPgv4BhBlcQZzpi3QD2sssbjghdYhQI1o">Adam Silver</a>,</li>
<li>“<a href="https://www.nngroup.com/articles/sticky-headers/">Sticky Headers: 5 Ways To Make Them Better</a>”, by Page Laubheimer,</li>
<li>“<a href="https://uxdesign.cc/porting-long-scroll-content-to-a-small-screen-a-different-approach-to-sticky-in-page-navigation-ca94f15262fe">A Different Approach To Sticky In-page Navigation</a>”, by Corey Snyder.</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure url="http://files.smashing.media/articles/sticky-menus-ux-guidelines/sticky-menus-ux-guidelines.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[How To Boost Your Design Workflow With Setapp]]></title>
      <link>https://smashingmagazine.com/2023/05/boost-design-workflow-setapp/</link>
      <guid>https://smashingmagazine.com/2023/05/boost-design-workflow-setapp/</guid>
      <pubDate>Thu, 11 May 2023 14:00:00 GMT</pubDate>
      <description><![CDATA[In this guide, we’ll explore efficient tools to save time and speed up your workflow. Focus on what you do best &mdash; designing high-quality work, and let these tools handle the rest!]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://setapp.com/de?utm_campaign=banner&amp;utm_medium=article&amp;utm_source=smashing">Setapp</a></p>
<p>As someone who wears multiple hats, it is challenging to balance a full-time job, freelance projects, and all sorts of creative endeavors.</p>
<p>This is how I started off: By day, I’m a full-time product designer. By night, I juggle all sorts of freelance work and creative projects.</p>
<p>I am currently self-employed. However, there are challenges that come with being my own boss: Working with clients, sales and negotiation, invoicing, building a personal brand, crafting a content strategy, time tracking, project management… The list goes on.</p>
<p>Trying to keep up with everything used to be tough. No matter how hard I tried, my to-do list always seemed never-ending. I was constantly feeling overwhelmed.</p>
<p>I thought to myself, “There’s got to be a better way.”</p>
<p>After analyzing my workflow, I realized that many tasks could be simplified or automated so that I could save time, focus on high-value tasks, and work fewer hours.</p>
<p>After years of trial and error, I discovered a range of tools and strategies that helped me save time and stay organized to focus on what <em>really</em> matters.</p>
<p>The apps mentioned in this guide are available on <a href="https://setapp.com/?utm_source=smashing&amp;utm_medium=article">Setapp</a>. Whether you’re a Mac user or not, these hacks will help you get more done in less time and improve your quality of life. I hope you find value in this guide.</p>
Streamline Your Workflow With the Best Apps
<p>You can use <strong>Setapp</strong> to access 240+ apps on your Mac and iPhone under a single monthly subscription.</p>
<p>Personally, I use Setapp to do <strong>three things</strong>:</p>
<ol>
<li>Try out apps that could help save time. Some of these apps cost more than Setapp’s subscription, so it’s a relief that I do not need to pay for each one individually.</li>
<li>For apps that I only need to use occasionally, I can quickly install and uninstall them as needed, with no extra cost. This saves me precious space on my Mac and ensures that I’m not cluttering up my system with unnecessary apps.</li>
<li>Since Setapp’s library is updated regularly, I always get to try out new apps to further enhance my workflow.</li>
</ol>
Track Time &amp; Eliminate Distractions
<p>As a freelance designer, I need to track how much time I spend on each project to calculate my billable hours. I used to manually create events on my calendar and calculate the hours spent on each project. It’s a waste of time, and sadly, it is inaccurate.</p>
<p>To solve this problem, you can use <a href="https://setapp.com/apps/timemator">Timemator</a> to track your time accurately and minimize distractions.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/1-timemator-interface.jpg" /></p>
<p>With Timemator, you can set up auto time-tracking rules for specific apps, files, or websites. For example, you can set rules so that the timer starts tracking when you work on a specific project on Figma or Adobe Photoshop.</p>
<p>The timer runs quietly in the background so that you can stay focused without any interruptions. You no longer need to manually start or pause the timer.</p>
<p><strong>Pro tip:</strong> <em>Use it to reduce distractions! Set up auto-tracking to track how much time you spend on meetings, talking to teammates or clients on Slack, or watching Netflix.</em></p>
<p>To help you identify where you’ve spent your time, Timemator gives detailed reports and analytics so you can reduce or eliminate time-wasting activities and get more done in less time.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/2-timemator-reports.png" /></p>
The Only Font Manager You Need
<p>As designers, we all know that font selection can make or break a creative project.</p>
<p>I was frustrated with Font Book (the default font manager on MacOS). It wasn’t user-friendly. Searching and comparing fonts was a chore.</p>
<p>I found <a href="https://setapp.com/apps/typeface">Typeface</a> to be useful — especially when you need to quickly browse through your font collection, customize the preview text and size <strong>in real-time</strong>, and compare to see how different fonts look side-by-side.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/3-typeface-fonts.png" /></p>
<p>Over the years, I have saved up a huge font library. Typeface is able to load all my fonts quickly and <strong>remove duplicate fonts</strong> that bloat up my computer. It supports variable fonts and OpenType font features and has robust features for the busy designer.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/4-typaface-remove-duplicate-fonts.png" /></p>
<p>For fonts you don’t use often, you can choose to <strong>activate them only when necessary</strong>. This way, your computer stays clean and fast.</p>
<p>As a bonus, you can also easily organize fonts into custom collections or tags.</p>
Fastest Way To Create Device Mockups
<p>When designing, we often need to create high-quality, professional-looking phone, tablet, and computer mockups to showcase our designs.</p>
<p>I used to spend hours searching for device mockup templates and launch Adobe Photoshop in order to use those templates. The whole process was time-consuming, so I switched to a tool called <a href="https://setapp.com/apps/mockuuups-studio">Mockuuups Studio</a>.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/5-mockuuups-studio.png" /></p>
<p>All you need to do is drag and drop a screenshot of your website or app into it, pick a scene, and it will generate thousands of mockups. It’s pretty neat.</p>
<p>You can filter through scenes, models, and devices to find the perfect mockup for your digital product. Then, add hands, overlays, realistic shadows, or backgrounds to your device mockups. In the example above, I have filtered ‘iPhone’ mockups only.</p>
<p>Since it’s cloud-based, you can access it anywhere and collaborate with your teammates in real time too.</p>
<p>To further speed up your workflow, you can use their Figma, Sketch, or Adobe XD plugin. This is their Figma plugin:</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/6-mockuuups-studio-figma-plugin.png" /></p>
Create Screenshots &amp; Screen Recordings, Fast
<p>When presenting designs (especially when working remotely), I take screenshots and screen recordings for my clients every day.</p>
<p>But instead of using the default Mac screenshot tool, <a href="https://setapp.com/apps/cleanshot">CleanShot X</a> is a better solution. This is an essential tool for every Mac user.</p>
<p>To quickly take a screenshot, use this shortcut key on your Mac: Command + Shift + 4.</p>
<p>This tool gives you the convenience to record MP4 or GIF with your desktop icons hidden, capture scrollable content, and annotate, highlight, or blur screenshots to hide sensitive personal information.</p>
<p>An example of how I annotate my screenshots:</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/7-cleanshotx.png" /></p>
<p>I’ve used this tool for years with zero complaints. This tool will make your life easier when sharing screenshots with clients or on social media.</p>
<p>A cool feature you’ll also love: You can capture and copy any text, so you’ll never have to manually retype it again!</p>
<p>Your workflow will become much more streamlined and efficient since you no longer get bogged down in the technical details.</p>
Never Waste Time Searching For Meeting Links Again
<p>It’s challenging to keep track of various meetings, their details, and attendees, especially when switching between Google Meet, Zoom, your email inbox, and calendars.</p>
<p>To solve this problem, you can use <a href="https://setapp.com/apps/meeter">Meeter</a> to schedule or join meetings with one click right from the menu bar on your Mac.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/8-meeter.png" /></p>
<p>It supports Google Meet, Zoom, and Microsoft Teams. When you want to join a meeting, you no longer have to waste time searching for meeting links, then copy and paste the link into the browser. Instead, you can now focus on being present in every meeting.</p>
<p>The tool allows you to directly call your FaceTime contacts and phone numbers and jump into recurring calls from the menu bar too. Pretty simple!</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/9-meeter-calls.png" /></p>
Save Time With Spotlight On Mac
<p>When working with multiple files and apps on your Mac, you need to be able to quickly find and access them instead of navigating through different folders.</p>
<p>With <a href="https://support.apple.com/guide/mac-help/search-with-spotlight-mchlp1008/mac">Spotlight</a>, you can do these things quickly. While this is not an app, it’s one of the most powerful features on Mac that can save you plenty of time.</p>
<p>To open Spotlight, simply hit Command + Spacebar on your keyboard and start typing.</p>
<p>Then, try these on Spotlight:</p>
<ul>
<li><strong>Perform quick calculations.</strong><br />No need to open a calculator app. Simply type in your calculation in Spotlight and hit enter. It’s that easy.</li>
<li><strong>Search for apps.</strong><br />Quickly find any app on your Mac.</li>
<li><strong>Search the internet.</strong><br />Type your search term, and it will launch your default browser with the search results. You’ve just saved a few clicks.</li>
<li><strong>Find files or folders.</strong><br />Type in the name of the file or folder, and you have it.</li>
</ul>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/10-spotlight-find-files-folders.png" /></p>
<ul>
<li><strong>Check the weather.</strong><br />Type “weather” followed by your location, and it will give you up-to-date information on the current weather conditions and forecast.</li>
</ul>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/11-spotlight-weather.png" /></p>
<p>Cool, right? Learning how to use Spotlight effectively is a game-changer. Give it a try, and see how much time you can save.</p>
Design Accessible Interfaces
<p>As a product designer who also builds websites for clients, it’s a challenge to find and create the perfect color palettes while working on multiple projects at once. In the past, I've had to rely on a combination of tools like swatch libraries and notes to keep track of my palettes.</p>
<p>If you’re a designer or a developer, you’ll love <a href="https://setapp.com/apps/sip">Sip</a> — a powerful color picker that can help you design beautiful and accessible interfaces easily.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/12-setapp-sip-color-picker.png" /></p>
<p>With Sip, you can quickly grab colors right from the Mac menu bar and drop them into any design or development tool, including Adobe Photoshop, Figma, and Sketch. This makes it easy to create custom color palettes that match the client’s brand.</p>
<p>You can create and save custom color palettes, and the quick access menu that floats on the side of your desktop gives you quick access to your color palettes.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/13-setapp-sip-color-palette.png" /></p>
<p>Currently, it supports 24 of the most popular color formats in the industry, like Android XML, CSS hex, RGB, and CMYK.</p>
<p>Now, my favorite feature is Sip’s Contrast Checker. In the example below, you can use the color picker to check the contrast between the gray text and white background, ensuring that it meets accessibility standards and is legible for all users.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/14-setapp-sip-contrast-checker-tool.png" /></p>
<p><strong>Tip</strong>: <em>Always make sure the contrast between the text and background is greater than or equal to <a href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html">4.5:1 for small text and 3:1 for large text</a>. If the color contrast fails, click on the ‘FIX’ button to improve it!</em></p>
Declutter Your Mac’s Menu Bar
<p>If you have a bunch of apps running on your Mac, your menu bar may be cluttered with all sorts of icons and notifications.</p>
<p>Just like physical clutter, digital clutter takes up mental space and affects your focus, too! To solve this problem, you can use <a href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html">Bartender</a>.</p>
<p>Bartender allows you to organize your menu bar icons into neat and tidy groups or hide them completely — as simple as that. You can collapse your menu bar icons into a customizable dropdown menu so it remains clutter-free.</p>
<p><img src="https://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/15-setapp-bartender.png" /></p>
<p>In the above example, most of my menu icons are hidden, except Figma and the battery level indicator.</p>
<p>After using it for over a month, I am able to focus better. It’s one of those subtle quality-of-life improvements that can have a big impact on your productivity and mindset.</p>
Wrapping Up
<p>I wish I had discovered these tools sooner!</p>
<p>The apps I’ve shared above are available on <strong>Setapp</strong>. With a single monthly subscription, you get access to 240+ Mac and iPhone apps. They offer a <a href="https://setapp.com/?utm_source=smashing&amp;utm_medium=article"><strong>free 7-day trial</strong></a>, so you can try it out and decide if it’s right for you.</p>
<p>These tools have completely transformed my workflow and helped me become more productive and less stressed. I hope that these tools will do the same for you so you can make the most of your time. After all, time is a limited resource, and it's up to us to use it wisely.</p>
<p>Thank you for reading. Have a productive day!</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2023/01/top-frontend-tools-2022/">Top Front-End Tools Of 2022</a>, Louis Lazaris</li>
<li><a href="https://www.smashingmagazine.com/2022/12/optimizing-design-workflow-tools/">Boosting Productivity For Designers With Efficient Tools</a>, Ashish Bogawat</li>
<li><a href="https://www.smashingmagazine.com/2022/07/overcoming-imposter-syndrome-developing-guiding-principles/">Overcoming Imposter Syndrome By Developing Your Own Guiding Principles</a>, Luis Ouriach</li>
<li><a href="https://www.smashingmagazine.com/2022/04/productivity-tips-tools/">Productivity Tips And Tools For A More Efficient Workflow</a>, Cosima Mielke</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Rachel How)</author>
      <enclosure url="http://files.smashing.media/articles/boost-design-workflow-time-saving-tools-setapp/boost-design-workflow-setapp.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[A Guide To Redux Toolkit With TypeScript]]></title>
      <link>https://smashingmagazine.com/2023/05/guide-redux-toolkit-typescript/</link>
      <guid>https://smashingmagazine.com/2023/05/guide-redux-toolkit-typescript/</guid>
      <pubDate>Wed, 10 May 2023 10:00:00 GMT</pubDate>
      <description><![CDATA[The Redux Toolkit documentation calls the library a better way to write Redux logic for React apps and a simple and efficient toolkit for Redux development. In this article, you will learn about the Redux toolkit by building an app that tracks project issues.]]></description>
      <content:encoded><![CDATA[<p>If you are a React developer working on a complex application, you will need to use global state management for your app at some point. <a href="https://react-redux.js.org/">React Redux</a> is one of the most popular libraries for state management used by many developers. However, React Redux has a complex setup process that I’ve found inefficient, not to mention it requires a lot of boilerplate code. The official developer of Redux developed the <a href="https://redux-toolkit.js.org/introduction/getting-started">Redux Toolkit</a> to simplify the process.</p>
<p>This article is for those with enough knowledge of React and TypeScript to work with Redux.</p>
About Redux
<p>Redux is the global state management library for React applications. If you have used <code>useState()</code> hooks for managing your app state, you will find it hard to access the state when you need it in the other parts of the application. With <code>useState()</code> hooks, the state can be passed from the parent component to the child, and you will be stuck with the problem of <a href="https://kentcdodds.com/blog/prop-drilling">prop drilling</a> if you need to pass it to multiple children. That’s where Redux comes in to manage the application state.</p>
Introducing Redux Toolkit
<p>Redux Toolkit is a set of opinionated and standardised tools that simplify application development using the Redux state management library.</p>
<p>The primary benefit of using Redux Toolkit is that it removes the overhead of writing a lot of boilerplates like you’d have to do with plain Redux.</p>
<p>It eliminates the need to write standard Redux setup code, such as defining actions, reducers, and store configuration, which can be a significant amount of code to write and maintain.</p>
<p>Jerry Navi has a <a href="https://www.smashingmagazine.com/2020/08/redux-real-world-application/">great tutorial that shows the full Redux setup process</a>.</p>
Why I Prefer Redux Toolkit Over Redux
<p>The Redux Toolkit has several key features which make me use this library over plain Redux:</p>
<ol>
<li><strong>Defining reducers</strong><br />With Redux Toolkit, you can specify a slice with a few lines of code to define a reducer instead of defining actions and reducers separately, like Redux.</li>
<li><strong>Immutability helpers</strong><br />Redux Toolkit includes a set of utility functions that make it easy to update objects and arrays in an immutable way. This makes writing code that follows the Redux principles of immutability simpler.</li>
<li><strong>Built-in middleware</strong><br />Redux Toolkit includes built-in middleware that can handle asynchronous request tasks.</li>
<li><strong>DevTools integration</strong><br />Redux Toolkit includes integration with the Redux DevTools browser extension, which makes it easier to debug and analyse Redux code.</li>
</ol>
Using Redux Toolkit To Build A Project Issue Tracker
<p>I think the best way to explain the value and benefits of using Redux Toolkit is simply to show them to you in a real-world context. So, let’s develop an app with it that is designed to create and track GitHub issues.</p>
<p><img src="https://files.smashing.media/articles/guide-redux-toolkit-typescript/project-issue-tracker.jpg" /></p>
<p>You can follow along with the code examples as we go and <a href="https://github.com/smashingmagazine/project_issue_tracker/blob/master/src/components/ProjectCard.tsx">reference the full code anytime by grabbing it from GitHub</a>. There is also a <a href="https://master--relaxed-lamington-5fba83.netlify.app/">live deployment of this example</a> that you can check out.</p>
<p>Start creating a new React app with the following command:</p>
<pre><code>yarn create react-app project_issue_tracker --template typescript
</code></pre>

<p>This generates a folder for our project with the basic files we need for development. The <code>–template typescript</code> part of the command is used to add TypeScript to the stack.</p>
<p>Now, let’s install the dependencies packages required for our project and build the primary UI for the application before we implement Redux Toolkit. First, navigate to the <code>project_issue_tracker</code> project folder we just created:</p>
<pre><code>cd project_issue_tracker
</code></pre>

<p>Then run the following command to install <a href="https://mui.com/material-ui/">Material UI</a> and <a href="https://emotion.sh/docs/introduction">Emotion</a>, where the former is a design library we can use to style components, and the latter enables writing CSS in JavaScript files.</p>
<pre><code>yarn add @mui/material @emotion/react @emotion/styled
</code></pre>

<p>Now we can install Redix Toolkit and Redux itself:</p>
<pre><code>yarn add @reduxjs/toolkit react-redux
</code></pre>

<p>We have everything we need to start developing! We can start by building the user interface.</p>
Developing The User Interface
<p>In this section, we will be developing the UI of the app. Open the main project folder and create a new <code>components</code> subfolder directly in the root. Inside this new folder, create a new file called <code>ProjectCard.tsx</code>. This is where we will write the code for a <code>ProjectCard</code> component that contains information about an open issue in the project issue tracker.</p>
<p>Let’s import some design elements from the Material UI package we installed to the new <code>/components/ProjectCard.tsx</code> file to get us started:</p>
<div>
<pre><code>import React from "react";
import { Typography, Grid, Stack, Paper} from "@mui/material";
interface IProps {
    issueTitle: string
}
const ProjectCard : React.FC&lt;IProps&gt; = ({ issueTitle }) =&gt; {
    return(
        &lt;div className="project_card"&gt;
            &lt;Paper elevation={1} sx={{p: '10px', m:'1rem'}}&gt;
                &lt;Grid container spacing={2}&gt;
                    &lt;Grid item xs={12} md={6}&gt;
                        &lt;Stack spacing={2}&gt;
                            &lt;Typography variant="h6" sx={{fontWeight: 'bold'}}&gt;
                                Issue Title: {issueTitle}
                            &lt;/Typography&gt;
                            &lt;Stack direction='row' spacing={2}&gt;
                                &lt;Typography variant="body1"&gt;
                                    Opened: yesterday
                                &lt;/Typography&gt;
                                &lt;Typography variant="body1"&gt;
                                    Priority: medium
                                &lt;/Typography&gt;
                            &lt;/Stack&gt;
                        &lt;/Stack&gt;
                    &lt;/Grid&gt;
                &lt;/Grid&gt;
            &lt;/Paper&gt;
        &lt;/div&gt;
    )
}
export default ProjectCard;
</code></pre>
</div>

<p>This creates the project card that displays an issue title, issue priority level, and the time the issue was “opened.” Notice that we are using an <code>issueTitle</code> prop that will be passed to the <code>ProjectCard</code> component to render the issue with a provided title.</p>
<p>Now, let’s create the component for the app’s <code>HomePage</code> to display all the issues. We’ll add a small form to the page for submitting new issues that contain a text field for entering the issue name and a button to submit the form. We can do that by opening up the <code>src/HomePage.tsx</code> file in the project folder and importing React’s <code>useState</code> hook, a few more styled elements from Material UI, and the <code>ProjectCard</code> component we set up earlier:</p>
<div>
<pre><code>import React, { useState } from "react";
import { Box, Typography, TextField, Stack, Button } from "@mui/material";
import ProjectCard from "./components/ProjectCard";
const HomePage = () =&gt; {
    const [textInput, setTextInput] = useState('');
    const handleTextInputChange = (e:any) =&gt; {
        setTextInput(e.target.value);
    };
    return(
        &lt;div className="home_page"&gt;
            &lt;Box sx={{ml: '5rem', mr: '5rem'}}&gt;
                &lt;Typography variant="h4" sx={{textAlign: 'center'}}&gt;
                    Project Issue Tracker
                &lt;/Typography&gt;
                &lt;Box sx={{display: 'flex'}}&gt;
                    &lt;Stack spacing={2}&gt;
                        &lt;Typography variant="h5"&gt;
                            Add new issue
                        &lt;/Typography&gt;
                        &lt;TextField 
                        id="outlined-basic" 
                        label="Title" 
                        variant="outlined" 
                        onChange={handleTextInputChange}
                        value={textInput}
                        /&gt;
                        &lt;Button variant="contained"&gt;Submit&lt;/Button&gt;
                    &lt;/Stack&gt;
                &lt;/Box&gt;
                &lt;Box sx={{ml: '1rem', mt: '3rem'}}&gt;
                    &lt;Typography variant="h5" &gt;
                        Opened issue
                    &lt;/Typography&gt;
                        &lt;ProjectCard issueTitle="Bug: Issue 1" /&gt;
                        &lt;ProjectCard issueTitle="Bug: Issue 2" /&gt;
                &lt;/Box&gt;
            &lt;/Box&gt;
        &lt;/div&gt;
    )
}
export default HomePage;
</code></pre>
</div>

<p>This results in a new <code>HomePage</code> component that a user can interact with to add new issues by entering an issue name in a form text input. When the issue is submitted, a new <code>ProjectCard</code> component is added to the <code>HomePage</code>, which acts as an index for viewing all open issues.</p>
<p>The only thing left for the interface is to render the <code>HomePage</code>, which we can do by adding it to the <code>App.tsx</code> file. <a href="https://github.com/smashingmagazine/project_issue_tracker/blob/master/src/App.tsx">The full code is available here on GitHub.</a></p>
Using Redux Toolkit
<p>Now that our UI is finalised, we can move on to implementing Redux Toolkit to manage the state of this app. We will use Redux Toolkit to manage the state of the <code>ProjectCard</code> list by <a href="https://redux-toolkit.js.org/tutorials/quick-start#create-a-redux-store">storing all the issues in a store</a> that can be accessed from anywhere in the application.</p>
<p>Before we move to the actual implementation, let’s understand a few Redux Toolkit concepts to help understand what we’re implementing:</p>
<ol>
<li><a href="https://redux-toolkit.js.org/usage/usage-with-typescript#createslice"><code>createSlice</code></a><br />This function makes it easy to define the reducer, actions, and the <code>initialState</code> under one object. Unlike the plain redux, you don’t need to use a switch for actions and need to define the actions separately. This function accepts an object as a name (i.e., the name of the slice) and the initial state of the store and the reducer, where you define all the reducers along with their action types.</li>
<li><a href="https://redux-toolkit.js.org/usage/usage-with-typescript#configurestore"><code>configureStore</code></a><br />This function is an abstraction for the Redux <code>createStore()</code> function. It removes the dependency of defining reducers separately and creating a store again. This way, the store is configured automatically and can be passed to the <a href="https://redux-toolkit.js.org/tutorials/rtk-query/#wrap-your-application-with-the-provider"><code>Provider</code></a>.</li>
<li><a href="https://redux-toolkit.js.org/usage/usage-with-typescript#createasyncthunk"><code>createAsyncThunk</code></a><br />This function simplifies making asynchronous calls. It automatically dispatches many different actions for managing the state of the calls and provides a standardised way to handle errors.</li>
</ol>
<p>Let’s implement all of this! We will create the <code>issueReducer</code> with an <code>addIssue()</code> action that adds any new submitted issue to the <code>projectIssues</code> store. This can be done by creating a new file in <code>src/redux/</code> called <code>IssueReducer.ts</code> with this code:</p>
<div>
<pre><code>// Part 1
import { createSlice, PayloadAction } from "@reduxjs/toolkit"

// Part 2
export interface IssueInitialState {
    projectIssues: string[]
}
const initialState: IssueInitialState = {
    projectIssues: []
}

// Part 3
export const issueSlice = createSlice({
    name: 'issue',
    initialState,
    reducers: {
        addIssue: (state, action: PayloadAction&lt;string&gt;) =&gt; {
            state.projectIssues = [...state.projectIssues, action.payload]
        }
    }
})

// Part 4
export const { addIssue } = issueSlice.actions
export default issueSlice.reducer
</code></pre>
</div>

<p>Let’s understand each part of the code. First, we are importing the necessary functions from the Redux <code>@reduxjs/toolkit</code> package.</p>
<p>Then, we create the type definition of our initial state and initialise the <code>initialState</code> for the <code>issueReducer</code>. The <code>initialState</code> has a <code>projectIssues[]</code> list that will be used to store all the submitted issues. We can have as many properties defined in the <code>initialState</code> as we need for the application.</p>
<p>Thirdly, we are defining the <code>issueSlice</code> using Redux Toolkit’s <code>createSlice</code> function, which has the logic of the <code>issueReducer</code> as well as the different actions associated with it. <code>createSlice</code> accepts an object with a few properties, including:</p>
<ul>
<li><code>name</code>: the name of the slice,</li>
<li><code>initialState</code>: the initial state of the reducer function,</li>
<li><code>reducers</code>: an object that accepts different actions we want to define for our reducer.</li>
</ul>
<p>The slice name for the <code>issueReducer</code> is <code>issueSlice</code>. The <code>initalState</code> of it is defined, and a single <code>adIssue</code> action is associated with it. The <code>addIssue</code> action is dispatched whenever a new issue is submitted. We can have other actions defined, too, if the app requires it, but this is all we need for this example.</p>
<p>Finally, in the last part of the code, we export the actions associated with our reducer and the <code>issueSlice</code> reducer. We have fully implemented our <code>issueReducer</code>, which stores all the submitted issues by dispatching the <code>addIssue</code> action.</p>
<p>Now let’s configure the <code>issueReducer</code> in our store so we can use it in the app. Create a new file in <code>src/redux/</code> called <code>index.ts</code>, and add the following code:</p>
<pre><code>import { configureStore } from "@reduxjs/toolkit";
import IssueReducer from "./IssueReducer";
export const store = configureStore({
    reducer: {
        issue: IssueReducer
    }
})
export type RootState = ReturnType&lt;typeof store.getState&gt;
export type AppDispatch = typeof store.dispatch
</code></pre>

<p>This code configures and creates the store using the <code>configureStore()</code> function that accepts a reducer where we can pass all of the different reducers.</p>
<p>We are done adding the reducer and configuring the store with Redux Toolkit. Let’s do the final step of passing the store to our app. Start by updating the <code>App.tsx</code> file to pass the store using the <code>Provider</code>:</p>
<pre><code>import React from 'react';
import { Provider } from "react-redux"
import { store } from './redux';
import HomePage from './HomePage';
function App() {
    return (
        &lt;div className="App"&gt;
            &lt;Provider store={store}&gt;
                &lt;HomePage /&gt;
            &lt;/Provider&gt;
        &lt;/div&gt;
     );
}
export default App;
</code></pre>

<p>Here, you can see that we are importing the store and directly passing through the <code>Provider</code>. We don’t need to write anything extra to create a store or configure DevTools like we would using plain Redux. This is definitely one of the ways Redux Toolkit streamlines things.</p>
<p>OK, we have successfully set up a store and a reducer for our app with Redux Toolkit. Let’s use our app now and see if it works. To quickly sum things up, the <code>dispatch()</code> function is used to dispatch any actions to the store, and <code>useSelector()</code> is used for accessing any state properties.</p>
<p>We will dispatch the <code>addIssue</code> action when the form button is clicked:</p>
<pre><code>const handleClick = () =&gt; {
    dispatch(addIssue(textInput))
}
</code></pre>

<p>To access the <code>projectIssue</code> list stored in our reducer store, we can make use of <code>useSelector()</code> like this:</p>
<pre><code>const issueList = useSelector((state: RootState) =&gt; state.issue.projectIssues)
</code></pre>

<p>Finally, we can render all the issues by <code>map()</code>-ping the <code>issueList</code> to the <code>ProjectCard</code> component:</p>
<pre><code>{
    issueList.map((issue) =&gt; {
        return(
            &lt;ProjectCard issueTitle={issue} /&gt;
        )
    })
}
</code></pre>

<p>The final code for <code>HomePage.tsx</code> looks like this:</p>
<div>
<pre><code>import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "./redux/index"
import { Box, Typography, TextField, Stack, Button } from "@mui/material";
import ProjectCard from "./components/ProjectCard";
import { addIssue } from "./redux/IssueReducer";
const HomePage = () =&gt; {
    const dispatch = useDispatch();
    const issueList = useSelector((state: RootState) =&gt; state.issue.projectIssues)
    const [textInput, setTextInput] = useState('');
    const handleTextInputChange = (e:any) =&gt; {
        setTextInput(e.target.value);
    };
    const handleClick = () =&gt; {
        dispatch(addIssue(textInput))
    }
    return(
        &lt;div className="home_page"&gt;
            &lt;Box sx={{ml: '5rem', mr: '5rem'}}&gt;
                &lt;Typography variant="h4" sx={{textAlign: 'center'}}&gt;
                    Project Issue Tracker
                &lt;/Typography&gt;
                &lt;Box sx={{display: 'flex'}}&gt;
                    &lt;Stack spacing={2}&gt;
                        &lt;Typography variant="h5"&gt;
                            Add new issue
                        &lt;/Typography&gt;
                        &lt;TextField 
                        id="outlined-basic" 
                        label="Title" 
                        variant="outlined" 
                        onChange={handleTextInputChange}
                        value={textInput}
                        /&gt;
                        &lt;Button variant="contained" onClick={handleClick}&gt;Submit&lt;/Button&gt;
                    &lt;/Stack&gt;
                &lt;/Box&gt;
                &lt;Box sx={{ml: '1rem', mt: '3rem'}}&gt;
                    &lt;Typography variant="h5" &gt;
                        Opened issue
                    &lt;/Typography&gt;
                    {
                        issueList.map((issue) =&gt; {
                            return(
                                &lt;ProjectCard issueTitle={issue} /&gt;
                            )
                        })
                    }
                &lt;/Box&gt;
            &lt;/Box&gt;
        &lt;/div&gt;
    )
}
export default HomePage;
</code></pre>
</div>

<p>Now, when we add and submit an issue using the form, that issue will be rendered on the homepage.</p>
<p>This section covered how to define any reducer and how they’re used in the app. The following section will cover how Redux Toolkit makes asynchronous calls a relatively simple task.</p>
Making Asynchronous Calls With Redux Toolkit
<p>We implemented our store to save and render any newly added issue to our app. What if we want to call GitHub API for any repository and list all the issues of it in our app? In this section, we will see how to use the <code>createAsyncThunk()</code> API with the slice to get data and render all the repository issues using an API call.</p>
<p>I always prefer to use the <code>createAsyncThunk()</code> API of the redux toolkit because it <strong>standardises the way different states are handled</strong>, such as <code>loading</code>, <code>error</code>, and <code>fulfilled</code>. Another reason is that we <strong>don’t need to add extra configurations for the middleware</strong>.</p>
<p>Let’s add the code for creating a <code>GithubIssue</code> reducer first before we break it down to understand what’s happening. Add a new <code>GithubIssueReducer.ts</code> file in the <code>/redux</code> folder and add this code: </p>
<div>
<pre><code>import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
export const fetchIssues = createAsyncThunk&lt;string[], void, { rejectValue: string }&gt;(
  "githubIssue/fetchIssues",
  async (_, thunkAPI) =&gt; {
    try {
      const response = await fetch("<a href="https://api.github.com/repos/github/hub/issues&quot;)">https://api.github.com/repos/github/hub/issues")</a>;
      const data = await response.json();
      const issues = data.map((issue: { title: string }) =&gt; issue.title);
      return issues;
    } catch (error) {
      return thunkAPI.rejectWithValue("Failed to fetch issues.");
    }
  }
);
interface IssuesState {
  issues: string[];
  loading: boolean;
  error: string | null;
}
const initialState: IssuesState = {
  issues: [],
  loading: false,
  error: null,
};
export const issuesSliceGithub = createSlice({
  name: 'github_issues',
  initialState,
  reducers: {},
  extraReducers: (builder) =&gt; {
    builder
      .addCase(fetchIssues.pending, (state) =&gt; {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchIssues.fulfilled, (state, action) =&gt; {
        state.loading = false;
        state.issues = action.payload;
      })
      .addCase(fetchIssues.rejected, (state, action) =&gt; {
        state.loading = false;
        state.error = action.error.message || 'Something went wrong';
      });
  },
});
export default issuesSliceGithub.reducer;
</code></pre>
</div>

<p>Let’s understand the <code>fetchIssues</code> part first:</p>
<ol>
<li>We are using the <code>createAsyncThunk()</code> API provided by the Redux Toolkit. It helps create asynchronous actions and handles the app’s loading and error states.</li>
<li>The action type name is the first argument passed to <code>createAsyncThunk()</code>. The specific action type name we have defined is <code>githubIssue/fetchIssues</code>.</li>
<li>The second argument is a function that returns a <code>Promise</code>, which resolves to the value that dispatches the action. This is when the asynchronous function fetches data from a GitHub API endpoint and maps the response data to a list of issue titles.</li>
<li>The third argument is an object that contains configuration options for the async thunk. In this case, we have specified that the async thunk will not be dispatched with any arguments (hence the <code>void</code> type) and that if the <code>Promise</code> returned by the async function is rejected, the async thunk will return an action with a rejected status along with a <code>rejectValue</code> property that contains the string “Failed to fetch issues.”</li>
</ol>
<p>When this action is dispatched, the API calls will be made, and the <code>githubIssuesList</code> data will be stored. We can follow this exact same sequence of steps to make any API calls we need.</p>
<p>The second section of the code is similar to what we used when we created the <code>issueSlice</code>, but with three differences:</p>
<ol>
<li><code>extraReducers</code><br />This object contains the reducers logic for the reducers not defined in the <code>createSlice</code> reducers object. It takes a builder object where different cases can be added using <code>addCase</code> for specific action types.</li>
<li><code>addCase</code><br />This method on the builder object creates a new case for the reducer function.</li>
<li><strong>API call states</strong><br />The callback function passed to the <code>addCase</code> method is dispatched by <code>createAsyncThunk()</code>, which updates the different store objects based on the API call states (<code>pending</code>, <code>fulfilled</code>, and <code>error</code>).</li>
</ol>
<p>We can now use the <code>GithubIssue</code> reducer actions and the store in our app. Let’s add the <code>GithubIssueReducer</code> to our store first. Update the <code>/redux/index.ts</code> file with this code:</p>
<pre><code>
import { configureStore } from "@reduxjs/toolkit";
import { useDispatch } from "react-redux";
import IssueReducer from "./IssueReducer";
import GithubIssueReducer from "./GithubIssueReducer";
export const store = configureStore({
    reducer: {
        issue: IssueReducer,
        githubIssue: GithubIssueReducer
    }
})
export type RootState = ReturnType&lt;typeof store.getState&gt;
export type AppDispatch = typeof store.dispatch
export const useAppDispatch = () =&gt; useDispatch&lt;AppDispatch&gt;()
</code></pre>

<p>We just added the <code>GithubIssueReducer</code> to our store with the name mapped to <code>githubIssue</code>. We can now use this reducer in our <code>HomePage</code> component to dispatch the <code>fetchIssues()</code> and populate our page with all the issues received from the GitHub API repo.</p>
<div>
<pre><code>import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useAppDispatch, RootState, AppDispatch } from "./redux/index";
import { Box, Typography, TextField, Stack, Button } from "@mui/material";
import ProjectCard from "./components/ProjectCard";
import { addIssue } from "./redux/IssueReducer";
import { fetchIssues } from "./redux/GithubIssueReducer";
const HomePage = () =&gt; {
    const dispatch: AppDispatch = useAppDispatch();
    const [textInput, setTextInput] = useState('');
    const githubIssueList = useSelector((state: RootState) =&gt; state.githubIssue.issues)
    const loading = useSelector((state: RootState) =&gt; state.githubIssue.loading);
    const error = useSelector((state: RootState) =&gt; state.githubIssue.error);
    useEffect(() =&gt; {
        dispatch(fetchIssues())
      }, [dispatch]);

    if (loading) {
      return &lt;div&gt;Loading...&lt;/div&gt;;
    }

    if (error) {
      return &lt;div&gt;Error: {error}&lt;/div&gt;;
    }
    const handleTextInputChange = (e:any) =&gt; {
        setTextInput(e.target.value);
    };
    const handleClick = () =&gt; {
        console.log(textInput)
        dispatch(addIssue(textInput))
    }
    return(
        &lt;div className="home_page"&gt;
            &lt;Box sx={{ml: '5rem', mr: '5rem'}}&gt;
                &lt;Typography variant="h4" sx={{textAlign: 'center'}}&gt;
                    Project Issue Tracker
                &lt;/Typography&gt;
                &lt;Box sx={{display: 'flex'}}&gt;
                    &lt;Stack spacing={2}&gt;
                        &lt;Typography variant="h5"&gt;
                            Add new issue
                        &lt;/Typography&gt;
                        &lt;TextField 
                        id="outlined-basic" 
                        label="Title" 
                        variant="outlined" 
                        onChange={handleTextInputChange}
                        value={textInput}
                        /&gt;
                        &lt;Button variant="contained" onClick={handleClick}&gt;Submit&lt;/Button&gt;
                    &lt;/Stack&gt;
                &lt;/Box&gt;
                &lt;Box sx={{ml: '1rem', mt: '3rem'}}&gt;
                    &lt;Typography variant="h5" &gt;
                        Opened issue
                    &lt;/Typography&gt;
                    {
                        githubIssueList?.map((issue : string) =&gt; {
                            return(
                                &lt;ProjectCard issueTitle={issue} /&gt;
                            )
                        })
                    }
                &lt;/Box&gt;
            &lt;/Box&gt;
        &lt;/div&gt;
    )
}
export default HomePage;
</code></pre>
</div>

<p>This updates the code in <code>HomePage.tsx</code> with two minor changes:</p>
<ol>
<li>We dispatch <code>fetchIssue</code> and use the  <code>createAsync()</code> action to make the API calls under the <code>useEffect</code> hook.</li>
<li>We use the <code>loading</code> and <code>error</code> states when the component renders.</li>
</ol>
<p>Now, when loading the app, you will first see the “Loading” text rendered, and once the API call is fulfilled, the <code>issuesList</code> will be populated with all the titles of GitHub issues fetched from the repo.</p>
<p>Once again, the complete code for this project <a href="https://github.com/smashingmagazine/project_issue_tracker">can be found on GitHub</a>. You can also <a href="https://master--relaxed-lamington-5fba83.netlify.app/">check out a live deployment of the app</a>, which displays all the issues fetched from GitHub.</p>
Conclusion
<p>There we have it! We used Redux Toolkit in a React TypeScript application to build a fully functional project issue tracker that syncs with GitHub and allows us to create new issues directly from the app.</p>
<p>We learned many of the foundational concepts of Redux Toolkit, such as defining reducers, immutability helpers, built-in middleware, and DevTools integration. I hope you feel powered to use Redux Toolkit effectively in your projects. With Redux Toolkit, you can improve the performance and scalability of your React applications by effectively managing the global state.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2020/12/how-redux-reducers-work/">How Redux Reducers Work</a>, Fortune Ikechi</li>
<li><a href="https://www.smashingmagazine.com/2018/07/redux-designers-guide/">What Is Redux: A Designer’s Guide</a>, Linton Ye</li>
<li><a href="https://www.smashingmagazine.com/2021/01/dynamic-static-typing-typescript/">Dynamic Static Typing In TypeScript</a>, Stefan Baumgartner</li>
<li><a href="https://www.smashingmagazine.com/2021/11/deep-dive-into-serverless-ui-typescript/">A Deep Dive Into Serverless UI With TypeScript</a>, Ikeh Akinyemi</li>
<li><a href="https://www.smashingmagazine.com/2020/08/redux-real-world-application/">Setting Up Redux For Use In A Real-World Application</a>, Jerry Navi</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Deepak Kumar)</author>
      <enclosure url="http://files.smashing.media/articles/guide-redux-toolkit-typescript/guide-redux-toolkit-typescript.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[How To Use AI Tools To Skyrocket Your Programming Productivity]]></title>
      <link>https://smashingmagazine.com/2023/05/ai-tools-skyrocket-programming-productivity/</link>
      <guid>https://smashingmagazine.com/2023/05/ai-tools-skyrocket-programming-productivity/</guid>
      <pubDate>Tue, 09 May 2023 09:00:00 GMT</pubDate>
      <description><![CDATA[The rise of Artificial Intelligence (AI) in recent times has incited fear in many over losing their jobs. However, that shouldn’t be the case. On the contrary, AI is an opportunity to take your programming to the next level when used tactfully with the right knowledge, as we’ll cover today.]]></description>
      <content:encoded><![CDATA[<p><em>Programming is fun.</em> At least, that’s the relationship I would love to have with programming. However, we all know that with the thrills and joys of programming, there comes a multitude of struggles, unforeseen problems, and long hours of coding. Not to mention — too much coffee.</p>
<p>If only there were a way to cut out all of the menial struggles programmers face daily and bring them straight to the things they should be spending their energy on thinking and doing, such as critical problem-solving, creating better designs, and testing their creations.</p>
<p>Well, in recent times, we’ve been introduced to exactly that.</p>
<p>The start of this year marked the dawn of a huge shift towards Artificial Intelligence (AI) as a means of completing tasks, saving time, and improving our systems. There is a whole new realm of use cases with the rise of AI and its potential to seriously impact our lives in a positive manner.</p>
<p>While many have concerns swirling about AI taking over jobs (and yes, programmers have been <a href="https://www.theverge.com/2022/2/2/22914085/alphacode-ai-coding-program-automatic-deepmind-codeforce">raised up</a>), I take an entirely different perspective. I believe that <strong>AI has the ability to skyrocket your productivity in programming like nothing before</strong>, and over the last couple of months, I have been able to reap the benefits of this growing wave.</p>
<p>Today, I want to share this knowledge with you and the ways that I have been using AI to supersize my programming output and productivity so that you’ll be able to do the same.</p>
Case Study: ChatGPT
<p>If you have missed much of the recent news, let me get you up to speed and share with you the main inspiration for this guide. In late November 2022, OpenAI announced its latest chatbot — ChatGPT, which took the world by storm with over a million sign-ups in its first week.</p>
<p>It was an extremely powerful tool that had never been seen before, blowing people away with its capabilities and responses. Want a 30-word summary of a 1000-word article? Throw it in, and in a few seconds, you’ve just saved yourself a long read. Need an email sales copy for a programming book that teaches you how to code in O(1) speed, written in the style of Kent Beck? Again, it will be back to you in a few seconds. The list of <a href="https://www.misaias.com/chatgpt-uses-cases/">ChatGPT use cases</a> goes on.</p>
<p><img src="https://files.smashing.media/articles/ai-tools-skyrocket-programming-productivity/3-chatgpt-uncaught-typeerror.png" /></p>
<p>However, as a programmer, what really got me excited was ChatGPT’s ability to understand and write code. GPT-3, the model that ChatGPT runs on, has been trained on a wide range of text, including programming languages and code excerpts. As a result, it can generate code snippets and explanations within a matter of seconds.</p>
<p>While there are many AI tools <a href="https://samanthabrandon.com/chatgpt-alternatives">other than ChatGPT</a> that can help programmers boost their productivity, such as <a href="https://youchat.com/">Youchat</a> and <a href="https://www.cogram.com/">Cogram</a>, I will be looking at ChatGPT as the main tool for this guide, due to the fact that it is publicly available for free at <a href="https://beta.openai.com/overview">OpenAI’s website</a> and that it has a very <strong>gentle learning curve for a wide range of applications</strong>.</p>
<p>And again, before we continue, I would like to re-emphasize that </p>
<p>AI tools such as ChatGPT are meant to streamline your workflow, not take over and replace your thinking and problem-solving.</p>
<p>That being said, let’s see how I used ChatGPT to skyrocket my programming productivity.</p>
Common Problems And How ChatGPT Can Help
<p>To help shine a light on this topic, I have compiled five of the most common ways that I have used ChatGPT to overcome problems that any programmer would experience daily. Those five problems are the following:</p>
<ol>
<li>Programmer’s block,</li>
<li>Long hours of debugging,</li>
<li>Understanding long documentation,</li>
<li>Developer testing,</li>
<li>Code optimization.</li>
</ol>
<p>It’s a lot to cover, but I’ll give you real-life examples so that you will be able to take the knowledge from this guide and use it to your own advantage. Let’s jump straight in.</p>
<h3>Programmer’s Block</h3>
<p>Programmer’s block is the programmer’s equivalent of writer’s block and is one of the most common problems that many programmers, myself included, face regularly. When tasked with a significant programming job, such as getting started with building a multiple-page website in HTML, CSS, and JavaScript, it’s easy to get caught in the weeds of not knowing where to start. </p>
<p>Or you could be knee-deep in a coding project and hit a roadblock in finding a solution for a problem. It’s often a frustrating scenario to be in.</p>
<p>ChatGPT has been an excellent solution for that. Let’s look at the example above in having programmer’s block before embarking on a large programming task. Suppose I’m looking to start a new project. After surfing for <a href="https://themoneymaniac.com/saas-ideas">software company ideas</a>, I decided to develop a sleek and modern online store in HTML, CSS, and JavaScript to sell my latest programming book.</p>
<p>While ChatGPT won’t be able to hit the mark in producing the entire project, a great way to use it is to <strong>generate the skeleton</strong> for you to begin. Throwing in a detailed prompt for the task, this is what you get:</p>
<p><strong>Prompt</strong>: <em>Can you provide a basic structure for a sleek and modern single online store landing page, with red as the main color, for my new programming book in HTML and CSS?</em></p>
<h4><code>index.html</code></h4>
<div>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
  &lt;title&gt;Your Book Title&lt;/title&gt;
  &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;header&gt;
    &lt;nav&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
  &lt;/header&gt;
  &lt;main&gt;
    &lt;section&gt;
      &lt;h1&gt;Programming book title&lt;/h1&gt;
      &lt;p&gt;A comprehensive guide to becoming a proficient programmer&lt;/p&gt;
      &lt;button&gt;Learn More&lt;/button&gt;
    &lt;/section&gt;
    &lt;section&gt;
      &lt;h2&gt;Features of the Book:&lt;/h2&gt;
      &lt;ul&gt;
        &lt;li&gt;Step-by-step tutorials for learning core programming concepts&lt;/li&gt;
        &lt;li&gt;In-depth explanations of commonly used programming languages&lt;/li&gt;
        &lt;li&gt;Hands-on exercises and real-world projects to reinforce learning&lt;/li&gt;
        &lt;li&gt;Case studies to illustrate the application of programming in various industries&lt;/li&gt;
        &lt;li&gt;Tips and tricks for efficient and effective programming practices&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/main&gt;
  &lt;footer&gt;
    &lt;p&gt;Copyright 2023&lt;/p&gt;
  &lt;/footer&gt;
&lt;/body&gt;
</code></pre>
</div>

<h4><code>style.css</code></h4>
<pre><code>body {
  font-family: Arial, sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0;
  padding: 0;
}

header, footer {
  background-color: red;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 50px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);
}

nav ul {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
}

nav a {
  color: white;
  display: block;
  padding: 10px 20px;
  text-decoration: none;
}

main {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  height: calc(100vh - 100px);
}

section {
  max-width: 800px;
  padding: 40px;
  margin-top: 100px;
  text-align: center;
  background-color: white;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);
  border-radius: 10px;
  margin-bottom: 20px;
  margin-left: auto;
  margin-right: auto;
}

h2 {
  margin-top: 40px;
}

ul {
  list-style: none;
  margin-top: 20px;
  padding-left: 0;
}

li {
  margin-bottom: 10px;
}
</code></pre>

<p>That gives us the following template to start our work with:</p>
<p><img src="https://files.smashing.media/articles/ai-tools-skyrocket-programming-productivity/2-index-style-css.png" /></p>
<p>Nothing impressive, but it does provide a great starting point as opposed to a blank HTML file.</p>
<p>Now, of course, I would highly recommend that the most you create with this is the barebones structure. We are using these tools to abstract away menial tasks like creating the HTML structure so that you can focus on more important things like implementing your own CSS styles and HTML features.</p>
<p>HTML and CSS templates are already widely-used concepts. However, <strong>with AI, we can now create more personalized templates and basic code structures</strong>, getting us from staring at a blank HTML file to a workable skeleton in a matter of minutes.</p>
<p>Use it to create a starting platform for you to get over your programmer’s block, but for the fine details and exact features, your programming knowledge will still be irreplaceable.</p>
<p>Nevertheless, I have been using it to get numerous programming projects up and running. I had this <a href="https://shaneduggan.com/sentence-length-counter">sentence-length counter</a> made from scratch easily within an hour by creating the base template and adding on what I wanted after. I find that being able to jump-start that process makes my programming workflow much more streamlined and enjoyable.</p>
<h3>Long Hours Of Debugging</h3>
<p>Another common frustration every programmer knows is debugging. Debugging is an extremely time-intensive aspect of programming that can often be very draining and leave programmers at roadblocks, which is detrimental to a productive programming session.</p>
<p>Fortunately, AI is able to cut out a lot of the frustration of debugging, while at the same time, it does not replace the job of programmers in having strong fundamentals in knowing how to debug. At the current time, most AI tools are not able to spot every single flaw in your code and suggest the correct changes to make; hence, it is still essential that you are capable of debugging code.</p>
<p>However, AI is a great supplementary tool to your debugging skills in two main ways:</p>
<ol>
<li>Understanding runtime errors;</li>
<li>Providing context-aware suggestions.</li>
</ol>
<h4>Understanding Runtime Errors</h4>
<p>When faced with errors that you have never seen before in your code, a common reaction would be to hit Google and spend the next chunk of your time surfing through forums and guides to try and find a specific answer for something like the following:</p>
<pre><code>Uncaught TypeError: Cannot read property 'value' of undefined.
</code></pre>

<p>Rather than spending your time frantically searching the web, a simple prompt can provide everything you would need for the most part.</p>
<h4>Providing Context-Aware Suggestions</h4>
<p>The other way in which I’ve been able to get help from ChatGPT for debugging is through its context-aware suggestions for errors. Traditionally, even though we may find the answers for what our program’s bugs are online, it is oftentimes difficult to put the errors and solutions into context.</p>
<p>Here is how ChatGPT handles both of these scenarios with a simple prompt.</p>
<p><strong>Prompt</strong>: <em>I found the error “Uncaught TypeError: Cannot read property <code>value</code> of undefined.” in my Python code. How do I resolve it?</em></p>
<p><img src="https://files.smashing.media/articles/ai-tools-skyrocket-programming-productivity/1-chatgpt.png" /></p>
<p>With this, I have been able to cut out a lot of time that I would have been spending surfing for answers and turn that time into producing error-free code. While you still have to have good knowledge in knowing how to implement these fixes, using AI as a supplementary tool in your debugging arsenal can provide a huge boost in your programming productivity.</p>
<h3>Understanding Long Documentation</h3>
<p>Another fantastic way to use AI tools to your advantage is by streamlining long documentation into digestible information that comes when having to use APIs or libraries. As a Natural Language Processing model, this is where ChatGPT excels.</p>
<p>Imagine you’re working on a new web development project, but want to use Flask for the first time. Traditionally, you might spend hours scrolling through pages of dense documentation from Flask, trying to find the precise information you need. </p>
<p>With a tool like ChatGPT, you’ll be able to streamline this problem and save an immense amount of time in the following ways:</p>
<ul>
<li><strong>Generate concise summaries</strong><br />You’ll be able to automatically summarize long code documentation, making it easier to quickly understand the key points without having to read through the entire document.</li>
<li><strong>Answer specific questions</strong><br />ChatGPT can answer specific questions about the code documentation, allowing you to quickly find the information you need without having to search through the entire document.</li>
<li><strong>Explain technical terms</strong><br />If you are having trouble understanding some terms in the documentation, rather than navigating back to extensive forum threads, ChatGPT can explain technical terms in simple language, making it easier for non-technical team members to understand the code documentation.</li>
<li><strong>Provide examples</strong><br />Similarly to debugging, you can get relatable examples for each code concept in the documentation, making it easier for you to understand how the code works and how you can apply it to your own projects.</li>
<li><strong>Generate code snippets</strong><br />ChatGPT can generate code snippets based on the code documentation, allowing you to experiment with use cases and tailor the examples to your specific needs.</li>
</ul>
<p>It’s like having a search engine that can understand the context of your query and provide the most relevant information. You’ll no longer be bogged down by pages of text, and you can focus on writing and testing your code. Personally, I have been able to blast through numerous libraries, understand and apply them for my own needs in a fraction of the time I normally would.</p>
<h3>Developer Testing</h3>
<p>Developer testing is one of the cornerstone skills that a programmer or developer must have in order to create bulletproof programs and applications. However, even for experienced programmers, a common problem in developer testing is that you won’t know what you don’t know.</p>
<p>What that means is that in your created test cases, you might miss certain aspects of your program or application that could go unnoticed until it reaches a larger audience. Oftentimes, to avoid that scenario, we could spend hours on end trying to bulletproof our code to ensure that it covers all its bases.</p>
<p>However, this is a great way that I’ve been able to incorporate AI into my workflow as well. </p>
<p>Having AI suggest tests that cover all edge cases is a great way to provide an objective and well-rounded testing phase for your projects.</p>
<p>It also does so in a fraction of the time you would spend.</p>
<p>For example, you are working on the same product landing page for your programming book from earlier. Now, I’ve created a proper product page that involves a form with the following fields for you to process:</p>
<p><img src="https://files.smashing.media/articles/ai-tools-skyrocket-programming-productivity/5-product-page-forms-input.png" /></p>
<h4><code>script.js</code></h4>
<div>
<pre><code>// Get references to the form elements.
const form = document.getElementById("payment-form");
const cardNumber = document.getElementById("card-number");
const expiryDate = document.getElementById("expiry-date");
const cvv = document.getElementById("cvv");
const submitButton = document.getElementById("submit-button");

// Handle form submission.
form.addEventListener("submit", (event) =&gt; {
  event.preventDefault();

  // Disable the submit button to prevent multiple submissions.
  submitButton.disabled = true;

  // Create an object to hold the form data.
  const formData = {
    cardNumber: cardNumber.value,
    expiryDate: expiryDate.value,
    cvv: cvv.value,
  };

  // Perform client-side validation on the form data
  if (!validateFormData(formData)) {
    // If the data is invalid, re-enable the submit button and return
    submitButton.disabled = false;
    return;
  }

  // Send the form data to the server.
  // The following is just an example and should not be used in a real-world scenario
  // as it lacks security measures and proper payment gateway integration.
  fetch("/charge", {
    method: "POST",
    body: JSON.stringify(formData),
    headers: {
      "Content-Type": "application/json",
    },
  })
    .then((response) =&gt; response.json())
    .then((data) =&gt; {
      // Handle the server response.
      if (data.success) {
        // Payment was successful.
        alert("Payment successful!");
      } else {
        // Payment failed.
        alert("Payment failed. Please try again.");
        submitButton.disabled = false;
      }
    })
    .catch((error) =&gt; {
      console.error(error);
      alert("An error occurred. Please try again.");
      submitButton.disabled = false;
    });
});

// Perform client-side validation on the form data.
function validateFormData(data) {
  // Example validation checks.
  if (!data.cardNumber || data.cardNumber.length !== 16) {
    alert("Please enter a valid card number.");
    return false;
  }
  if (!data.expiryDate || data.expiryDate.length !== 5) {
    alert("Please enter a valid expiry date in the format MM/YY.");
    return false;
  }
  if (!data.cvv || data.cvv.length !== 3) {
    alert("Please enter a valid CVV.");
    return false;
  }
  return true;
}
</code></pre>
</div>

<p>Knowing that there are many invalid inputs that customers might use, you want to create some test cases to validate your form’s functionalities. Rather than spending copious amounts of time coming up with numerous test cases, let’s let AI identify any edge cases we missed to bulletproof our tests.</p>
<p><strong>Prompt</strong>: <em>Can you help to come up with some edge cases to ensure that the form does not accept any invalid inputs in collecting payment details?</em></p>
<h4><code>test.js</code></h4>
<div>
<pre><code>// Test Case 1: Check if form doesn't submit when fields are empty.
document.querySelector("form").addEventListener("submit", function(e) {
  e.preventDefault();
  var name = document.querySelector("input[name='name']").value;
  var address = document.querySelector("input[name='address']").value;
  var cardNumber = document.querySelector("input[name='card-number']").value;
  var expiryDate = document.querySelector("input[name='expiry-date']").value;
  var cvv = document.querySelector("input[name='cvv']").value;

  if (!name || !address || !cardNumber || !expiryDate || !cvv) {
    alert("All fields are required");
    return;
  }

  // Check if all the fields contain valid inputs.
  if (!validateName(name) || !validateAddress(address) || !validateCardNumber(cardNumber) || !validateExpiryDate(expiryDate) || !validateCVV(cvv)) {
    return;
  }

  // Continue with payment processing.
});

// Test Case 2: Check if name input is valid.
function validateName(name) {
  var nameRegEx = /^[a-zA-Z ]+$/;
  if (!nameRegEx.test(name)) {
    alert("Invalid name. Please enter a valid name");
    return false;
  }
  return true;
}

// Test Case 3: Check if address input is valid.
function validateAddress(address) {
  var addressRegEx = /^[a-zA-Z0-9\s,'-]*$/;
  if (!addressRegEx.test(address)) {
    alert("Invalid address. Please enter a valid address");
    return false;
  }
  return true;
}

// Test Case 4: Check if card number input is valid.
function validateCardNumber(cardNumber) {
  var cardNumberRegEx = /^\d{16}$/;
  if (!cardNumberRegEx.test(cardNumber)) {
    alert("Invalid card number. Please enter a valid card number");
    return false;
  }
  return true;
}
</code></pre>
</div>

<p>The need to create all sorts of test cases, which is usually a daunting and repetitive task, after a while of working on the same project, can make programming feel very menial. However, with the assistance of AI, this process can be streamlined and, at the same time, improved to cover more bases in your developer testing.</p>
<h3>Code Optimization</h3>
<p>As it stands, AI still has a long way to go in helping to optimize code and can’t actually do the optimization itself. However, it can still help to provide some useful insights and give some pointers to improving your programming. Here are the most common ways that I have used ChatGPT in optimizing my code for performance:</p>
<ul>
<li><strong>Code Suggestions</strong><br />Most simply, it can suggest code snippets or alternative solutions to improve the performance of your existing code.</li>
<li><strong>Best Practices</strong><br />Having been trained on a wide range of code patterns, ChatGPT can help you follow best practices for coding and software design, leading to more efficient and optimized code.</li>
<li><strong>Refactoring</strong><br />It helps to reorganize existing code to improve its efficiency and maintainability without affecting its functionality.</li>
<li><strong>Knowledge Sharing</strong><br />There are many scenarios where your code can be implemented simply through a single import or with other programming languages, libraries, and frameworks. ChatGPT’s suggestions help ensure you are making informed decisions on the best implementations for your needs.</li>
</ul>
<p>Of course, the bulk of these still requires you to optimize your code manually. However, using AI to gain insights and suggestions for this can be a great way to improve your productivity and produce higher-quality code.</p>
AI Is Amazing, But It Does Have Its Limitations
<p>Now that we have seen what AI can do for you and your programming productivity, I would imagine you are bubbling with ideas on how you are going to start implementing these in your programming workflows.</p>
<p>However, it is essential to keep in mind that these models are fairly new and still have a long way to go regarding <strong>reliability</strong> and <strong>accuracy</strong>. These are just some of the limitations that AI, specifically, ChatGPT, has:</p>
<ul>
<li><strong>Limited Understanding</strong><br />AI algorithms like ChatGPT have a limited understanding of code and may not fully understand the implications and trade-offs of certain programming decisions.</li>
<li><strong>Training Data Limitations</strong><br />The quality and relevance of AI algorithms’ output depend on the quality and scope of the training data. For example, ChatGPT was only trained on data dating to 2021. Any updates in programming languages since then may not be reflected.</li>
<li><strong>Bias</strong><br />AI algorithms can be biased towards specific patterns or solutions based on the data they were trained on, leading to suboptimal or incorrect code suggestions.</li>
<li><strong>Lack of Context</strong><br />AI algorithms may struggle to understand the context and the desired outcome of a specific coding task, leading to generic or irrelevant advice. While this can be minimized with specific prompts, it is still difficult to generate solutions to more complicated problems.</li>
</ul>
<p>Nevertheless, these limitations are a small price for the multitude of benefits that AI tools provide. While I am an advocate of using AI to boost your programming productivity, keeping in mind these limitations are crucial when using AI in your workflows as it is important to ensure that the information or code you are producing is reliable, especially if you are using it in a professional setting.</p>
<p>With the current limitations, <strong>AI should only be used as a means to assist your current skills, not to replace them</strong>. Hence, with that in mind, use it tactfully and sparingly to achieve a good balance in boosting your productivity but not detracting from your skills as a programmer.</p>
How Else Will AI Improve Programmers’ Lives?
<p>While I have mainly talked about the technical aspects of programming that AI can help in, there are many other areas where AI can help to make your life as a programmer much easier.</p>
<p>We are just at the tip of the iceberg in this incoming wave of AI. Many new use cases for AI appear every day with the potential to improve programmers’ lives even further. In the future, we are likely to see many new integrations of AI in many of our daily software uses as programmers.</p>
<p>There already exists general <a href="https://www.demandsage.com/best-ai-writing-softwares/">writing software</a>, which could be useful for programmers in creating code and API documentation. These have been around for a while and have become widely accepted as a tool that helps, not replaces.</p>
<p>General productivity and notetaking tools that use AI have also been a big hit, especially for programming students who have to plow through large amounts of information every day. All in all, where there is a labor-intensive task that can be resolved, AI will likely be making headway in those areas.</p>
Wrapping Up
<p>To wrap things up, I will end with a reminder from the opening of this guide. I believe that there is massive potential in becoming well-versed with AI, not as a means to replace our work, but as a means to improve it.</p>
<p>With the right knowledge of what you can and, more importantly, cannot do, AI can be an extremely valuable skill to have in your programming arsenal and will undoubtedly save you copious amounts of time if used correctly.</p>
<p>Hence, rather than fearing the incoming wave of new AI technology, I encourage you to embrace it. Take the knowledge you have learned from the guide and tailor it to your own needs and uses. Every programmer’s workflows are different, but with the right principles and a good knowledge of the limitations of AI, the benefits are equally available to everyone.</p>
<p>So all that’s left for you to do is to reap the supersized benefits that come with integrating AI into your current workflows and see your programming productivity skyrocket as it has for me. And if there’s one thing to remember, it’s to <strong>use AI as your assistant, not your replacement</strong>.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Shane Duggan)</author>
      <enclosure url="http://files.smashing.media/articles/ai-tools-skyrocket-programming-productivity/ai-tools-skyrocket-programming-productivity.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[The Safest Way To Hide Your API Keys When Using React]]></title>
      <link>https://smashingmagazine.com/2023/05/safest-way-hide-api-keys-react/</link>
      <guid>https://smashingmagazine.com/2023/05/safest-way-hide-api-keys-react/</guid>
      <pubDate>Mon, 08 May 2023 13:00:00 GMT</pubDate>
      <description><![CDATA[Want to make sure your API keys are safe and sound when working with React? Jessica Joseph’s got you covered! She will show you the best ways to hide your API keys, from using environment variables to building your own back-end proxy server.]]></description>
      <content:encoded><![CDATA[<p>Back in the day, developers had to write all sorts of custom code to get different applications to communicate with each other. But, these days, <a href="https://developer.mozilla.org/en-US/docs/Glossary/API">Application Programming Interfaces</a> (APIs) make it so much easier. APIs provide you with everything you need to interact with different applications smoothly and efficiently, most commonly where one application requests data from the other application.</p>
<p>While APIs offer numerous benefits, they also present a significant risk to your application security. That is why it is essential to learn about their vulnerabilities and how to protect them. In this article, we’ll delve into the wonderful world of API keys, discuss why you should protect your API keys, and look at the best ways to do so when using React.</p>
What Are API Keys?
<p>If you recently signed up for an API, you will get an API key. Think of API keys as secret passwords that prove to the provider that it is you or your app that’s attempting to access the API. While some APIs are free, others charge a cost for access, and because most API keys have zero expiration date, it is frightening not to be concerned about the safety of your keys.</p>
Why Do API Keys Need To Be Protected?
<p>Protecting your API keys is crucial for guaranteeing the security and integrity of your application. Here are some reasons why you ought to guard your API keys:</p>
<ul>
<li><strong>To prevent unauthorized API requests.</strong><br />If someone obtains your API key, they can use it to make unauthorized requests, which could have serious ramifications, especially if your API contains sensitive data.</li>
<li><strong>Financial insecurity.</strong><br />Some APIs come with a financial cost. And if someone gains access to your API key and exceeds your budget requests, you may be stuck with a hefty bill which could cost you a ton and jeopardize your financial stability.</li>
<li><strong>Data theft, manipulation, or deletion.</strong><br />If a malicious person obtains access to your API key, they may steal, manipulate, delete, or use your data for their purposes.</li>
</ul>
Best Practices For Hiding API Keys In A React Application
<p>Now that you understand why API keys must be protected, let’s take a look at some methods for hiding API keys and how to integrate them into your React application.</p>
<h3>Environment Variables</h3>
<p><a href="https://en.wikipedia.org/wiki/Environment_variable">Environment variables</a> (<code>env</code>) are used to store information about the environment in which a program is running. It enables you to hide sensitive data from your application code, such as API keys, tokens, passwords, and just any other data you’d like to keep hidden from the public. </p>
<p>One of the most popular <code>env</code> packages you can use in your React application to hide sensitive data is the <a href="https://github.com/motdotla/dotenv"><code>dotenv</code></a> package. To get started:</p>
<ol>
  <li>Navigate to your react application directory and run the command below.<br />
<pre><code>npm install dotenv --save
</code></pre>
  </li>
  <li>Outside of the <code>src</code> folder in your project root directory, create a new file called <code>.env</code>.<br /><br />
<img src="https://files.smashing.media/articles/safest-way-hide-api-keys-react/1-env-file-project-root-directory.png" />
</li>
  <li>In your <code>.env</code> file, add the API key and its corresponding value in the following format:<br />
<pre><code>// for CRA applications
REACT_APP_API_KEY = A1234567890B0987654321C ------ correct

// for Vite applications
VITE_SOME_KEY = 12345GATGAT34562CDRSCEEG3T  ------ correct
</code></pre>
</li>
  <li>Save the <code>.env</code> file and avoid sharing it publicly or committing it to version control.</li>
  <li>You can now use the <code>env</code> object to access your environment variables in your React application.<br />
<pre><code>// for CRA applications
'X-RapidAPI-Key':process.env.REACT_APP_API_KEY
// for Vite  applications
'X-RapidAPI-Key':import.meta.env.VITE_SOME_KEY
</code></pre>
</li>
  <li>Restart your application for the changes to take effect.</li>
</ol>

<p>However, running your project on your local computer is only the beginning. At some point, you may need to upload your code to GitHub, which could potentially expose your <code>.env</code> file. So what to do then? You can consider using the <code>.gitignore</code> file to hide it.</p>
<h3>The <code>.gitignore</code> File</h3>
<p>The <code>.gitignore</code> file is a text file that instructs Git to ignore files that have not yet been added to the repository when it’s pushed to the repo. To do this, add the <code>.env</code> to the <code>.gitignore</code> file before moving forward to staging your commits and pushing your code to GitHub.</p>
<pre><code>// .gitignore
# dependencies
/node_modules
/.pnp
.pnp.js

# api keys
.env
</code></pre>

<p>Keep in mind that at any time you decide to host your projects using any hosting platforms, like <a href="https://vercel.com/">Vercel</a> or <a href="https://www.netlify.com/">Netlify</a>, you are to provide your environment variables in your project settings and, soon after, redeploy your app to view the changes.</p>
<h3>Back-end Proxy Server</h3>
<p>While environment variables can be an excellent way to protect your API keys, remember that they can still be compromised. Your keys can still be stolen if an attacker inspects your bundled code in the browser. So, what then can you do? Use a back-end proxy server.</p>
<p>A back-end proxy server acts as an intermediary between your client application and your server application. Instead of directly accessing the API from the front end, the front end sends a request to the back-end proxy server; the proxy server then retrieves the API key and makes the request to the API. Once the response is received, it removes the API key before returning the response to the front end. This way, your API key will never appear in your front-end code, and no one will be able to steal your API key by inspecting your code. Great! Now let’s take a look at how we can go about this:</p>
<ol>
<li><strong>Install necessary packages.</strong><br />To get started, you need to install some packages such as <a href="http://expressjs.com/">Express</a>, <a href="https://github.com/expressjs/cors">CORS</a>, <a href="https://axios-http.com/">Axios</a>, and <a href="https://nodemon.io/">Nodemon</a>. To do this, navigate to the directory containing your React project and execute the following command:<br />
<pre><code>npm install express cors axios nodemon
</code></pre>
</li>
<li><strong>Create a back-end server file.</strong><br />In your project root directory, outside your <code>src</code> folder, create a JavaScript file that will contain all of your requests to the API.<br /><br />
<img src="https://files.smashing.media/articles/safest-way-hide-api-keys-react/2-javascript-file-project-root-directory.png" />
</li>
<li><strong>Initialize dependencies and set up an endpoint.</strong><br />In your backend server file, initialize the installed dependencies and set up an endpoint that will make a <code>GET</code> request to the third-party API and return the response data on the listened port. Here is an example code snippet:<br />
<pre><code>// defining the server port
const port = 5000

// initializing installed dependencies
const express = require('express')
require('dotenv').config()
const axios = require('axios')
const app = express()
const cors = require('cors')
app.use(cors())

// listening for port 5000
app.listen(5000, ()=&gt; console.log(<code>Server is running on ${port}</code> ))

// API request
app.get('/', (req,res)=&gt;{<br />    const options = {
        method: 'GET',
        url: '<a href="https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions'">https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions'</a>,
        headers: {
            'X-RapidAPI-Key':process.env.REACT_APP_API_KEY,
            'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'
        }
   };

    axios.request(options).then(function (response) {
        res.json(response.data);
    }).catch(function (error) {
        console.error(error);
    });
}
</code></pre>
</li>
<li>Add a script tag in your <code>package.json</code> file that will run the back-end proxy server.<br /><br />
<img src="https://files.smashing.media/articles/safest-way-hide-api-keys-react/3-script-tag-package-json-file.png" />
</li>
<li>Kickstart the back-end server by running the command below and then, in this case, navigate to <code>localhost:5000</code>.<br />
<pre><code>npm run start:backend
</code></pre>
</li>
<li>Make a request to the backend server (<code><a href="http://localhost:5000/">http://localhost:5000/</a></code>) from the front end instead of directly to the API endpoint. Here’s an illustration:<br />
<pre><code>import axios from "axios";
import {useState, useEffect} from "react"

function App() {

  const [data, setData] = useState(null)

  useEffect(()=&gt;{
    const options = {
      method: 'GET',
      url: "<a href="http://localhost:5000&quot;">http://localhost:5000"</a>,
    }
    axios.request(options)
    .then(function (response) {
        setData(response.data.data)
    })
    .catch(function (error) {
        console.error(error);
    })<br />  }, [])

  console.log(data)

  return (
    &lt;main className="App"&gt;
    &lt;h1&gt;How to Create a Backend Proxy Server for Your API Keys&lt;/h1&gt;
     {data &amp;&amp; data.map((result)=&gt;(
      &lt;section key ={result.id}&gt;
        &lt;h4&gt;Name:{result.name}&lt;/h4&gt;
        &lt;p&gt;Population:{result.population}&lt;/p&gt;
        &lt;p&gt;Region:{result.region}&lt;/p&gt;
        &lt;p&gt;Latitude:{result.latitude}&lt;/p&gt;
        &lt;p&gt;Longitude:{result.longitude}&lt;/p&gt;
      &lt;/section&gt;
    ))}
    &lt;/main&gt;
  )
}
export default App;
</code></pre>
</li>
</ol>

<p>Okay, there you have it! By following these steps, you'll be able to hide your API keys using a back-end proxy server in your React application.</p>
<h3>Key Management Service</h3>
<p>Even though environment variables and the back-end proxy server allow you to safely hide your API keys online, you are still not completely safe. You may have friends or foes around you who can access your computer and steal your API key. That is why data encryption is essential.</p>
<p>With a key management service provider, you can encrypt, use, and manage your API keys. There are tons of key management services that you can integrate into your React application, but to keep things simple, I will only mention a few:</p>
<ul>
<li><strong>AWS Secrets Manager</strong><br />The <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html">AWS Secrets Manager</a> is a secret management service provided by Amazon Web Services. It enables you to store and retrieve secrets such as database credentials, API keys, and other sensitive information programmatically via API calls to the AWS Secret Manager service. There are a ton of resources that can get you started in no time.</li>
<li><strong>Google Cloud Secret Manager</strong><br />The <a href="https://cloud.google.com/secret-manager">Google Cloud Secret Manager</a> is a key management service provided and fully managed by the Google Cloud Platform. It is capable of storing, managing, and accessing sensitive data such as API keys, passwords, and certificates. The best part is that it seamlessly integrates with Google’s back-end-as-a-service features, making it an excellent choice for any developer looking for an easy solution.</li>
<li><strong>Azure Key Vault</strong><br />The <a href="https://azure.microsoft.com/en-us/products/key-vault/">Azure Key Vault</a> is a cloud-based service provided by Microsoft Azure that allows you to seamlessly store and manage a variety of secrets, including passwords, API keys, database connection strings, and other sensitive data that you don’t want to expose directly in your application code.</li>
</ul>
<p>There are more key management services available, and you can choose to go with any of the ones mentioned above. But if you want to go with a service that wasn’t mentioned, that’s perfectly fine as well.</p>
Tips For Ensuring Security For Your API Keys
<p>You have everything you need to keep your API keys and data secure. So, if you have existing projects in which you have accidentally exposed your API keys, don’t worry; I've put together some handy tips to help you identify and fix flaws in your React application codebase:</p>
<ol>
<li>Review your existing codebase and identify any hardcoded API key that needs to be hidden.</li>
<li>Use environment variables with <code>.gitignore</code> to securely store your API keys. This will help to prevent accidental exposure of your keys and enable easier management across different environments.</li>
<li>To add an extra layer of security, consider using a back-end proxy server to protect your API keys, and, for advanced security needs, a key management tool would do the job.</li>
</ol>
Conclusion
<p>Awesome! You can now protect your API keys in React like a pro and be confident that your application data is safe and secure. Whether you use environment variables, a back-end proxy server, or a key management tool, they will keep your API keys safe from prying eyes.</p>
<h3>Further Reading On SmashingMag</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/12/protect-api-key-production-nextjs-api-route/">How To Protect Your API Key In Production With Next.js API Route</a>”, Caleb Olojo</li>
<li>“<a href="https://www.smashingmagazine.com/2021/10/react-apis-building-flexible-components-typescript/">Useful React APIs For Building Flexible Components With TypeScript</a>”, Gaurav Khanna</li>
<li>“<a href="https://www.smashingmagazine.com/2021/08/state-management-nextjs/">State Management In Next.js</a>”, Atila Fassina</li>
<li>“<a href="https://www.smashingmagazine.com/2023/03/internationalization-nextjs-13-react-server-components/">Internationalization In Next.js 13 With React Server Components</a>”, Jan Amann</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Jessica Joseph)</author>
      <enclosure url="http://files.smashing.media/articles/safest-way-hide-api-keys-react/safest-way-hide-api-keys-react.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Learning JavaScript With Imagination]]></title>
      <link>https://smashingmagazine.com/2023/05/learning-javascript-with-imagination/</link>
      <guid>https://smashingmagazine.com/2023/05/learning-javascript-with-imagination/</guid>
      <pubDate>Fri, 05 May 2023 09:00:00 GMT</pubDate>
      <description><![CDATA[This is the story of how one little octopus, explaining one beginner’s concept, carried such weight and power for Kylo that it drove his work and led him to research something that is really quite silly. And yet, it transformed how he learned to write &mdash; and finally understand &mdash; JavaScript.]]></description>
      <content:encoded><![CDATA[<p>Many years ago, I set my sights on becoming a senior developer. I achieved that goal! I wish I could say it was a matter of hard work and perseverance, but no, that wasn’t enough. JavaScript stood in my way, and it was while grappling with it that I came across one silly sentence in Marijn Habernecker’s classic book, <a href="https://eloquentjavascript.net"><em>Eloquent JavaScript</em></a>. On the topic of variables, it says:</p>
<blockquote>“You should imagine bindings as tentacles rather than boxes. They do not contain values; they grasp them — two bindings can refer to the same value.”<br /><br />— Marijn Habernecker</blockquote>

<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/octopus.png" /></p>
<p>An analogy like this falls into the category of childish comparisons meant mostly for raw beginners to understand basic concepts. They are fun and entertaining but not something that will turn you into a senior developer.</p>
<p>But it struck me. Even in a small way, this childish metaphor made me a better developer. It fixed a fundamental misunderstanding: <em>we don’t put values in variables</em>. If variables did behave like buckets or containers, how could this be true?</p>
<pre><code>const count1 = 10;
const count2 = count1;</code></pre>

<p>How is it possible to have the same <code>10</code> value in two different buckets? The same thing can’t be in two places at the same time, right?!</p>
<p>But the octopus metaphor solved this dilemma for me. Two tentacles can certainly grab the same value! It’s a visualization that reveals the underlying nature of values! Give me all of the world’s computer science literature on variables at my fingertips, and it would not be as useful to me as this imaginary octopus.</p>
<p>Why can’t all of JavaScript be like this?</p>
My Search For More Visual Learning Material
<p>I noticed a frustrating gap between doing the simple loop and function exercises you find in most beginner courses and actually building programs.</p>
<p>The problem? I still wasn’t at the level where I could decipher reams of dry technical text. I wanted more octopuses!</p>
<p>So, I looked everywhere for them. I scanned the internet for visual and abstract learning resources: Google, YouTube, Medium, TikTok, and every book I could possibly find. I discovered most “visual learning” material fits into one of three groups.</p>
<p>First is a <strong>gamified learning experience</strong>, like the learn-while-playing platforms <a href="https://codecombat.com/">CodeCombat</a> and <a href="https://play.elevatorsaga.com/">ElevatorSaga</a>. While wonderfully creative and full of stories and characters that help you build real programs with real-world patterns, this type of learning is procedural. The focus is on using concepts rather than diving into what they are.</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/codecombat.png" /></p>
<p>The second group is the <strong>graphically represented syntax or technical explanation</strong>. Ever seen an array of apple and orange emojis? Or diagrams of the <code>event</code> loop? These can break down scary concepts into an easier-to-digest visual medium. They can be powerful visual aids that transform dense technical jargon. Examples include <a href="https://www.lydiahallie.io">Lydia Hallie’s</a> brilliant “<a href="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke">JavaScript Visualized</a>” series as well as cheat sheets like <a href="https://dev.to/rammcodes/my-visual-javascript-array-cheatsheet-that-went-viral-on-linkedin-44bb">this one from Ram Maheshwari</a>.</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/javascript-vizualized-scope.png" /></p>
<p>The third group is closer to what I sought: the <strong>analogy-driven learning experience</strong>. Developers love a good analogy. We use them all the time in blog posts and video tutorials. They help explain very technical concepts. One resource I found, <a href="https://www.codeanalogies.com/">CodeAnalogies</a>, is particularly impressive, with analogies for everything from content distribution networks to MVC frameworks.</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/codeanalogies.jpg" /></p>
<p>But analogy-driven learning has limitations for me. All of the analogies were disconnected! They had no relation to one another. They were great for wrapping my head around an isolated topic but not for seeing the big picture. The thing with JavaScript is that <em>everything</em> is connected. How can a newspaper analogy for objects be extended to describe prototypal inheritance?</p>
<p>Finally, I came to realize the thing I wanted most was something <strong>memorable</strong>. I wanted to consolidate everything I was learning into a visual format that was easy to recall when I needed it — whether in an interview or while writing code. Unfortunately, most analogies are entirely forgettable. How many dog, cat, and banana arrays can one take?</p>
Building My Own Visual Representations
<p>There was only one solution to this: create my own visual representations for my JavaScript knowledge tree. But first, I needed to figure out how to make something stick in my memory.</p>
<p>I’ve always had an interest in <strong>mnemonic memory methods</strong>. These are memory “hacks,” such as the <a href="https://artofmemory.com/blog/how-to-build-a-memory-palace">“memory palace”</a>. They help visually encode large amounts of information for easier recall. World memory competitors use it to remember the order of multiple decks of cards and random number sequences.</p>
<p>The basic principle is this: You can take any idea and turn it into an image. For example, an array could be an ocean sting<em>ray</em>. That’s good, but still not enough. The trick is to make the mental image as weird, funny, and ridiculous as possible. Images that are out of the ordinary are what stick to memory.</p>
My First Big Lesson
<p>So, here is one of my very first mnemonic representations of JavaScript arrays:</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/streetvendor-javascript-analogy.jpg" /></p>
<p>I was so proud of this. We have a stingray street vendor selling fruit, reminding me that arrays hold data. He has a special square device for picking up individual items that represent the square bracket syntax for selecting items. He has a monocle to remind me that arrays have methods for searching. He has a cowboy lasso that refers to loops, and so on.</p>
<p>It’s a fun depiction. But I was trying to learn JavaScript to land a job! If this ridiculous monocled stingray didn’t make me a better developer, it defeated the purpose. The ultimate test: would I use this image of an array streetseller as a point of reference while coding? Nope. It turned out to be entirely, utterly useless. </p>
<p>I didn’t need a way to remember the term <em>array</em>. Knowing they have methods to search does not tell me how I can perform searches. Even a Swiss Army knife tail with all the main array methods like <code>.sort()</code>, <code>.push()</code>, and <code>.unshift()</code> proved pointless with a two-second Google search.</p>
<p>This was trickier than I thought. I learned my first big lesson:</p>
<p>We can’t learn a programming language using pure mnemonic methods because memorizing the lists of things does not help you understand the underlying concepts.</p>
My Second Big Lesson
<p>After much reflection and many, many more failed attempts, I tried to represent something I had always struggled with: <em>functions</em>. What would the makeup of a function look like? I came up with this pretty poor representation:</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/waterslide-javascript-analogy.jpeg" /></p>
<p>At the top, we have silly paratroopers that represent parameters. We send parameters through the entrance, <code>( )</code>, and they end up in a contained pool (i.e., the function body). They start arguing, and that’s how we can remember <code>arguments</code>.</p>
<p>Unfortunately, this went into the failure bucket, too. Representing syntax isn’t helpful. It’s better to gain familiarity through lots of practice writing it. There were also dangerous flaws in the analogy. It suggested parameters and arguments are the same; the only difference is their place. </p>
<p>An abstraction like this with flawed theory baked into it would actually make me a <em>worse</em> developer! I needed to dig deeper into what things really are.</p>
The Breakthrough
<p>The solution was to go atomic. Focusing on the smallest concept would give me the first layer I could use to paint a picture of JavaScript. I circled back to our friendly octopus, where this all began.</p>
<p>What were the tentacles grasping? Values!</p>
<p>Values are often glossed over and don’t seem like the key to unlocking the mysteries of JavaScript. But this simple idea was a breakthrough for me: if the code flows, we can imagine the flowing as an ocean or river. What do we find in this flow? Islands! </p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/toilet-island-javascript-analogy.jpg" /></p>
<p>Values are the islands, and each island has a set location and size. That was it! It was exactly what I was looking for. It still didn’t improve my skills as a developer. But I knew it had potential. </p>
From Analogies To Models
<p>Layer upon layer, I began to build up a vision of JavaScript by focusing on what things are and how they are related to other things. First came islands. Then came genies, evil sorcerers, flying ships, and turtle pilots. My excitement grew as the smaller layers, the fundamentals, could be combined to produce a big-picture understanding of more complex topics like closures.</p>
<p>Each image was not a simple analogy. It was a <strong>mental model</strong> — a way of thinking. It provided a lens to interpret each concept but required imagination. I call them <em>imagimodels</em>.</p>
<p>I knew from my past attempts that focusing on lists is ineffective. The secret lies in what things are rather than what they do. When I think about it, that was my problem with learning JavaScript all along. I had no issue eventually getting something to work. The problem was I mostly didn’t have the faintest idea <em>why</em>.</p>
Growing A Memorable, Multi-Layered Universe
<p>With this approach, an abstracted world of JavaScript was erected:</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/light-tower-javascript-analogy.png" /></p>
<p>This image helps me identify fundamental JavaScript concepts for assignment, local scope, and primitive values. Of course, it is not a standalone image, and you won’t be able to identify these concepts without context. It requires a story to weave JavaScript and analogy together. </p>
<p>A narrative is what drove the other concepts into the picture, quite literally. Here, we can see a closure:</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/closure-illustration-javascript-analogy.jpeg" /></p>
<p>The next image uses mnemonic methods for remembering useful terminology. Unlike arrays and parameters, “execution context” felt like something I would read in an IBM manual from the 1970s. It was a scary term that deserved a scary representation.</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/executioner-javascript-analogy.png" /></p>
<p>I found a connection between “execution context” and the phrase “executor got hex,” which inspired an illustration of a medieval-style executioner holding an axe in one hand and a hex, or sorcerer’s spell, in the other.</p>
<p>Why the spell? It’s not random. It builds on previous existing layers representing other sub-concepts. The spell is tied to our understanding of a function invocation and makes you think of wizards and sorcerers, right? And it is the parenthesis in every function call.  </p>
<p>This begs the question, <em>what is a function?</em> Is it the result of the hex or the execution? Is it the invocation itself? Only a firm understanding of objects would help me identify what really is going on here.</p>
<p>As you can see, the visual layers build upon one another, like a tree with a central trunk branching out in different directions. It’s the knowledge tree I wanted — not one containing every detail about JavaScript, but a central, unified mnemonic resource that could be compared and evaluated against, added to, argued over, and above all, retrieved when I needed it. </p>
<p>I call my illustrations of JavaScript concepts <a href="https://thegreatsync.com/">“The Great Sync”</a>, and I use them to continue to grow my understanding. It is also something I now use to teach others.</p>
<p><img src="https://files.smashing.media/articles/learning-javascript-with-imagination/great-sync-illustrations-javascript-concepts.jpg" /></p>
A Celebration Of Alternative Learning Approaches
<p>Was it all sunshine and daisies for my JavaScript learning journey from this point on? Did building this world make me ace every JavaScript quiz I needed to pass to get that senior-level job?</p>
<p>Nope! I wish the best of luck to anyone who thinks they can learn JavaScript simply by looking at a few pictures. </p>
<p>My biggest takeaway from all my learning efforts is this: Despite The Great Sync solving so many of my personal struggles with the language, is it any better than any single one of the resources I mentioned? Does it have any use without actual coding — the tireless, painful process of trying to get your code to work? Certainly not.</p>
<p>It is one tool, among many, to “see” JavaScript differently and escape the confinement of a code editor or YouTube tutorial.</p>
<p>All of these approaches celebrate the variety and infinite creative potential of the learning experience. And the more we have, the more learners who are stuck on JavaScript can discover new routes to understanding.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/09/javascript-api-guide/">JavaScript APIs You Don’t Know About</a></li>
<li><a href="https://www.smashingmagazine.com/2021/09/interactive-learning-tools-front-end-developers/">Interactive Learning Tools For Front-End Developers</a></li>
<li><a href="https://www.smashingmagazine.com/2022/03/audio-visualization-javascript-gsap-part1/">A Guide To Audio Visualization With JavaScript And GSAP</a></li>
<li><a href="https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/">When CSS Isn’t Enough: JavaScript Requirements For Accessible Components</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Kylo Robinson)</author>
      <enclosure url="http://files.smashing.media/articles/learning-javascript-with-imagination/learning-javascript-with-imagination.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[The Growing Need For Effective Password Management]]></title>
      <link>https://smashingmagazine.com/2023/05/effective-password-management/</link>
      <guid>https://smashingmagazine.com/2023/05/effective-password-management/</guid>
      <pubDate>Thu, 04 May 2023 12:00:00 GMT</pubDate>
      <description><![CDATA[Highlighting the advantages of self-hosted solutions over cloud-based alternatives and exploring collaborative password management and more, P demonstrates how to organize convenient and secure password management in a company.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://passwork.pro/?utm_source=smashingmag&amp;utm_medium=article&amp;utm_campaign=pm">Passwork</a></p>
<p>As businesses rely more on digital services and platforms, the number of passwords and access credentials employees need to remember has grown exponentially. This can lead to the use of weak or duplicated passwords, posing a significant security risk. A centralized and secure password management system is essential for mitigating these risks and ensuring that sensitive information remains protected.</p>
Self-Hosted vs. Cloud-Based Password Management Solutions
<p>When it comes to password management solutions, businesses have two primary options: <strong>self-hosted</strong> and <strong>cloud-based</strong>. While both have their merits, self-hosted solutions often provide a <strong>higher level of control and customization</strong>.</p>
<h3>Advantages Of Self-Hosted Solutions</h3>
<ul>
<li><strong>Greater control</strong><br />A self-hosted solution allows administrators to have complete control over the password management infrastructure, enabling them to customize it according to their company’s needs;</li>
<li><strong>Enhanced security</strong><br />By hosting the password management system on the company’s own servers, businesses can ensure that their sensitive data remains within their control, reducing the risks associated with third-party providers;</li>
<li><strong>Compliance</strong><br />Self-hosted solutions make it easier for companies to meet industry-specific compliance requirements and data protection regulations. </li>
</ul>
<h3>Limitations Of Cloud-Based Solutions</h3>
<ul>
<li><strong>Dependency on third-party providers</strong><br />With cloud-based solutions, businesses rely on external providers for the security and availability of their data. This can lead to potential vulnerabilities and the risk of data breaches;</li>
<li><strong>Limited customisation</strong><br />Cloud-based solutions often have predefined features and settings, which may not align with a company’s unique requirements.</li>
</ul>
Collaborative Password Management In Companies
<p>In a company setting, employees often need to share passwords and access credentials for various applications and services. A collaborative password management system enables the secure sharing of these credentials, improving productivity and security.</p>
<h3>Secure Sharing</h3>
<p>Collaborative password management systems, like <a href="https://passwork.pro/?utm_source=smashingmag&amp;utm_medium=article&amp;utm_campaign=pm">Passwork</a>, provide secure sharing options, allowing employees to share access credentials with colleagues without exposing sensitive data to unauthorized users. This is the kind of feature that a company needs for frictionless sharing in a collaborative environment, but without exposing sensitive information as you might through another platform, like email. This way, sharing happens securely through the password app’s service.</p>
<h3>Permission Management</h3>
<p>To maintain control over who can access and modify shared passwords, a collaborative password management system should offer <strong>granular permission management</strong>. Administrators can assign different levels of access to individual users or groups, ensuring that employees have access to the information they need without compromising security.</p>
<p>Another benefit of permission management is that it provides you with an easy path to knowing <em>who</em> has access to certain information, as well as an easy way to assign and revoke permissions on an individual and group level.</p>
<h3>Version Control</h3>
<p>Have you ever created a new password for a service, then needed to reference the past password? There’s nothing worse than losing a password when you need it in a pinch, and in an environment where multiple users can update and modify shared passwords, version control becomes essential. Collaborative password management systems should provide a history of changes made to shared credentials, enabling administrators to track modifications and revert to previous versions if needed.</p>
Access Rights Segregation
<p>To ensure that sensitive data remains protected, companies should implement access rights segregation within their password management system. This involves dividing users into different groups based on their roles and responsibilities and assigning appropriate access permissions accordingly.</p>
<h4>Role-Based Access Control (RBAC)</h4>
<p>RBAC is a widely used method for implementing access rights segregation. With RBAC, administrators can create roles that represent different job functions within the company and assign appropriate permissions to each role. Users are then assigned to roles, ensuring that they only have access to the information they need to perform their tasks.</p>
<h4>Attribute-Based Access Control (ABAC)</h4>
<p>ABAC is a more flexible approach to access control, where permissions are granted based on a user’s attributes (e.g., job title, department, location, and so on) rather than predefined roles. This allows for greater customization and scalability, as administrators can create complex access rules that adapt to changing business requirements.</p>
Auditing And Monitoring Activity
<p>To maintain a secure password management system, administrators must be able to monitor and audit user activity. This sort of transparency allows you to know exactly who changed something at a particular point in time so you can take corrective action. This includes tracking changes to passwords, monitoring access attempts, and identifying potential security threats.</p>
<h3>Activity Logging</h3>
<p>A comprehensive password management system should log all user activity, including access attempts, password modifications, and sharing events. This information can be invaluable for detecting unauthorized access, troubleshooting issues, and conducting security audits.</p>
<p>For example, it’s nice to have a way to see who has used a particular password and when they used it, especially for troubleshooting permissions.</p>
<h3>Real-Time Notifications</h3>
<p>In addition to logging activity, real-time alerts can help administrators quickly identify and respond to potential security threats. A password management system that provides real-time notifications for suspicious activity, such as multiple failed login attempts or unauthorized password changes, can be instrumental in preventing data breaches.</p>
<h3>Reporting</h3>
<p>Generating reports on user activity, password strength, and compliance can help administrators assess the overall health of their password management system and identify areas for improvement. Regularly reviewing these reports can also ensure that the company remains compliant with relevant industry regulations and best practices.</p>
Best Practices For Implementing A Password Management System
<p>To ensure the success of a password management system, it’s crucial to follow best practices for implementation and ongoing maintenance. You want to ensure that your passwords are managed in a way that is safe for everyone in your company while adhering to compliance guidelines for a secure environment.</p>
<h3>First, Choose The Right Solution</h3>
<p>Selecting the right password management system for your company is essential. Consider factors such as the size of your organization, the level of customization required, and your preferred hosting option (self-hosted vs. cloud-based) when evaluating solutions. <a href="https://passwork.pro/?utm_source=smashingmag&amp;utm_medium=article&amp;utm_campaign=pm">Passwork</a>, for example, offers a self-hosted solution with robust collaboration features, making it a suitable option for businesses looking for greater control and customization.</p>
<h3>Next, Train Employees</h3>
<p>Employee training is crucial for the successful adoption of a password management system. Ensure that all users understand how to use the system, the importance of password security, and company policies related to password management.</p>
<h3>Regularly Review And Update Policies</h3>
<p>As your business evolves, your password management policies should adapt accordingly. Regularly review and update your policies to ensure that they continue to meet your organization’s needs and maintain compliance with industry regulations.</p>
<h3>Monitor And Audit System Activity</h3>
<p>Stay vigilant by regularly monitoring and auditing your password management system. This will help you identify potential security threats and ensure that your system remains secure and up-to-date.</p>
Password Policy Best Practices
<p>To maintain a secure password management system, it’s essential to establish strong password policies and ensure that employees follow best practices.</p>
<h3>Password Length And Complexity</h3>
<p>A strong password policy should require a minimum password length and a combination of characters, including upper and lower case letters, numbers, and special characters. This helps to increase <strong>password entropy</strong>, making it more difficult for attackers to guess or crack passwords using brute force methods.</p>
<h3>Password Expiration And Rotation</h3>
<p>Regularly changing passwords can help to minimise the risk of unauthorized access, especially in cases where passwords have been compromised without the knowledge of the organization. Implementing a password expiration policy that requires users to change their passwords at regular intervals can enhance security.</p>
<h3>Two-Factor Authentication (2FA)</h3>
<p>In addition to strong password policies, implementing two-factor authentication can provide an additional layer of security. By requiring users to provide a second form of verification, such as a code sent to a mobile device, 2FA reduces the risk of unauthorized access even if a password is compromised.</p>
<h3>Prevent Reused Passwords</h3>
<p>Employees should be discouraged from using the same password across multiple accounts and services. Encourage the use of unique passwords for each account to minimise the risk of unauthorized access in case one password is compromised.</p>
Integrations And Compatibility
<p>An effective password management system should be compatible with various platforms, applications, and services that your company uses. This ensures seamless integration and streamlined access management.</p>
<h4>Single Sign-On (SSO)</h4>
<p>SSO enables users to access multiple applications and services with a single set of credentials.</p>
<p>By integrating your password management system with SSO, you can simplify the login process for employees, reducing the need for multiple passwords and improving security.</p>
<h3>Browser Extensions and Mobile Apps</h3>
<p>A password management system that offers browser extensions and mobile apps can help ensure that employees have access to their passwords and credentials wherever they are. This enhances productivity and encourages the adoption of the password management system.</p>
<h3>Custom Integrations</h3>
<p>Depending on your company’s requirements, you may need to integrate your password management system with other tools, such as ticketing systems, customer relationship management platforms, or identity and access management solutions. Ensure that the password management system you choose is flexible and allows for custom integrations. Make sure that the password management system you decide to use has the flexibility to connect with the other services you rely on for your business.</p>
Backup And Disaster Recovery
<p>A robust password management system should include backup and disaster recovery features to ensure the availability and integrity of your organization’s passwords and credentials.</p>
<h3>Regular Backups</h3>
<p>Implement a backup policy that includes regular backups of your password management system’s data. This helps to protect against data loss due to hardware failures, accidental deletions, or other unforeseen issues.</p>
<h3>Encrypted Backups</h3>
<p>Backups should be encrypted to protect the sensitive data they contain. Ensure that your password management system supports encrypted backups and uses strong encryption algorithms to safeguard your data.</p>
<h3>Disaster Recovery Plan</h3>
<p>Develop a disaster recovery plan that outlines the steps to be taken in case of a system failure, data breach, or other security incidents. This plan should include procedures for restoring data from backups, as well as measures to prevent further damage or unauthorized access.</p>
Evaluating And Selecting A Password Management Solution
<p>When choosing a password management system, it’s important to thoroughly evaluate potential solutions and select the one that best meets your organization’s needs.</p>
<h3>Security Features</h3>
<p>Assess the security features offered by each solution, such as encryption algorithms, two-factor authentication support, and activity monitoring capabilities. Ensure that the solution adheres to industry standards and best practices for data security.</p>
<h3>Scalability</h3>
<p>Consider the scalability of the password management system, especially if your organization is growing or has plans for expansion. The solution should be able to handle an increasing number of users and passwords without compromising performance or security.</p>
<h3>Ease of Use</h3>
<p>User adoption is crucial for the success of a password management system. Evaluate the user interface and overall ease of use of each solution, as this can have a significant impact on employee adoption and satisfaction.</p>
<h3>Cost</h3>
<p>Consider the total cost of ownership for each password management system, including initial implementation costs, ongoing maintenance, and any additional fees for upgrades or add-on features. Be sure to weigh these costs against the potential benefits and savings offered by a more secure and efficient password management process.</p>
Ongoing Maintenance And Support
<p>Once your password management system is in place, it’s essential to keep it up-to-date and ensure that users receive the necessary support.</p>
<h3>Software Updates</h3>
<p>Regularly update your password management system to benefit from the latest security patches, feature enhancements, and bug fixes. This helps to maintain the stability and security of the system.</p>
<h3>User Support</h3>
<p>Provide user support for your password management system, including training materials, FAQs, and access to technical assistance when needed. This ensures that employees can effectively use the system and resolve any issues that may arise.</p>
<h3>Periodic Security Assessments</h3>
<p>Conduct periodic security assessments of your password management system to identify any potential vulnerabilities and ensure that it continues to meet your organization’s security requirements. This may include penetration testing, vulnerability scanning, and other security assessments.</p>
Conclusion
<p>Organizing password management in a company is a critical task for system administrators. By selecting the right solution, implementing access rights segregation, fostering collaboration, and actively monitoring and auditing the system, administrators can create a secure and efficient password management environment. Additionally, establishing strong password policies, ensuring like <a href="https://passwork.pro/?utm_source=smashingmag&amp;utm_medium=article&amp;utm_campaign=pm">Passwork</a>, can offer businesses greater control and customization, providing a solid foundation for effective password management.</p>
<p>By following the best practices outlined in this guide, system administrators can enhance their organization’s overall security posture while improving productivity and streamlining access management.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Iliya Garakh)</author>
      <enclosure url="http://files.smashing.media/articles/effective-password-management/effective-password-management.jpg" length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Smashing Podcast Episode 60 With Mei Zhang: How Do You Design A Design Process?]]></title>
      <link>https://smashingmagazine.com/2023/05/smashing-podcast-episode-60/</link>
      <guid>https://smashingmagazine.com/2023/05/smashing-podcast-episode-60/</guid>
      <pubDate>Tue, 02 May 2023 12:00:00 GMT</pubDate>
      <description><![CDATA[We’re talking about the process of design. How do you build a process to enable your best work? Vitaly Friedman talks to designer Mei Zhang to find out.]]></description>
      <content:encoded><![CDATA[<p>We’re talking about the process of design. How do you build a process to enable your best work? Vitaly Friedman talks to designer Mei Zhang to find out.</p>


<h3>Show Notes</h3>
<ul>
<li>Mei Zhang <a href="https://nl.linkedin.com/in/zhangmei">on LinkedIn</a></li>
<li>Mei on <a href="https://medium.com/@thisismei">Medium</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2023/04/building-dockerizing-nodejs-app-stateless-architecture-kinsta/">Building And Dockerizing A Node.js App With Stateless Architecture With Help From Kinsta</a>,” <em>written by Tejas Kumar</em></li>
<li>“<a href="https://www.smashingmagazine.com/2023/04/potential-web-workers-multithreading-web/">Exploring The Potential Of Web Workers For Multithreading On The Web</a>,” <em>written by Sarah Oke Okolo</em></li>
<li>“<a href="https://www.smashingmagazine.com/2023/04/potentially-dangerous-non-accessibility-cookie-notices/">The Potentially Dangerous Non-Accessibility Of Cookie Notices</a>,” <em>written by Marcus Herrmann</em></li>
<li>“<a href="https://www.smashingmagazine.com/2023/04/accessible-tap-target-sizes-rage-taps-clicks/">Accessible Target Sizes Cheatsheet</a>,” <em>written by Vitaly Friedman</em></li>
<li>“<a href="https://www.smashingmagazine.com/2023/04/write-better-css-borrow-ideas-javascript-functions/">Write Better CSS By Borrowing Ideas From JavaScript Functions</a>,” <em>written by Yaphi Berhanu</em></li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://www.linkedin.com/in/zhangmei/"><img src="https://files.smashing.media/articles/smashing-podcast-episode-60/mei-zhang-250x250.jpg" /></a> Vitaly Friedman: She’s a senior UX designer and a UX consultant with a strong product and strategy background. As a kid, she was busy creating arts and fell in love with UX while studying industrial design in college. She has spent her career developing design systems and solving problems for e-commerce products that are loved by millions of people around the world. Now, she also loves helping designers uncover root causes, explore multiple directions, and identify sweet spots between user and business.</p>
<p>Vitaly: She’s currently working with Booking.com and resides in Amsterdam, Netherlands. Of course, she is a cat person, as it often is in the Smashing Podcast. And in her spare time, she can be found painting, skiing, serving her cats — there are a couple — writing on her design blog and learning about design, business, leadership and management. We know she’s a wonderful UX designer, but did you know that she used to swim in order to participate in the Olympics? That was one of her dreams, which unfortunately didn’t come true. However, help her have a lung capacity of over 5,000, which is a big deal. My Smashing friends, please welcome Mei Zhang. Hello, Mei. How are you feeling today?</p>
<p>Mei Zhang: Hello. Hi, everyone. I’m smashing.</p>
<p>Vitaly: Oh, that’s wonderful to hear. How are you? Is it cold out there in Amsterdam these days or is it sunny?</p>
<p>Mei: Luckily, it was sunny in the couple of days. In the past couple of days.</p>
<p>Vitaly: So, it’s better. I have to ask this story. Swimming in the Olympics. Why did you decide to do this? Because I guess you were playing with design and UX already at this point. Or was it before or prior to design?</p>
<p>Mei: Oh.</p>
<p>Vitaly: Why did you decide to take on this challenge?</p>
<p>Mei: It was definitely before the design career. I was in my elementary school and I fall in love with swimming. And as a ambitious little girl who want to have some targets. So I need to compete for the Olympics because this is something very challenging. But unfortunately, I didn’t go through the competition. But I think it definitely gave me something, make me a stronger person. Not only physically, but also mentally. So I really appreciated that.</p>
<p>Vitaly: I have no doubt at all. We’ll probably bring up — I’ll probably bring up this question about how it in the end influenced your UX and design career. But maybe before we dive into that. And maybe you could share a story about how did you even end up in this design and UX world? Maybe you could share a bit about your journey and what brought you where you are today.</p>
<p>Mei: I think what brought me where I am today is the iPhone 4. I got iPhone 4 as a gift at the first year of my college and then I get to learn about human-computer interaction which published by Apple. And another fun fact, the human-computer interaction guidelines are already there in 1987. That is what I remember. Whoa, it’s a long history of something that I have never heard about. I start studying basically X design by myself. I just genuinely really interested in the fancy interactions at that time. What CSS can do for you.</p>
<p>Mei: I was also a Smashing Magazine fan. I follow all your articles and try to do something with CSS and JavaScript. And I think also during my study, people start discussing about what you want as a career after graduation, what industry you would like to join. I was lost at that time, but I know I love UX design and I’m good at it because all my school project was related somehow to human-computer interaction. And, I think, at that time, the IT industry also was booming because people started having Facebook. I think that somehow made me feel like maybe that is something that has a future. So, that is basically my journey into UX design.</p>
<p>Vitaly: But then, you ended up where you are here today. And you have all this. I always reminded of all this UX methodologists and methods and all the ways. And you have created these incredible mind maps as well. But all the things that you potentially need to keep in mind as a UX designer when you are working on a product or on a project. And maybe before we dive there, maybe we could speak a bit more particularly about breaking complexity into something that’s more manageable.</p>
<p>Vitaly: I know that you’ve been working or you are working on relatively or quite complex products. And again, just given this huge amount of all the different methods and options available to you as a UX designer, how do you choose your path? Or specifically, maybe, how do you start when you have a really complex. Maybe an enterprise product or maybe B2B or maybe anything that’s complicated and you need to break it down. How do you do that? What would be your process? And maybe also, your methods to make sense of it all?</p>
<p>Mei: Such a great question. I would guess the first step is always find what is the real problem. What we are designing for. To deep dive into the problems and find the root cause. That is definitely the first step I would choose because the problems also help the designers or people around you to define the process because with different problems you might need different methodologies. And also, the second step will also be identifying the stakeholders. As you mentioned, you have people around you who are genuinely interested or who are in charge of the project. Identify the people around you and what they need.</p>
<p>Mei: The outcome is not only the end product that deliver to the users, but also to. Let’s say it in the simple way. Make your stakeholders happy. I think those are the two basic principles for navigating through what methodologies that I pick. And also, you need to look at availabilities as well. That is, usually happens in the real life work. Maybe for example, you don’t have data for some project. But also, it’s impossible to collect that. Maybe you need to find another method that could answer the same questions that is available.</p>
<p>Vitaly: But then I’m also wondering: you also mentioned data. I’m actually quite wondering because I feel like very often, I end up in this dilemma with teams I’m working with. Where there is a person or there is a team, they have a very strong design vision. This is how it should be. It’s usually based on research and usually going to be very much focused on user needs or customer needs. A very customer-centric view. But then sometimes, it clashes against the business idea of how things should be and the business direction of where the company wants to go. And sometimes, I feel that there is this really strong tension between where the designer wants to go and what the, let’s say, A/B testing tells.</p>
<p>Vitaly: And maybe, testing is such a short-term thing. Where you test if it works now and then. It might be a good thing, of course, to improve things and that will drive conversion, though. But where do you see? How do you see this resolving? How do you get to this balance between doing something? Because again, we run A/B tests and this performs better than this. Against the big design, the grandiose, so to say, design vision that exists in designers’ heads based on user needs and based on business needs.</p>
<p>Mei: First of all, I don’t think those two A/B tests. Let’s say A/B testing and a great vision in the designer’s head is something that cannot exist together. I think they can co-exist because A/B testing is just one of methodologies to validate the concept. It’s the small steps to take you towards a big vision. It’s not a easy task, but it’s the designers who need to guide the product managers or guide your team towards the vision. That is actually sometimes underestimated by the outside because we have a lot of things showed to us designers because we are visionaries.</p>
<p>Mei: We have a vision, so we need to take that through. What I usually do is first, definitely have a great relationship with your product managers because you are actually working together as a whole to reach the vision. They are more business of course, and they are more data-driven or metrics-driven. But on the other hand, you are the user advocate. Build a good relationship and trust with your product managers and work together on a daily basis. It shouldn’t be like, "Ah, I don’t agree with you". Or something like this. But more be like, "Let’s sit together and make a great thing or make a great product."</p>
<p>Mei: And I think sometimes, I also feel like it’s really important to have a businessman side as a designer. Especially if you are working for an organization that’s aimed for profit, your responsibility is also to keep the business running. The business goal is also your goal as a designer, as well. Your responsibility is to craft a great user experience that will improve the business or make the business stronger. For example, learn about business metrics, understand the view from the product side. And also, sometimes I find what is helpful for me is to define user behavior metrics because for A/B testing.</p>
<p>Mei: Sometimes you, say that, maybe some business metrics doesn’t increase but the user behavior metrics were improving. You can also use this as a argument to get things through. It’s not only about A/B testing. It has to be improving business. But if you can prove that it’s going to improve the user experience and the user experience can lead into long-term business growth, then that will happen. And also, I think what I’m doing very often in the past is also to break the vision into smaller pieces that is experimentable.</p>
<p>Mei: In this case, it’s also help as a designer to validate your ideas. I know we are all, as a designer, we’re all proud of our ideas and we believe that’s going to work. And most of the time, of course it’s going to work, but we also need to use data and argument to support our ideas. I would say it is something. It definitely bring a lot of positive side from A/B testing to build a vision.</p>
<p>Vitaly: The reason why I brought this up actually because I’m just coming from a project where this has become a big issue. Where essentially, it seems like there is this very strong tension between, again, the ideas of we need to do something now and drive conversion up now. But again, we also need to think about the long-term goals. And very often, what happens is you might be improving things by showing a new set of popup very prominent and then a bit more prominent, then a bit more flashy and then even more flashy.
But then it’s actually going to hurt your long-term goals. I actually want to maybe dig a little bit deeper. When you speak about user behavior metrics or any ways to capture the quality of the design work basically done. Could you maybe share a few of them that would be most important in your work?</p>
<p>Mei: I’m thinking about something related to the example you just gave about the flashing popup. One example I can think of right now is that, in the past, I also had experience where the product was pushing for metrics. They’re making things rainbowy or flashy. I think definitely what helped was to conduct user interviews to understand what is user’s point of view of that. They’ll be like, "Oh, I think this brand was just to trick me." They also understand the black UX part or the bad. Sorry. The bad UX pattern that try to trick them into something.</p>
<p>Mei: And also, something help me as well is to look into the long-term user flow because they tend to only focus on one metrics and improve that. But have you looked through the whole flow? Maybe the click rate went up, but in the end, less people are converting. Then you cannot say that this is a good solution. You just. Try to find different metrics that can, to build your argument with the product. And also, try to, in your daily basis, try to make your product manager or your product colleagues to more understand what is a good user experience.</p>
<p>Mei: Because I work with all kinds of product managers and some are like you mentioned in that case. Really focusing on one metrics and don’t care the UI. And there are also product managers who really understand what is UX experience. I want to do something good for the long run. Try to also influence your product managers to understand what is good for the long run. Because in the end, someone has to clean up the bad UX in the end because that will lead into something in the future.</p>
<p>Vitaly: Absolutely. I think it also heavily depends on the culture that the company has, the organization has and how the teams are organized. And sometimes, you see that there are. Whenever everything is siloed, you will end up in the situation where a silo would have very specific goals and they don’t even know what the other teams are doing. Or how their things that they may be performing or they’re working on in the vertical effect everyone else. This is more probably a slightly broader question in there, as well.</p>
<p>Vitaly: Maybe you could also share a bit of insight about some of the really complex challenges that you are facing at this moment. And something that you’re working on that, I would say, keep you awake at night. Hopefully not, but maybe there are some things. Just get sense about what you’re working on as well at the moment.</p>
<p>Mei: I couldn’t share details of product strategy with you inside.</p>
<p>Vitaly: Sure.</p>
<p>Mei: Because of the NDA stuff with my current employer, but I will say, the current challenge definitely about how to level up your people skills and communications as a designer through your career. Because I’m running a very big project right now. Basically, more than 30 stakeholders on the play. I really need to learn connecting people. How I can connect with people first by establishing yourself with your activities in your field. And also, to connect people and find the right person for the right question.</p>
<p>Mei: And also, at this point, you need to try to work through other people. I don’t know how to put it in the beautiful way, but more enable others to contribute to the project. In this sense, you need to really articulate the project and the impact of this project. So you can onboard people and to create a win-win situation where they can learn something from the project or they can do product improvement in their services, project as well — so if they would like to be onboarded and work with you.</p>
<p>Mei: Think that was about communication, connecting the people. But the most challenging part is leading the whole project. You need to be super organized, which I was not that great before. You need to have a roadmap of this project and keep updating this every day. So you can visualize what is going on. What are the updates, and also identify the key stakeholder for each phase of the project, of the activities. And how to communicate with them. And you need to visualize them, document them to help you organize the whole project. I guess that was the most challenging part for me.</p>
<p>Vitaly: That doesn’t sound like a lot of moving pixels around in Figma, though.</p>
<p>Mei: Which, I actually missed that part as well. I’m not sure if this is a common case, but I guess so. When you are running a big project where we are not in the phase of creating new ideas and Figma files. It’s more communicating, documenting, pitching or about the project.</p>
<p>Vitaly: This is just a normal state of things, I guess, all the time. Guess I become this person who would move away from, well, sketch at the time and Figma to spreadsheets. I don’t know. Much of my life these days is basically organizing things and also documents in Dropbox Paper or Google Doc. Just organizing things in a way that’s available, accessible to everyone else. It also goes, for example, for organizing meetings. I actually decided to take a design approach to design the best meetings experience. And this is really difficult, I think.</p>
<p>Vitaly: In general, processes which involve people be hard, of course. I’m also just curious about your take on the process because I know that you. Meetings including, for example. Because I know that you often say that you need to design your design process. And this is, very much plays. It’s a melody, beautiful melody to my ears because this is what I’ve been doing to some degree, I guess, for the last couple of years. I’m wondering though, how do you mean that? We’re designing the process. We need to figure out the right way of working for us, for the team, as well.</p>
<p>Vitaly: How do we design meetings? How do we? Do we do stand-ups? Do we do written stand-ups? When do we do retros? How often do we do this and that? Maybe you could share a few things that tend to work better for you that you learned working well. And something that you definitely advise as a consultant, as well, companies do really stay away from when it comes to design process.</p>
<p>Mei: I can quickly tell what companies should stay away for, in terms of a design process.</p>
<p>Vitaly: Sure.</p>
<p>Mei: Is to, for the sake of having a design process, to have a design process. Regardless of what problem you are trying to solve. I still remember in my career there was a company who really want to have a persona. I’m like, "Why we are going to create the personas?" They were like, "Oh, because everybody’s having a personas for this project and it’s a key important deliverable for understanding our customers. So we need this persona." So I’m like, "But do you have any?" I trying to explain persona is more you need to conduct interviews.</p>
<p>Mei: You need to gather datas and then you come up with someone that represents the key problems or key pain point of your customers. It’s not like you just create a persona out of a workshop with some people, internal colleagues of your company. So they’re like, "Oh, okay. Then we need to gather data or we need to have a lot of insight of the persona." But we couldn’t because they don’t have infrastructure to try user behavior. So I’m like, "No worries, just interview eight customers. It’s a good number. And try to find what are the common pain point or what’s a common desire or need they have? And then you have a persona."</p>
<p>Mei: That is something I learned through my career. Oh, you shouldn’t just say, "Oh, this thing looks fancy, the personas or something else. Oh, customer journey map, we need that." It’s not what you’re trying to understand and what do you have. And based on those two aspect, to try to find a methodology that really serve your needs or can help you move forward. This is definitely not advised for people or company. I think what I definitely enjoyed is to design, as you mentioned, design your own design process. Because when I was studying UX design, we have this design thinking process and everyone tried to follow.</p>
<p>Mei: Define a problem and try to understand and create something, iterate. I was also one of them trying, really into that. But then, when I start working I found, this is not always the case. You need to find what is the most important phase of the project. For example, if you are tackling a very complex problem and you don’t even understand what exact problem it is, then you need to spend a lot of effort in defining the problem phase. Or if it is a project really focused on deliverables, we need to shape a marketing video or we need to shape the design within two weeks. Then, maybe you need to spend more energy in the executing phase of the design.</p>
<p>Mei: While we are working, it’s very hard to have everything. To have a very complete design process where you have a solid deliverables for every phases. But you need to figure out which phase is the most important based on the needs and the problem and try to shift your energy there. But that doesn’t mean that you should skip some process. You can still have them, but it’s more trying to say what you have already have and not create new words on there. I think that’s what I learned from design your own design process.</p>
<p>Vitaly: That’s fine. You also, I always keep coming back to this. I don’t even know why. But I always feel that many of the colleagues I’m speaking to, they’re always just don’t even know how to navigate that space of UX methods and models and process. And sometimes, it feels like there is this huge amount of all these different things that very different companies are doing. And they’re inventing for themselves or using some of their other established, already established methods. Luckily, and fortunately for all of us, you have created two mind maps. Which I found really useful to be able to navigate the space in a bit more predictable way. Maybe you could tell a bit more about this and how it helps you in your work.</p>
<p>Mei: A very good question. At the beginning, I was just writing them down for myself. It’s more like library where what is available there and you can grab them as a building block to build up your own design process. But it’s not like something can mapped out the how of those design process and those methodologies and what it can bring. What I’m trying to say is to be flexible about your design process. To not just see the articles and I need this and this in exploration phase. But maybe you don’t need it based on your problem or what you are trying to design. Try to be flexible.</p>
<p>Mei: And also, I will say sometimes it’s more of the experience you get. When you are first time. For example, if you are conducting a user interview at first time or maybe you are doing a survey first time. It’s more you start learning how this methodology work and how you can improve based on the methodology. But then, as you try multiple methodologies in your career, you can reflect on. Well, this can help and what do I need to conduct this methodology? And then if you keep reflecting on them, it will help you in the future to decide, do I need this methodology in my design process? Will this fit the timeline? Will this fit the requirements? Will this be the best methodology to answer the business questions?</p>
<p>Mei: Then you start reflecting and then you can say, "Then, I don’t need this. Oh, I really need this methodology." It’s more, if you haven’t had a lot of experience, try to try them out. Even if you are not working or you are just doing an internship. But try things out to understand how those methodology work. And then, later on, you can. You get a next experience, then you can decide when to use what. So that would be my take.</p>
<p>Vitaly: That’s interesting because I think that to many of us, it’s... I don’t know... Many companies have the process. This is the process that they’re following through. It doesn’t matter what department. Doesn’t matter what their designers are working on. There is the process. This is how we work here kind of thing. And what I’m hearing from you is that basically you might need to be adaptive there. So if you are, say, switching from one design team that you’re working with or another team that maybe have different experience.</p>
<p>Vitaly: Maybe have different preferences. Maybe most of them are working remote. Maybe most of them are hybrid in one way or the other. So adjusting the methodology and the process based on the team that you have. The only thing that’s required there to get it right and to do it well is to know and be comfortable with the different techniques and different methods that are out there. Does that make sense? Is that pretty much what you do?</p>
<p>Mei: Yes, thanks. Yeah, definitely. That is a very great summary of what I just said.</p>
<p>Vitaly: But I think it is also very interesting because it can be quite challenging. Do you find yourself sometimes maybe stuck because you have a particular way of approaching a particular problem with the design team? But then you might have very different levels of experience on the team? You might feel like we need to do something because we might not be able to get things done in time. Or we are not moving along fast enough and I need to switch gears and move something to another methods.</p>
<p>Vitaly: The reason why I’m asking or what I’m asking here is that not only do we need to be able to switch and be adaptive moving from one team to another in your process. But also, as the process is in place, do you feel like sometimes you need to shift gears and change things and plug in something else because what you have is not working?</p>
<p>Mei: Yeah, definitely. I think a very great question. This is a daily life of designer, I guess.</p>
<p>Vitaly: The sad life of a designer, isn’t it?</p>
<p>Mei: Yeah, the sad. We have a dream design process defined before project or before we start working on something and maybe one month later something changed. Then you need to be flexible and adapt to it. We decided to collect user data because the PM was super into quantitative data and we need that. But our source was not available at that time. So we need to really think about, what can we do? Because we are not going to run the survey anymore as a design team or. What I did, I think it’s a really good step. I was also not super experienced at time. I’m the newbie in the company.</p>
<p>Mei: I bring this to the design team. So I never feel shy that if I couldn’t solve them myself, I should consult with other colleague. Then we start doing some root analysis. Why we need this survey? Because we want to discover problems. We don’t have a clear problem. We want to discover the problem. Then do something to also discover the problems without the researcher that can help us send the survey. Then we said, "Maybe we can do a diary study with UserTesting.com. We can set this up together."</p>
<p>Mei: So we did, in the end, a diary study. Those two methodologies actually serve the same purpose in the end. I guess you need to shift when you can, I think, maybe try to have another methodology that can give you the same insight or maybe. Also sometimes, just trust your gut feelings.</p>
<p>Vitaly: Sure.</p>
<p>Mei: If some data is not available, you can validate them later.</p>
<p>Vitaly: That’s right. But Mei, I have to ask a very provoking question at this point. And I’m sure that some of the listeners listening here will be, "What is this? What is he asking?" I do have to ask, do you think that chaos could also be a process? The reason why I’m asking is if you have a relatively small team. Imagine you have maybe two, three designers. You do not have this. And surely, we need to have research. We need to use some methods to make things work. Sometimes, you see companies trying to over organize things.</p>
<p>Vitaly: If you have a team of two or three, do you need daily stand-ups? Doesn’t seem necessary because people are there in the room talking all the time, anyway. It’s not like you have this big organization where you have five departments all doing different pieces and all that. Sometimes, I see companies feeling very comfortable in being extremely unorganized. Being chaotic. Not even having proper documentation and nothing. Obviously, the problem is that you actually end up with the knowledge being stuck with these people. If somebody leaves, that’s obviously an issue. Onboarding is a problem. But they feel like you can be very productive and very successful without having a proper process and pretty much a chaotic environment.</p>
<p>Mei: To be honest, I have to say that I agree with you.</p>
<p>Vitaly: Oh.</p>
<p>Mei: I think to not have a well established progress or being chaotic may be the norm for designers. Because we are creative beings. Sometimes, you get ideas or you discover something just randomly while understanding your customers, users. But I would say totally agree with you. If you have a small team and you are working very closely on a daily basis, you might not need to follow a design process super strictly. It’s more like, "we are in the understanding phase, then what can we do?" And we discuss together.
It’s more like you just need the rough framework to guide you through. And the iteration will also be very fast-paced. You don’t need to go through everything then iterate again. Totally agree with. Another point, I feel like the design process is sometimes also more for the non-designers. Your product stakeholders in the organization or people who are not in your project or another designer who don’t have any background knowledge. It’s more for them to help to organize your self-process or just it’s for your own deliverable. Your ideas that work. To have it to communicate to the outside. That is what I have to say.</p>
<p>Vitaly: That makes perfect sense. Well, as we’re wrapping up here, I do have to ask you of course. But this is a question that I’m asking everyone and I’m really curious about your answer as well. Do you have a particular dream project? A really complicated challenge? A really complicated UX? I don’t know. Monolithic challenge that is probably so hard that it’s pretty, almost impossible to think about it? Just to give you an idea, some of my colleagues when trying to answer this question, they start thinking about, "Oh, I would love to design some, I don’t know. A deck or I don’t know. A control center for Rocket Science Center or anything like that."</p>
<p>Vitaly: Some other would say, "I just want to be able to work with United Nations." It goes really different ways. I’m just curious, do you have a particular dream project or dream task maybe or dream challenge that you would love to tackle one day?</p>
<p>Mei: I will say, I will go for the second direction. I really want to work for the sustainability topic or some project for NGOs because I have been spending my career working for E-commerce company. I really want to contribute to some non-profit organizations that, for example, sustainability or a turtles saving organization. I think what I can help them is my experience in E-commerce to convert people. Maybe I can convert more people doing the good stuff. That would be something I’d definitely love to work on in the future.</p>
<p>Vitaly: Maybe just totally ruining the arc, the story arc of the podcast. I do have to hook onto the thing that you mentioned about E-commerce because I’m just really curious. I spent quite a bit of time around E-commerce as well. Maybe you could share a few stories about things that you learned by working in E-commerce. Thing that’s how customers think or some important things to keep in mind when it comes to E-commerce UX in general.</p>
<p>Mei: I think what I have learned is your customers are smarter than you thought. That is what I have learned. Sometimes, you try to trick them. Sorry. Another dark part in UX I’m talking about. You think you can convert them somehow, but actually they know. They know what you are doing. It’s not the customer of 10 years ago on the E-commerce platform compared to right now. They’re very press sensitive. They compare with multiple competitors. They compare and they make the right decision for them. And that is also related to what we talk in the beginning of the podcast.</p>
<p>Mei: You have to focus on the long run to create a great experience for the long run. To bring them benefit in the long run because they understand everything. And you cannot. If you got them converted once, you might not get them converted the second time and they might leave you if they have really bad experience. I think right now the E-commerce world is really competitive, but also that is good for the customers because they have multiple choices and then they have learned everything. I think that is what I have learned from the E-commerce experience. The customers, they also grow as you grow.</p>
<p>Vitaly: We’ve been learning about UX and design today, but if there is one thing that I do have to ask, Mei because I know that Mei is very much interested in the something that maybe bothers or excites or inspires all of us. Who knows? I know that you’ve been playing with ChatGPT and AI in general, Mei. Do you see? I don’t know. Do you see this wonderful tool, AI as an opponent to us? Something that we need to fight or something that we’re going to embed in our daily workflow and just make the best use of it? How do you use AI today?</p>
<p>Mei: Very good questions. I think, we should see AI as our friends. We’re holding hands together.</p>
<p>Vitaly: Good friends.</p>
<p>Mei: And help us.</p>
<p>Vitaly: The best friends or?</p>
<p>Mei: Good friend.</p>
<p>Vitaly: Good friends.</p>
<p>Mei: Good friends for now before they replace our job, which will happen, I guess. Recently, I started using ChatGPT to write write documentations or write presentations for me. It’s still, you need to write down, get the key point and then ChatGPT will help you generate a good sentence. It saves your time as a designer. You could spend more time in Figma or creating new ideas or creating something or dreaming vision for your company for the coming three years. I think definitely AI saves our time and make sure we can concentrate on works that requires more creativity.</p>
<p>Vitaly: But I do have to ask a follow-up question. Do you think, Mei, that AI is creative?</p>
<p>Mei: I think, to some extent. They are creative based on basically data and stuff that already exist or they could find on the internet. But they might not be able to dream further. Maybe predict human in 10 years. But I’m not sure. I’m not a expert in AI. I would say they are creative to some extent, but it’s also up to us to think about, do we want them to be creative or not?</p>
<p>Vitaly: That’s a good question. Maybe, we can resolve this issue once and for good once we ask ChatGPT if it thinks it is creative. And if so, then it should better prove it to us. Well, if you, dear listener, would like to hear more from Mei, you can find her LinkedIn where she’s at, Mei Zhang, and also Medium. Medium.com/ThisisMei, if I’m not mistaken. Well, thank you so much for joining us today, Mei. Do you have any parting words of wisdom to the future generations who are going to listen to this very podcast 25 years from now thinking, "What are they talking about? Everything is AI anyway now."</p>
<p>Mei: What I want to share is definitely know AI is something not new, but something innovative in our generation right now. Designers are using ChatGPT to create their daily slides. But I would like to talk to the future generations to maybe being creative or follow your intuitations is something that cannot be replaced by AI. I think I really treasure. I think designers should be really treasured because we have the power that might not be able to replace by any machines and stuff because we are human. We are caring and we are always creative and we can connect the dots. That is something you should develop or treasure as a skill. I think that is something I would like to tell to the future generations.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Drew McLellan)</author>
      <enclosure url="http://files.smashing.media/articles/smashing-podcast-episode-60/smashing-podcast-episode-60.png" length="0" type="image/png"/>
    </item>
  </channel>
</rss>